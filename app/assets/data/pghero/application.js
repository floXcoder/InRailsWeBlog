// !! All JS files must be merged into only one JS file !!

/*!
 * jQuery JavaScript Library v3.6.3
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-12-20T21:28Z
 */
( function( global, factory ) {

    "use strict";

    if ( typeof module === "object" && typeof module.exports === "object" ) {

        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket trac-14549 for more info.
        module.exports = global.document ?
            factory( global, true ) :
            function( w ) {
                if ( !w.document ) {
                    throw new Error( "jQuery requires a window with a document" );
                }
                return factory( w );
            };
    } else {
        factory( global );
    }

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
    "use strict";

    var arr = [];

    var getProto = Object.getPrototypeOf;

    var slice = arr.slice;

    var flat = arr.flat ? function( array ) {
        return arr.flat.call( array );
    } : function( array ) {
        return arr.concat.apply( [], array );
    };


    var push = arr.push;

    var indexOf = arr.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var fnToString = hasOwn.toString;

    var ObjectFunctionString = fnToString.call( Object );

    var support = {};

    var isFunction = function isFunction( obj ) {

        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
        // Plus for old WebKit, typeof returns "function" for HTML collections
        // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
        return typeof obj === "function" && typeof obj.nodeType !== "number" &&
            typeof obj.item !== "function";
    };


    var isWindow = function isWindow( obj ) {
        return obj != null && obj === obj.window;
    };


    var document = window.document;



    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };

    function DOMEval( code, node, doc ) {
        doc = doc || document;

        var i, val,
            script = doc.createElement( "script" );

        script.text = code;
        if ( node ) {
            for ( i in preservedScriptAttributes ) {

                // Support: Firefox 64+, Edge 18+
                // Some browsers don't support the "nonce" property on scripts.
                // On the other hand, just using `getAttribute` is not enough as
                // the `nonce` attribute is reset to an empty string whenever it
                // becomes browsing-context connected.
                // See https://github.com/whatwg/html/issues/2369
                // See https://html.spec.whatwg.org/#nonce-attributes
                // The `node.getAttribute` check was added for the sake of
                // `jQuery.globalEval` so that it can fake a nonce-containing node
                // via an object.
                val = node[ i ] || node.getAttribute && node.getAttribute( i );
                if ( val ) {
                    script.setAttribute( i, val );
                }
            }
        }
        doc.head.appendChild( script ).parentNode.removeChild( script );
    }


    function toType( obj ) {
        if ( obj == null ) {
            return obj + "";
        }

        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ toString.call( obj ) ] || "object" :
            typeof obj;
    }
    /* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



    var
        version = "3.6.3",

        // Define a local copy of jQuery
        jQuery = function( selector, context ) {

            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init( selector, context );
        };

    jQuery.fn = jQuery.prototype = {

        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function() {
            return slice.call( this );
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {

            // Return all the elements in a clean array
            if ( num == null ) {
                return slice.call( this );
            }

            // Return just the one element from the set
            return num < 0 ? this[ num + this.length ] : this[ num ];
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems ) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        each: function( callback ) {
            return jQuery.each( this, callback );
        },

        map: function( callback ) {
            return this.pushStack( jQuery.map( this, function( elem, i ) {
                return callback.call( elem, i, elem );
            } ) );
        },

        slice: function() {
            return this.pushStack( slice.apply( this, arguments ) );
        },

        first: function() {
            return this.eq( 0 );
        },

        last: function() {
            return this.eq( -1 );
        },

        even: function() {
            return this.pushStack( jQuery.grep( this, function( _elem, i ) {
                return ( i + 1 ) % 2;
            } ) );
        },

        odd: function() {
            return this.pushStack( jQuery.grep( this, function( _elem, i ) {
                return i % 2;
            } ) );
        },

        eq: function( i ) {
            var len = this.length,
                j = +i + ( i < 0 ? len : 0 );
            return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
        },

        end: function() {
            return this.prevObject || this.constructor();
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[ 0 ] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;

            // Skip the boolean and the target
            target = arguments[ i ] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !isFunction( target ) ) {
            target = {};
        }

        // Extend jQuery itself if only one argument is passed
        if ( i === length ) {
            target = this;
            i--;
        }

        for ( ; i < length; i++ ) {

            // Only deal with non-null/undefined values
            if ( ( options = arguments[ i ] ) != null ) {

                // Extend the base object
                for ( name in options ) {
                    copy = options[ name ];

                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if ( name === "__proto__" || target === copy ) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
                        ( copyIsArray = Array.isArray( copy ) ) ) ) {
                        src = target[ name ];

                        // Ensure proper type for the source value
                        if ( copyIsArray && !Array.isArray( src ) ) {
                            clone = [];
                        } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;

                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );

                        // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend( {

        // Unique for each copy of jQuery on the page
        expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function( msg ) {
            throw new Error( msg );
        },

        noop: function() {},

        isPlainObject: function( obj ) {
            var proto, Ctor;

            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if ( !obj || toString.call( obj ) !== "[object Object]" ) {
                return false;
            }

            proto = getProto( obj );

            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if ( !proto ) {
                return true;
            }

            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
            return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
        },

        isEmptyObject: function( obj ) {
            var name;

            for ( name in obj ) {
                return false;
            }
            return true;
        },

        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function( code, options, doc ) {
            DOMEval( code, { nonce: options && options.nonce }, doc );
        },

        each: function( obj, callback ) {
            var length, i = 0;

            if ( isArrayLike( obj ) ) {
                length = obj.length;
                for ( ; i < length; i++ ) {
                    if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                        break;
                    }
                }
            }

            return obj;
        },

        // results is for internal usage only
        makeArray: function( arr, results ) {
            var ret = results || [];

            if ( arr != null ) {
                if ( isArrayLike( Object( arr ) ) ) {
                    jQuery.merge( ret,
                        typeof arr === "string" ?
                            [ arr ] : arr
                    );
                } else {
                    push.call( ret, arr );
                }
            }

            return ret;
        },

        inArray: function( elem, arr, i ) {
            return arr == null ? -1 : indexOf.call( arr, elem, i );
        },

        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function( first, second ) {
            var len = +second.length,
                j = 0,
                i = first.length;

            for ( ; j < len; j++ ) {
                first[ i++ ] = second[ j ];
            }

            first.length = i;

            return first;
        },

        grep: function( elems, callback, invert ) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                callbackInverse = !callback( elems[ i ], i );
                if ( callbackInverse !== callbackExpect ) {
                    matches.push( elems[ i ] );
                }
            }

            return matches;
        },

        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var length, value,
                i = 0,
                ret = [];

            // Go through the array, translating each of the items to their new values
            if ( isArrayLike( elems ) ) {
                length = elems.length;
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );

                    if ( value != null ) {
                        ret.push( value );
                    }
                }

                // Go through every key on the object,
            } else {
                for ( i in elems ) {
                    value = callback( elems[ i ], i, arg );

                    if ( value != null ) {
                        ret.push( value );
                    }
                }
            }

            // Flatten any nested arrays
            return flat( ret );
        },

        // A global GUID counter for objects
        guid: 1,

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    } );

    if ( typeof Symbol === "function" ) {
        jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
    }

// Populate the class2type map
    jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
        function( _i, name ) {
            class2type[ "[object " + name + "]" ] = name.toLowerCase();
        } );

    function isArrayLike( obj ) {

        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = toType( obj );

        if ( isFunction( obj ) || isWindow( obj ) ) {
            return false;
        }

        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && ( length - 1 ) in obj;
    }
    var Sizzle =
        /*!
 * Sizzle CSS Selector Engine v2.3.9
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2022-12-19
 */
        ( function( window ) {
            var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,

                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,

                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function( a, b ) {
                    if ( a === b ) {
                        hasDuplicate = true;
                    }
                    return 0;
                },

                // Instance methods
                hasOwn = ( {} ).hasOwnProperty,
                arr = [],
                pop = arr.pop,
                pushNative = arr.push,
                push = arr.push,
                slice = arr.slice,

                // Use a stripped-down indexOf as it's faster than native
                // https://jsperf.com/thor-indexof-vs-for/5
                indexOf = function( list, elem ) {
                    var i = 0,
                        len = list.length;
                    for ( ; i < len; i++ ) {
                        if ( list[ i ] === elem ) {
                            return i;
                        }
                    }
                    return -1;
                },

                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
                    "ismap|loop|multiple|open|readonly|required|scoped",

                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",

                // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
                    "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

                    // Operator (capture 2)
                    "*([*^$|!~]?=)" + whitespace +

                    // "Attribute values must be CSS identifiers [capture 5]
                    // or strings [capture 3 or capture 4]"
                    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
                    whitespace + "*\\]",

                pseudos = ":(" + identifier + ")(?:\\((" +

                    // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                    // 1. quoted (capture 3; capture 4 or capture 5)
                    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

                    // 2. simple (capture 6)
                    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

                    // 3. anything else (capture 2)
                    ".*" +
                    ")\\)|)",

                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp( whitespace + "+", "g" ),
                rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
                    whitespace + "+$", "g" ),

                rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
                rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
                    "*" ),
                rdescend = new RegExp( whitespace + "|>" ),

                rpseudo = new RegExp( pseudos ),
                ridentifier = new RegExp( "^" + identifier + "$" ),

                matchExpr = {
                    "ID": new RegExp( "^#(" + identifier + ")" ),
                    "CLASS": new RegExp( "^\\.(" + identifier + ")" ),
                    "TAG": new RegExp( "^(" + identifier + "|[*])" ),
                    "ATTR": new RegExp( "^" + attributes ),
                    "PSEUDO": new RegExp( "^" + pseudos ),
                    "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                        whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
                        whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
                    "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

                    // For use in libraries implementing .is()
                    // We use this for POS matching in `select`
                    "needsContext": new RegExp( "^" + whitespace +
                        "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
                        "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
                },

                rhtml = /HTML$/i,
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,

                rnative = /^[^{]+\{\s*\[native \w/,

                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                rsibling = /[+~]/,

                // CSS escapes
                // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
                funescape = function( escape, nonHex ) {
                    var high = "0x" + escape.slice( 1 ) - 0x10000;

                    return nonHex ?

                        // Strip the backslash prefix from a non-hex escape sequence
                        nonHex :

                        // Replace a hexadecimal escape sequence with the encoded Unicode code point
                        // Support: IE <=11+
                        // For values outside the Basic Multilingual Plane (BMP), manually construct a
                        // surrogate pair
                        high < 0 ?
                            String.fromCharCode( high + 0x10000 ) :
                            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
                },

                // CSS string/identifier serialization
                // https://drafts.csswg.org/cssom/#common-serializing-idioms
                rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function( ch, asCodePoint ) {
                    if ( asCodePoint ) {

                        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                        if ( ch === "\0" ) {
                            return "\uFFFD";
                        }

                        // Control characters and (dependent upon position) numbers get escaped as code points
                        return ch.slice( 0, -1 ) + "\\" +
                            ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
                    }

                    // Other potentially-special ASCII characters get backslash-escaped
                    return "\\" + ch;
                },

                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function() {
                    setDocument();
                },

                inDisabledFieldset = addCombinator(
                    function( elem ) {
                        return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
                    },
                    { dir: "parentNode", next: "legend" }
                );

// Optimize for push.apply( _, NodeList )
            try {
                push.apply(
                    ( arr = slice.call( preferredDoc.childNodes ) ),
                    preferredDoc.childNodes
                );

                // Support: Android<4.0
                // Detect silently failing push.apply
                // eslint-disable-next-line no-unused-expressions
                arr[ preferredDoc.childNodes.length ].nodeType;
            } catch ( e ) {
                push = { apply: arr.length ?

                        // Leverage slice if possible
                        function( target, els ) {
                            pushNative.apply( target, slice.call( els ) );
                        } :

                        // Support: IE<9
                        // Otherwise append directly
                        function( target, els ) {
                            var j = target.length,
                                i = 0;

                            // Can't trust NodeList.length
                            while ( ( target[ j++ ] = els[ i++ ] ) ) {}
                            target.length = j - 1;
                        }
                };
            }

            function Sizzle( selector, context, results, seed ) {
                var m, i, elem, nid, match, groups, newSelector,
                    newContext = context && context.ownerDocument,

                    // nodeType defaults to 9, since context defaults to document
                    nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if ( typeof selector !== "string" || !selector ||
                    nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

                    return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if ( !seed ) {
                    setDocument( context );
                    context = context || document;

                    if ( documentIsHTML ) {

                        // If the selector is sufficiently simple, try using a "get*By*" DOM method
                        // (excepting DocumentFragment context, where the methods don't exist)
                        if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

                            // ID selector
                            if ( ( m = match[ 1 ] ) ) {

                                // Document context
                                if ( nodeType === 9 ) {
                                    if ( ( elem = context.getElementById( m ) ) ) {

                                        // Support: IE, Opera, Webkit
                                        // TODO: identify versions
                                        // getElementById can match elements by name instead of ID
                                        if ( elem.id === m ) {
                                            results.push( elem );
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }

                                    // Element context
                                } else {

                                    // Support: IE, Opera, Webkit
                                    // TODO: identify versions
                                    // getElementById can match elements by name instead of ID
                                    if ( newContext && ( elem = newContext.getElementById( m ) ) &&
                                        contains( context, elem ) &&
                                        elem.id === m ) {

                                        results.push( elem );
                                        return results;
                                    }
                                }

                                // Type selector
                            } else if ( match[ 2 ] ) {
                                push.apply( results, context.getElementsByTagName( selector ) );
                                return results;

                                // Class selector
                            } else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
                                context.getElementsByClassName ) {

                                push.apply( results, context.getElementsByClassName( m ) );
                                return results;
                            }
                        }

                        // Take advantage of querySelectorAll
                        if ( support.qsa &&
                            !nonnativeSelectorCache[ selector + " " ] &&
                            ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

                            // Support: IE 8 only
                            // Exclude object elements
                            ( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

                            newSelector = selector;
                            newContext = context;

                            // qSA considers elements outside a scoping root when evaluating child or
                            // descendant combinators, which is not what we want.
                            // In such cases, we work around the behavior by prefixing every selector in the
                            // list with an ID selector referencing the scope context.
                            // The technique has to be used as well when a leading combinator is used
                            // as such selectors are not recognized by querySelectorAll.
                            // Thanks to Andrew Dupont for this technique.
                            if ( nodeType === 1 &&
                                ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

                                // Expand context for sibling selectors
                                newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
                                    context;

                                // We can use :scope instead of the ID hack if the browser
                                // supports it & if we're not changing the context.
                                if ( newContext !== context || !support.scope ) {

                                    // Capture the context ID, setting it first if necessary
                                    if ( ( nid = context.getAttribute( "id" ) ) ) {
                                        nid = nid.replace( rcssescape, fcssescape );
                                    } else {
                                        context.setAttribute( "id", ( nid = expando ) );
                                    }
                                }

                                // Prefix every selector in the list
                                groups = tokenize( selector );
                                i = groups.length;
                                while ( i-- ) {
                                    groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
                                        toSelector( groups[ i ] );
                                }
                                newSelector = groups.join( "," );
                            }

                            try {

                                // `qSA` may not throw for unrecognized parts using forgiving parsing:
                                // https://drafts.csswg.org/selectors/#forgiving-selector
                                // like the `:has()` pseudo-class:
                                // https://drafts.csswg.org/selectors/#relational
                                // `CSS.supports` is still expected to return `false` then:
                                // https://drafts.csswg.org/css-conditional-4/#typedef-supports-selector-fn
                                // https://drafts.csswg.org/css-conditional-4/#dfn-support-selector
                                if ( support.cssSupportsSelector &&

                                    // eslint-disable-next-line no-undef
                                    !CSS.supports( "selector(:is(" + newSelector + "))" ) ) {

                                    // Support: IE 11+
                                    // Throw to get to the same code path as an error directly in qSA.
                                    // Note: once we only support browser supporting
                                    // `CSS.supports('selector(...)')`, we can most likely drop
                                    // the `try-catch`. IE doesn't implement the API.
                                    throw new Error();
                                }

                                push.apply( results,
                                    newContext.querySelectorAll( newSelector )
                                );
                                return results;
                            } catch ( qsaError ) {
                                nonnativeSelectorCache( selector, true );
                            } finally {
                                if ( nid === expando ) {
                                    context.removeAttribute( "id" );
                                }
                            }
                        }
                    }
                }

                // All others
                return select( selector.replace( rtrim, "$1" ), context, results, seed );
            }

            /**
             * Create key-value caches of limited size
             * @returns {function(string, object)} Returns the Object data after storing it on itself with
             *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
             *	deleting the oldest entry
             */
            function createCache() {
                var keys = [];

                function cache( key, value ) {

                    // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                    if ( keys.push( key + " " ) > Expr.cacheLength ) {

                        // Only keep the most recent entries
                        delete cache[ keys.shift() ];
                    }
                    return ( cache[ key + " " ] = value );
                }
                return cache;
            }

            /**
             * Mark a function for special use by Sizzle
             * @param {Function} fn The function to mark
             */
            function markFunction( fn ) {
                fn[ expando ] = true;
                return fn;
            }

            /**
             * Support testing using an element
             * @param {Function} fn Passed the created element and returns a boolean result
             */
            function assert( fn ) {
                var el = document.createElement( "fieldset" );

                try {
                    return !!fn( el );
                } catch ( e ) {
                    return false;
                } finally {

                    // Remove from its parent by default
                    if ( el.parentNode ) {
                        el.parentNode.removeChild( el );
                    }

                    // release memory in IE
                    el = null;
                }
            }

            /**
             * Adds the same handler for all of the specified attrs
             * @param {String} attrs Pipe-separated list of attributes
             * @param {Function} handler The method that will be applied
             */
            function addHandle( attrs, handler ) {
                var arr = attrs.split( "|" ),
                    i = arr.length;

                while ( i-- ) {
                    Expr.attrHandle[ arr[ i ] ] = handler;
                }
            }

            /**
             * Checks document order of two siblings
             * @param {Element} a
             * @param {Element} b
             * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
             */
            function siblingCheck( a, b ) {
                var cur = b && a,
                    diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                        a.sourceIndex - b.sourceIndex;

                // Use IE sourceIndex if available on both nodes
                if ( diff ) {
                    return diff;
                }

                // Check if b follows a
                if ( cur ) {
                    while ( ( cur = cur.nextSibling ) ) {
                        if ( cur === b ) {
                            return -1;
                        }
                    }
                }

                return a ? 1 : -1;
            }

            /**
             * Returns a function to use in pseudos for input types
             * @param {String} type
             */
            function createInputPseudo( type ) {
                return function( elem ) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for buttons
             * @param {String} type
             */
            function createButtonPseudo( type ) {
                return function( elem ) {
                    var name = elem.nodeName.toLowerCase();
                    return ( name === "input" || name === "button" ) && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for :enabled/:disabled
             * @param {Boolean} disabled true for :disabled; false for :enabled
             */
            function createDisabledPseudo( disabled ) {

                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function( elem ) {

                    // Only certain elements can match :enabled or :disabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                    if ( "form" in elem ) {

                        // Check for inherited disabledness on relevant non-disabled elements:
                        // * listed form-associated elements in a disabled fieldset
                        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                        // * option elements in a disabled optgroup
                        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                        // All such elements have a "form" property.
                        if ( elem.parentNode && elem.disabled === false ) {

                            // Option elements defer to a parent optgroup if present
                            if ( "label" in elem ) {
                                if ( "label" in elem.parentNode ) {
                                    return elem.parentNode.disabled === disabled;
                                } else {
                                    return elem.disabled === disabled;
                                }
                            }

                            // Support: IE 6 - 11
                            // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                            return elem.isDisabled === disabled ||

                                // Where there is no isDisabled, check manually
                                /* jshint -W018 */
                                elem.isDisabled !== !disabled &&
                                inDisabledFieldset( elem ) === disabled;
                        }

                        return elem.disabled === disabled;

                        // Try to winnow out elements that can't be disabled before trusting the disabled property.
                        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                        // even exist on them, let alone have a boolean value.
                    } else if ( "label" in elem ) {
                        return elem.disabled === disabled;
                    }

                    // Remaining elements are neither :enabled nor :disabled
                    return false;
                };
            }

            /**
             * Returns a function to use in pseudos for positionals
             * @param {Function} fn
             */
            function createPositionalPseudo( fn ) {
                return markFunction( function( argument ) {
                    argument = +argument;
                    return markFunction( function( seed, matches ) {
                        var j,
                            matchIndexes = fn( [], seed.length, argument ),
                            i = matchIndexes.length;

                        // Match elements found at the specified indexes
                        while ( i-- ) {
                            if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
                                seed[ j ] = !( matches[ j ] = seed[ j ] );
                            }
                        }
                    } );
                } );
            }

            /**
             * Checks a node for validity as a Sizzle context
             * @param {Element|Object=} context
             * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
             */
            function testContext( context ) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
            }

// Expose support vars for convenience
            support = Sizzle.support = {};

            /**
             * Detects XML nodes
             * @param {Element|Object} elem An element or a document
             * @returns {Boolean} True iff elem is a non-HTML XML node
             */
            isXML = Sizzle.isXML = function( elem ) {
                var namespace = elem && elem.namespaceURI,
                    docElem = elem && ( elem.ownerDocument || elem ).documentElement;

                // Support: IE <=8
                // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
                // https://bugs.jquery.com/ticket/4833
                return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
            };

            /**
             * Sets document-related variables once based on the current document
             * @param {Element|Object} [doc] An element or document object to use to set the document
             * @returns {Object} Returns the current document
             */
            setDocument = Sizzle.setDocument = function( node ) {
                var hasCompare, subWindow,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
                    return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML( document );

                // Support: IE 9 - 11+, Edge 12 - 18+
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( preferredDoc != document &&
                    ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

                    // Support: IE 11, Edge
                    if ( subWindow.addEventListener ) {
                        subWindow.addEventListener( "unload", unloadHandler, false );

                        // Support: IE 9 - 10 only
                    } else if ( subWindow.attachEvent ) {
                        subWindow.attachEvent( "onunload", unloadHandler );
                    }
                }

                // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
                // Safari 4 - 5 only, Opera <=11.6 - 12.x only
                // IE/Edge & older browsers don't support the :scope pseudo-class.
                // Support: Safari 6.0 only
                // Safari 6.0 supports :scope but it's an alias of :root there.
                support.scope = assert( function( el ) {
                    docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
                    return typeof el.querySelectorAll !== "undefined" &&
                        !el.querySelectorAll( ":scope fieldset div" ).length;
                } );

                // Support: Chrome 105+, Firefox 104+, Safari 15.4+
                // Make sure forgiving mode is not used in `CSS.supports( "selector(...)" )`.
                //
                // `:is()` uses a forgiving selector list as an argument and is widely
                // implemented, so it's a good one to test against.
                support.cssSupportsSelector = assert( function() {
                    /* eslint-disable no-undef */

                    return CSS.supports( "selector(*)" ) &&

                        // Support: Firefox 78-81 only
                        // In old Firefox, `:is()` didn't use forgiving parsing. In that case,
                        // fail this test as there's no selector to test against that.
                        // `CSS.supports` uses unforgiving parsing
                        document.querySelectorAll( ":is(:jqfake)" ) &&

                        // `*` is needed as Safari & newer Chrome implemented something in between
                        // for `:has()` - it throws in `qSA` if it only contains an unsupported
                        // argument but multiple ones, one of which is supported, are fine.
                        // We want to play safe in case `:is()` gets the same treatment.
                        !CSS.supports( "selector(:is(*,:jqfake))" );

                    /* eslint-enable */
                } );

                /* Attributes
	---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert( function( el ) {
                    el.className = "i";
                    return !el.getAttribute( "className" );
                } );

                /* getElement(s)By*
	---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert( function( el ) {
                    el.appendChild( document.createComment( "" ) );
                    return !el.getElementsByTagName( "*" ).length;
                } );

                // Support: IE<9
                support.getElementsByClassName = rnative.test( document.getElementsByClassName );

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert( function( el ) {
                    docElem.appendChild( el ).id = expando;
                    return !document.getElementsByName || !document.getElementsByName( expando ).length;
                } );

                // ID filter and find
                if ( support.getById ) {
                    Expr.filter[ "ID" ] = function( id ) {
                        var attrId = id.replace( runescape, funescape );
                        return function( elem ) {
                            return elem.getAttribute( "id" ) === attrId;
                        };
                    };
                    Expr.find[ "ID" ] = function( id, context ) {
                        if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                            var elem = context.getElementById( id );
                            return elem ? [ elem ] : [];
                        }
                    };
                } else {
                    Expr.filter[ "ID" ] =  function( id ) {
                        var attrId = id.replace( runescape, funescape );
                        return function( elem ) {
                            var node = typeof elem.getAttributeNode !== "undefined" &&
                                elem.getAttributeNode( "id" );
                            return node && node.value === attrId;
                        };
                    };

                    // Support: IE 6 - 7 only
                    // getElementById is not reliable as a find shortcut
                    Expr.find[ "ID" ] = function( id, context ) {
                        if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                            var node, i, elems,
                                elem = context.getElementById( id );

                            if ( elem ) {

                                // Verify the id attribute
                                node = elem.getAttributeNode( "id" );
                                if ( node && node.value === id ) {
                                    return [ elem ];
                                }

                                // Fall back on getElementsByName
                                elems = context.getElementsByName( id );
                                i = 0;
                                while ( ( elem = elems[ i++ ] ) ) {
                                    node = elem.getAttributeNode( "id" );
                                    if ( node && node.value === id ) {
                                        return [ elem ];
                                    }
                                }
                            }

                            return [];
                        }
                    };
                }

                // Tag
                Expr.find[ "TAG" ] = support.getElementsByTagName ?
                    function( tag, context ) {
                        if ( typeof context.getElementsByTagName !== "undefined" ) {
                            return context.getElementsByTagName( tag );

                            // DocumentFragment nodes don't have gEBTN
                        } else if ( support.qsa ) {
                            return context.querySelectorAll( tag );
                        }
                    } :

                    function( tag, context ) {
                        var elem,
                            tmp = [],
                            i = 0,

                            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                            results = context.getElementsByTagName( tag );

                        // Filter out possible comments
                        if ( tag === "*" ) {
                            while ( ( elem = results[ i++ ] ) ) {
                                if ( elem.nodeType === 1 ) {
                                    tmp.push( elem );
                                }
                            }

                            return tmp;
                        }
                        return results;
                    };

                // Class
                Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
                    if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
                        return context.getElementsByClassName( className );
                    }
                };

                /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See https://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

                    // Build QSA regex
                    // Regex strategy adopted from Diego Perini
                    assert( function( el ) {

                        var input;

                        // Select is set to empty string on purpose
                        // This is to test IE's treatment of not explicitly
                        // setting a boolean content attribute,
                        // since its presence should be enough
                        // https://bugs.jquery.com/ticket/12359
                        docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
                            "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                            "<option selected=''></option></select>";

                        // Support: IE8, Opera 11-12.16
                        // Nothing should be selected when empty strings follow ^= or $= or *=
                        // The test attribute must be unknown in Opera but "safe" for WinRT
                        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                        if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
                            rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
                        }

                        // Support: IE8
                        // Boolean attributes and "value" are not treated correctly
                        if ( !el.querySelectorAll( "[selected]" ).length ) {
                            rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
                        }

                        // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                        if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                            rbuggyQSA.push( "~=" );
                        }

                        // Support: IE 11+, Edge 15 - 18+
                        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                        // Adding a temporary attribute to the document before the selection works
                        // around the issue.
                        // Interestingly, IE 10 & older don't seem to have the issue.
                        input = document.createElement( "input" );
                        input.setAttribute( "name", "" );
                        el.appendChild( input );
                        if ( !el.querySelectorAll( "[name='']" ).length ) {
                            rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
                                whitespace + "*(?:''|\"\")" );
                        }

                        // Webkit/Opera - :checked should return selected option elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        // IE8 throws error here and will not see later tests
                        if ( !el.querySelectorAll( ":checked" ).length ) {
                            rbuggyQSA.push( ":checked" );
                        }

                        // Support: Safari 8+, iOS 8+
                        // https://bugs.webkit.org/show_bug.cgi?id=136851
                        // In-page `selector#id sibling-combinator selector` fails
                        if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
                            rbuggyQSA.push( ".#.+[+~]" );
                        }

                        // Support: Firefox <=3.6 - 5 only
                        // Old Firefox doesn't throw on a badly-escaped identifier.
                        el.querySelectorAll( "\\\f" );
                        rbuggyQSA.push( "[\\r\\n\\f]" );
                    } );

                    assert( function( el ) {
                        el.innerHTML = "<a href='' disabled='disabled'></a>" +
                            "<select disabled='disabled'><option/></select>";

                        // Support: Windows 8 Native Apps
                        // The type and name attributes are restricted during .innerHTML assignment
                        var input = document.createElement( "input" );
                        input.setAttribute( "type", "hidden" );
                        el.appendChild( input ).setAttribute( "name", "D" );

                        // Support: IE8
                        // Enforce case-sensitivity of name attribute
                        if ( el.querySelectorAll( "[name=d]" ).length ) {
                            rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
                        }

                        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                        // IE8 throws error here and will not see later tests
                        if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
                            rbuggyQSA.push( ":enabled", ":disabled" );
                        }

                        // Support: IE9-11+
                        // IE's :disabled selector does not pick up the children of disabled fieldsets
                        docElem.appendChild( el ).disabled = true;
                        if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
                            rbuggyQSA.push( ":enabled", ":disabled" );
                        }

                        // Support: Opera 10 - 11 only
                        // Opera 10-11 does not throw on post-comma invalid pseudos
                        el.querySelectorAll( "*,:x" );
                        rbuggyQSA.push( ",.*:" );
                    } );
                }

                if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
                    docElem.webkitMatchesSelector ||
                    docElem.mozMatchesSelector ||
                    docElem.oMatchesSelector ||
                    docElem.msMatchesSelector ) ) ) ) {

                    assert( function( el ) {

                        // Check to see if it's possible to do matchesSelector
                        // on a disconnected node (IE 9)
                        support.disconnectedMatch = matches.call( el, "*" );

                        // This should fail with an exception
                        // Gecko does not error, returns false instead
                        matches.call( el, "[s!='']:x" );
                        rbuggyMatches.push( "!=", pseudos );
                    } );
                }

                if ( !support.cssSupportsSelector ) {

                    // Support: Chrome 105+, Safari 15.4+
                    // `:has()` uses a forgiving selector list as an argument so our regular
                    // `try-catch` mechanism fails to catch `:has()` with arguments not supported
                    // natively like `:has(:contains("Foo"))`. Where supported & spec-compliant,
                    // we now use `CSS.supports("selector(:is(SELECTOR_TO_BE_TESTED))")`, but
                    // outside that we mark `:has` as buggy.
                    rbuggyQSA.push( ":has" );
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
                rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

                /* Contains
	---------------------------------------------------------------------- */
                hasCompare = rnative.test( docElem.compareDocumentPosition );

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains = hasCompare || rnative.test( docElem.contains ) ?
                    function( a, b ) {

                        // Support: IE <9 only
                        // IE doesn't have `contains` on `document` so we need to check for
                        // `documentElement` presence.
                        // We need to fall back to `a` when `documentElement` is missing
                        // as `ownerDocument` of elements within `<template/>` may have
                        // a null one - a default behavior of all modern browsers.
                        var adown = a.nodeType === 9 && a.documentElement || a,
                            bup = b && b.parentNode;
                        return a === bup || !!( bup && bup.nodeType === 1 && (
                            adown.contains ?
                                adown.contains( bup ) :
                                a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                        ) );
                    } :
                    function( a, b ) {
                        if ( b ) {
                            while ( ( b = b.parentNode ) ) {
                                if ( b === a ) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };

                /* Sorting
	---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare ?
                    function( a, b ) {

                        // Flag for duplicate removal
                        if ( a === b ) {
                            hasDuplicate = true;
                            return 0;
                        }

                        // Sort on method existence if only one input has compareDocumentPosition
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if ( compare ) {
                            return compare;
                        }

                        // Calculate position if both inputs belong to the same document
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
                            a.compareDocumentPosition( b ) :

                            // Otherwise we know they are disconnected
                            1;

                        // Disconnected nodes
                        if ( compare & 1 ||
                            ( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

                            // Choose the first element that is related to our preferred document
                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            if ( a == document || a.ownerDocument == preferredDoc &&
                                contains( preferredDoc, a ) ) {
                                return -1;
                            }

                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            if ( b == document || b.ownerDocument == preferredDoc &&
                                contains( preferredDoc, b ) ) {
                                return 1;
                            }

                            // Maintain original order
                            return sortInput ?
                                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                                0;
                        }

                        return compare & 4 ? -1 : 1;
                    } :
                    function( a, b ) {

                        // Exit early if the nodes are identical
                        if ( a === b ) {
                            hasDuplicate = true;
                            return 0;
                        }

                        var cur,
                            i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [ a ],
                            bp = [ b ];

                        // Parentless nodes are either documents or disconnected
                        if ( !aup || !bup ) {

                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            /* eslint-disable eqeqeq */
                            return a == document ? -1 :
                                b == document ? 1 :
                                    /* eslint-enable eqeqeq */
                                    aup ? -1 :
                                        bup ? 1 :
                                            sortInput ?
                                                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                                                0;

                            // If the nodes are siblings, we can do a quick check
                        } else if ( aup === bup ) {
                            return siblingCheck( a, b );
                        }

                        // Otherwise we need full lists of their ancestors for comparison
                        cur = a;
                        while ( ( cur = cur.parentNode ) ) {
                            ap.unshift( cur );
                        }
                        cur = b;
                        while ( ( cur = cur.parentNode ) ) {
                            bp.unshift( cur );
                        }

                        // Walk down the tree looking for a discrepancy
                        while ( ap[ i ] === bp[ i ] ) {
                            i++;
                        }

                        return i ?

                            // Do a sibling check if the nodes have a common ancestor
                            siblingCheck( ap[ i ], bp[ i ] ) :

                            // Otherwise nodes in our document sort first
                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            /* eslint-disable eqeqeq */
                            ap[ i ] == preferredDoc ? -1 :
                                bp[ i ] == preferredDoc ? 1 :
                                    /* eslint-enable eqeqeq */
                                    0;
                    };

                return document;
            };

            Sizzle.matches = function( expr, elements ) {
                return Sizzle( expr, null, null, elements );
            };

            Sizzle.matchesSelector = function( elem, expr ) {
                setDocument( elem );

                if ( support.matchesSelector && documentIsHTML &&
                    !nonnativeSelectorCache[ expr + " " ] &&
                    ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
                    ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

                    try {
                        var ret = matches.call( elem, expr );

                        // IE 9's matchesSelector returns false on disconnected nodes
                        if ( ret || support.disconnectedMatch ||

                            // As well, disconnected nodes are said to be in a document
                            // fragment in IE 9
                            elem.document && elem.document.nodeType !== 11 ) {
                            return ret;
                        }
                    } catch ( e ) {
                        nonnativeSelectorCache( expr, true );
                    }
                }

                return Sizzle( expr, document, null, [ elem ] ).length > 0;
            };

            Sizzle.contains = function( context, elem ) {

                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( ( context.ownerDocument || context ) != document ) {
                    setDocument( context );
                }
                return contains( context, elem );
            };

            Sizzle.attr = function( elem, name ) {

                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( ( elem.ownerDocument || elem ) != document ) {
                    setDocument( elem );
                }

                var fn = Expr.attrHandle[ name.toLowerCase() ],

                    // Don't get fooled by Object.prototype properties (jQuery #13807)
                    val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
                        fn( elem, name, !documentIsHTML ) :
                        undefined;

                return val !== undefined ?
                    val :
                    support.attributes || !documentIsHTML ?
                        elem.getAttribute( name ) :
                        ( val = elem.getAttributeNode( name ) ) && val.specified ?
                            val.value :
                            null;
            };

            Sizzle.escape = function( sel ) {
                return ( sel + "" ).replace( rcssescape, fcssescape );
            };

            Sizzle.error = function( msg ) {
                throw new Error( "Syntax error, unrecognized expression: " + msg );
            };

            /**
             * Document sorting and removing duplicates
             * @param {ArrayLike} results
             */
            Sizzle.uniqueSort = function( results ) {
                var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice( 0 );
                results.sort( sortOrder );

                if ( hasDuplicate ) {
                    while ( ( elem = results[ i++ ] ) ) {
                        if ( elem === results[ i ] ) {
                            j = duplicates.push( i );
                        }
                    }
                    while ( j-- ) {
                        results.splice( duplicates[ j ], 1 );
                    }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
            };

            /**
             * Utility function for retrieving the text value of an array of DOM nodes
             * @param {Array|Element} elem
             */
            getText = Sizzle.getText = function( elem ) {
                var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                if ( !nodeType ) {

                    // If no nodeType, this is expected to be an array
                    while ( ( node = elem[ i++ ] ) ) {

                        // Do not traverse comment nodes
                        ret += getText( node );
                    }
                } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

                    // Use textContent for elements
                    // innerText usage removed for consistency of new lines (jQuery #11153)
                    if ( typeof elem.textContent === "string" ) {
                        return elem.textContent;
                    } else {

                        // Traverse its children
                        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                            ret += getText( elem );
                        }
                    }
                } else if ( nodeType === 3 || nodeType === 4 ) {
                    return elem.nodeValue;
                }

                // Do not include comment or processing instruction nodes

                return ret;
            };

            Expr = Sizzle.selectors = {

                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                    ">": { dir: "parentNode", first: true },
                    " ": { dir: "parentNode" },
                    "+": { dir: "previousSibling", first: true },
                    "~": { dir: "previousSibling" }
                },

                preFilter: {
                    "ATTR": function( match ) {
                        match[ 1 ] = match[ 1 ].replace( runescape, funescape );

                        // Move the given value to match[3] whether quoted or unquoted
                        match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
                            match[ 5 ] || "" ).replace( runescape, funescape );

                        if ( match[ 2 ] === "~=" ) {
                            match[ 3 ] = " " + match[ 3 ] + " ";
                        }

                        return match.slice( 0, 4 );
                    },

                    "CHILD": function( match ) {

                        /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                        match[ 1 ] = match[ 1 ].toLowerCase();

                        if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

                            // nth-* requires argument
                            if ( !match[ 3 ] ) {
                                Sizzle.error( match[ 0 ] );
                            }

                            // numeric x and y parameters for Expr.filter.CHILD
                            // remember that false/true cast respectively to 0/1
                            match[ 4 ] = +( match[ 4 ] ?
                                match[ 5 ] + ( match[ 6 ] || 1 ) :
                                2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
                            match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

                            // other types prohibit arguments
                        } else if ( match[ 3 ] ) {
                            Sizzle.error( match[ 0 ] );
                        }

                        return match;
                    },

                    "PSEUDO": function( match ) {
                        var excess,
                            unquoted = !match[ 6 ] && match[ 2 ];

                        if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
                            return null;
                        }

                        // Accept quoted arguments as-is
                        if ( match[ 3 ] ) {
                            match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

                            // Strip excess characters from unquoted arguments
                        } else if ( unquoted && rpseudo.test( unquoted ) &&

                            // Get excess from tokenize (recursively)
                            ( excess = tokenize( unquoted, true ) ) &&

                            // advance to the next closing parenthesis
                            ( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

                            // excess is a negative index
                            match[ 0 ] = match[ 0 ].slice( 0, excess );
                            match[ 2 ] = unquoted.slice( 0, excess );
                        }

                        // Return only captures needed by the pseudo filter method (type and argument)
                        return match.slice( 0, 3 );
                    }
                },

                filter: {

                    "TAG": function( nodeNameSelector ) {
                        var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
                        return nodeNameSelector === "*" ?
                            function() {
                                return true;
                            } :
                            function( elem ) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            };
                    },

                    "CLASS": function( className ) {
                        var pattern = classCache[ className + " " ];

                        return pattern ||
                            ( pattern = new RegExp( "(^|" + whitespace +
                                ")" + className + "(" + whitespace + "|$)" ) ) && classCache(
                                className, function( elem ) {
                                    return pattern.test(
                                        typeof elem.className === "string" && elem.className ||
                                        typeof elem.getAttribute !== "undefined" &&
                                        elem.getAttribute( "class" ) ||
                                        ""
                                    );
                                } );
                    },

                    "ATTR": function( name, operator, check ) {
                        return function( elem ) {
                            var result = Sizzle.attr( elem, name );

                            if ( result == null ) {
                                return operator === "!=";
                            }
                            if ( !operator ) {
                                return true;
                            }

                            result += "";

                            /* eslint-disable max-len */

                            return operator === "=" ? result === check :
                                operator === "!=" ? result !== check :
                                    operator === "^=" ? check && result.indexOf( check ) === 0 :
                                        operator === "*=" ? check && result.indexOf( check ) > -1 :
                                            operator === "$=" ? check && result.slice( -check.length ) === check :
                                                operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                                                    operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                                                        false;
                            /* eslint-enable max-len */

                        };
                    },

                    "CHILD": function( type, what, _argument, first, last ) {
                        var simple = type.slice( 0, 3 ) !== "nth",
                            forward = type.slice( -4 ) !== "last",
                            ofType = what === "of-type";

                        return first === 1 && last === 0 ?

                            // Shortcut for :nth-*(n)
                            function( elem ) {
                                return !!elem.parentNode;
                            } :

                            function( elem, _context, xml ) {
                                var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType,
                                    diff = false;

                                if ( parent ) {

                                    // :(first|last|only)-(child|of-type)
                                    if ( simple ) {
                                        while ( dir ) {
                                            node = elem;
                                            while ( ( node = node[ dir ] ) ) {
                                                if ( ofType ?
                                                    node.nodeName.toLowerCase() === name :
                                                    node.nodeType === 1 ) {

                                                    return false;
                                                }
                                            }

                                            // Reverse direction for :only-* (if we haven't yet done so)
                                            start = dir = type === "only" && !start && "nextSibling";
                                        }
                                        return true;
                                    }

                                    start = [ forward ? parent.firstChild : parent.lastChild ];

                                    // non-xml :nth-child(...) stores cache data on `parent`
                                    if ( forward && useCache ) {

                                        // Seek `elem` from a previously-cached index

                                        // ...in a gzip-friendly way
                                        node = parent;
                                        outerCache = node[ expando ] || ( node[ expando ] = {} );

                                        // Support: IE <9 only
                                        // Defend against cloned attroperties (jQuery gh-1709)
                                        uniqueCache = outerCache[ node.uniqueID ] ||
                                            ( outerCache[ node.uniqueID ] = {} );

                                        cache = uniqueCache[ type ] || [];
                                        nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                        diff = nodeIndex && cache[ 2 ];
                                        node = nodeIndex && parent.childNodes[ nodeIndex ];

                                        while ( ( node = ++nodeIndex && node && node[ dir ] ||

                                            // Fallback to seeking `elem` from the start
                                            ( diff = nodeIndex = 0 ) || start.pop() ) ) {

                                            // When found, cache indexes on `parent` and break
                                            if ( node.nodeType === 1 && ++diff && node === elem ) {
                                                uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
                                                break;
                                            }
                                        }

                                    } else {

                                        // Use previously-cached element index if available
                                        if ( useCache ) {

                                            // ...in a gzip-friendly way
                                            node = elem;
                                            outerCache = node[ expando ] || ( node[ expando ] = {} );

                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[ node.uniqueID ] ||
                                                ( outerCache[ node.uniqueID ] = {} );

                                            cache = uniqueCache[ type ] || [];
                                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                            diff = nodeIndex;
                                        }

                                        // xml :nth-child(...)
                                        // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                        if ( diff === false ) {

                                            // Use the same loop as above to seek `elem` from the start
                                            while ( ( node = ++nodeIndex && node && node[ dir ] ||
                                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {

                                                if ( ( ofType ?
                                                        node.nodeName.toLowerCase() === name :
                                                        node.nodeType === 1 ) &&
                                                    ++diff ) {

                                                    // Cache the index of each encountered element
                                                    if ( useCache ) {
                                                        outerCache = node[ expando ] ||
                                                            ( node[ expando ] = {} );

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[ node.uniqueID ] ||
                                                            ( outerCache[ node.uniqueID ] = {} );

                                                        uniqueCache[ type ] = [ dirruns, diff ];
                                                    }

                                                    if ( node === elem ) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    // Incorporate the offset, then check against cycle size
                                    diff -= last;
                                    return diff === first || ( diff % first === 0 && diff / first >= 0 );
                                }
                            };
                    },

                    "PSEUDO": function( pseudo, argument ) {

                        // pseudo-class names are case-insensitive
                        // http://www.w3.org/TR/selectors/#pseudo-classes
                        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                        // Remember that setFilters inherits from pseudos
                        var args,
                            fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                                Sizzle.error( "unsupported pseudo: " + pseudo );

                        // The user may use createPseudo to indicate that
                        // arguments are needed to create the filter function
                        // just as Sizzle does
                        if ( fn[ expando ] ) {
                            return fn( argument );
                        }

                        // But maintain support for old signatures
                        if ( fn.length > 1 ) {
                            args = [ pseudo, pseudo, "", argument ];
                            return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                                markFunction( function( seed, matches ) {
                                    var idx,
                                        matched = fn( seed, argument ),
                                        i = matched.length;
                                    while ( i-- ) {
                                        idx = indexOf( seed, matched[ i ] );
                                        seed[ idx ] = !( matches[ idx ] = matched[ i ] );
                                    }
                                } ) :
                                function( elem ) {
                                    return fn( elem, 0, args );
                                };
                        }

                        return fn;
                    }
                },

                pseudos: {

                    // Potentially complex pseudos
                    "not": markFunction( function( selector ) {

                        // Trim the selector passed to compile
                        // to avoid treating leading and trailing
                        // spaces as combinators
                        var input = [],
                            results = [],
                            matcher = compile( selector.replace( rtrim, "$1" ) );

                        return matcher[ expando ] ?
                            markFunction( function( seed, matches, _context, xml ) {
                                var elem,
                                    unmatched = matcher( seed, null, xml, [] ),
                                    i = seed.length;

                                // Match elements unmatched by `matcher`
                                while ( i-- ) {
                                    if ( ( elem = unmatched[ i ] ) ) {
                                        seed[ i ] = !( matches[ i ] = elem );
                                    }
                                }
                            } ) :
                            function( elem, _context, xml ) {
                                input[ 0 ] = elem;
                                matcher( input, null, xml, results );

                                // Don't keep the element (issue #299)
                                input[ 0 ] = null;
                                return !results.pop();
                            };
                    } ),

                    "has": markFunction( function( selector ) {
                        return function( elem ) {
                            return Sizzle( selector, elem ).length > 0;
                        };
                    } ),

                    "contains": markFunction( function( text ) {
                        text = text.replace( runescape, funescape );
                        return function( elem ) {
                            return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
                        };
                    } ),

                    // "Whether an element is represented by a :lang() selector
                    // is based solely on the element's language value
                    // being equal to the identifier C,
                    // or beginning with the identifier C immediately followed by "-".
                    // The matching of C against the element's language value is performed case-insensitively.
                    // The identifier C does not have to be a valid language name."
                    // http://www.w3.org/TR/selectors/#lang-pseudo
                    "lang": markFunction( function( lang ) {

                        // lang value must be a valid identifier
                        if ( !ridentifier.test( lang || "" ) ) {
                            Sizzle.error( "unsupported lang: " + lang );
                        }
                        lang = lang.replace( runescape, funescape ).toLowerCase();
                        return function( elem ) {
                            var elemLang;
                            do {
                                if ( ( elemLang = documentIsHTML ?
                                    elem.lang :
                                    elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                                }
                            } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
                            return false;
                        };
                    } ),

                    // Miscellaneous
                    "target": function( elem ) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice( 1 ) === elem.id;
                    },

                    "root": function( elem ) {
                        return elem === docElem;
                    },

                    "focus": function( elem ) {
                        return elem === document.activeElement &&
                            ( !document.hasFocus || document.hasFocus() ) &&
                            !!( elem.type || elem.href || ~elem.tabIndex );
                    },

                    // Boolean properties
                    "enabled": createDisabledPseudo( false ),
                    "disabled": createDisabledPseudo( true ),

                    "checked": function( elem ) {

                        // In CSS3, :checked should return both checked and selected elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        var nodeName = elem.nodeName.toLowerCase();
                        return ( nodeName === "input" && !!elem.checked ) ||
                            ( nodeName === "option" && !!elem.selected );
                    },

                    "selected": function( elem ) {

                        // Accessing this property makes selected-by-default
                        // options in Safari work properly
                        if ( elem.parentNode ) {
                            // eslint-disable-next-line no-unused-expressions
                            elem.parentNode.selectedIndex;
                        }

                        return elem.selected === true;
                    },

                    // Contents
                    "empty": function( elem ) {

                        // http://www.w3.org/TR/selectors/#empty-pseudo
                        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                        //   but not by others (comment: 8; processing instruction: 7; etc.)
                        // nodeType < 6 works because attributes (2) do not appear as children
                        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                            if ( elem.nodeType < 6 ) {
                                return false;
                            }
                        }
                        return true;
                    },

                    "parent": function( elem ) {
                        return !Expr.pseudos[ "empty" ]( elem );
                    },

                    // Element/input types
                    "header": function( elem ) {
                        return rheader.test( elem.nodeName );
                    },

                    "input": function( elem ) {
                        return rinputs.test( elem.nodeName );
                    },

                    "button": function( elem ) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },

                    "text": function( elem ) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" &&
                            elem.type === "text" &&

                            // Support: IE <10 only
                            // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                            ( ( attr = elem.getAttribute( "type" ) ) == null ||
                                attr.toLowerCase() === "text" );
                    },

                    // Position-in-collection
                    "first": createPositionalPseudo( function() {
                        return [ 0 ];
                    } ),

                    "last": createPositionalPseudo( function( _matchIndexes, length ) {
                        return [ length - 1 ];
                    } ),

                    "eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
                        return [ argument < 0 ? argument + length : argument ];
                    } ),

                    "even": createPositionalPseudo( function( matchIndexes, length ) {
                        var i = 0;
                        for ( ; i < length; i += 2 ) {
                            matchIndexes.push( i );
                        }
                        return matchIndexes;
                    } ),

                    "odd": createPositionalPseudo( function( matchIndexes, length ) {
                        var i = 1;
                        for ( ; i < length; i += 2 ) {
                            matchIndexes.push( i );
                        }
                        return matchIndexes;
                    } ),

                    "lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
                        var i = argument < 0 ?
                            argument + length :
                            argument > length ?
                                length :
                                argument;
                        for ( ; --i >= 0; ) {
                            matchIndexes.push( i );
                        }
                        return matchIndexes;
                    } ),

                    "gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
                        var i = argument < 0 ? argument + length : argument;
                        for ( ; ++i < length; ) {
                            matchIndexes.push( i );
                        }
                        return matchIndexes;
                    } )
                }
            };

            Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
            for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
                Expr.pseudos[ i ] = createInputPseudo( i );
            }
            for ( i in { submit: true, reset: true } ) {
                Expr.pseudos[ i ] = createButtonPseudo( i );
            }

// Easy API for creating new setFilters
            function setFilters() {}
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();

            tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
                var matched, match, tokens, type,
                    soFar, groups, preFilters,
                    cached = tokenCache[ selector + " " ];

                if ( cached ) {
                    return parseOnly ? 0 : cached.slice( 0 );
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while ( soFar ) {

                    // Comma and first run
                    if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
                        if ( match ) {

                            // Don't consume trailing commas as valid
                            soFar = soFar.slice( match[ 0 ].length ) || soFar;
                        }
                        groups.push( ( tokens = [] ) );
                    }

                    matched = false;

                    // Combinators
                    if ( ( match = rcombinators.exec( soFar ) ) ) {
                        matched = match.shift();
                        tokens.push( {
                            value: matched,

                            // Cast descendant combinators to space
                            type: match[ 0 ].replace( rtrim, " " )
                        } );
                        soFar = soFar.slice( matched.length );
                    }

                    // Filters
                    for ( type in Expr.filter ) {
                        if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
                            ( match = preFilters[ type ]( match ) ) ) ) {
                            matched = match.shift();
                            tokens.push( {
                                value: matched,
                                type: type,
                                matches: match
                            } );
                            soFar = soFar.slice( matched.length );
                        }
                    }

                    if ( !matched ) {
                        break;
                    }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly ?
                    soFar.length :
                    soFar ?
                        Sizzle.error( selector ) :

                        // Cache the tokens
                        tokenCache( selector, groups ).slice( 0 );
            };

            function toSelector( tokens ) {
                var i = 0,
                    len = tokens.length,
                    selector = "";
                for ( ; i < len; i++ ) {
                    selector += tokens[ i ].value;
                }
                return selector;
            }

            function addCombinator( matcher, combinator, base ) {
                var dir = combinator.dir,
                    skip = combinator.next,
                    key = skip || dir,
                    checkNonElements = base && key === "parentNode",
                    doneName = done++;

                return combinator.first ?

                    // Check against closest ancestor/preceding element
                    function( elem, context, xml ) {
                        while ( ( elem = elem[ dir ] ) ) {
                            if ( elem.nodeType === 1 || checkNonElements ) {
                                return matcher( elem, context, xml );
                            }
                        }
                        return false;
                    } :

                    // Check against all ancestor/preceding elements
                    function( elem, context, xml ) {
                        var oldCache, uniqueCache, outerCache,
                            newCache = [ dirruns, doneName ];

                        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                        if ( xml ) {
                            while ( ( elem = elem[ dir ] ) ) {
                                if ( elem.nodeType === 1 || checkNonElements ) {
                                    if ( matcher( elem, context, xml ) ) {
                                        return true;
                                    }
                                }
                            }
                        } else {
                            while ( ( elem = elem[ dir ] ) ) {
                                if ( elem.nodeType === 1 || checkNonElements ) {
                                    outerCache = elem[ expando ] || ( elem[ expando ] = {} );

                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[ elem.uniqueID ] ||
                                        ( outerCache[ elem.uniqueID ] = {} );

                                    if ( skip && skip === elem.nodeName.toLowerCase() ) {
                                        elem = elem[ dir ] || elem;
                                    } else if ( ( oldCache = uniqueCache[ key ] ) &&
                                        oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                                        // Assign to newCache so results back-propagate to previous elements
                                        return ( newCache[ 2 ] = oldCache[ 2 ] );
                                    } else {

                                        // Reuse newcache so results back-propagate to previous elements
                                        uniqueCache[ key ] = newCache;

                                        // A match means we're done; a fail means we have to keep checking
                                        if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                        return false;
                    };
            }

            function elementMatcher( matchers ) {
                return matchers.length > 1 ?
                    function( elem, context, xml ) {
                        var i = matchers.length;
                        while ( i-- ) {
                            if ( !matchers[ i ]( elem, context, xml ) ) {
                                return false;
                            }
                        }
                        return true;
                    } :
                    matchers[ 0 ];
            }

            function multipleContexts( selector, contexts, results ) {
                var i = 0,
                    len = contexts.length;
                for ( ; i < len; i++ ) {
                    Sizzle( selector, contexts[ i ], results );
                }
                return results;
            }

            function condense( unmatched, map, filter, context, xml ) {
                var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                for ( ; i < len; i++ ) {
                    if ( ( elem = unmatched[ i ] ) ) {
                        if ( !filter || filter( elem, context, xml ) ) {
                            newUnmatched.push( elem );
                            if ( mapped ) {
                                map.push( i );
                            }
                        }
                    }
                }

                return newUnmatched;
            }

            function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
                if ( postFilter && !postFilter[ expando ] ) {
                    postFilter = setMatcher( postFilter );
                }
                if ( postFinder && !postFinder[ expando ] ) {
                    postFinder = setMatcher( postFinder, postSelector );
                }
                return markFunction( function( seed, results, context, xml ) {
                    var temp, i, elem,
                        preMap = [],
                        postMap = [],
                        preexisting = results.length,

                        // Get initial elements from seed or context
                        elems = seed || multipleContexts(
                            selector || "*",
                            context.nodeType ? [ context ] : context,
                            []
                        ),

                        // Prefilter to get matcher input, preserving a map for seed-results synchronization
                        matcherIn = preFilter && ( seed || !selector ) ?
                            condense( elems, preMap, preFilter, context, xml ) :
                            elems,

                        matcherOut = matcher ?

                            // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                            postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                                // ...intermediate processing is necessary
                                [] :

                                // ...otherwise use results directly
                                results :
                            matcherIn;

                    // Find primary matches
                    if ( matcher ) {
                        matcher( matcherIn, matcherOut, context, xml );
                    }

                    // Apply postFilter
                    if ( postFilter ) {
                        temp = condense( matcherOut, postMap );
                        postFilter( temp, [], context, xml );

                        // Un-match failing elements by moving them back to matcherIn
                        i = temp.length;
                        while ( i-- ) {
                            if ( ( elem = temp[ i ] ) ) {
                                matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
                            }
                        }
                    }

                    if ( seed ) {
                        if ( postFinder || preFilter ) {
                            if ( postFinder ) {

                                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                temp = [];
                                i = matcherOut.length;
                                while ( i-- ) {
                                    if ( ( elem = matcherOut[ i ] ) ) {

                                        // Restore matcherIn since elem is not yet a final match
                                        temp.push( ( matcherIn[ i ] = elem ) );
                                    }
                                }
                                postFinder( null, ( matcherOut = [] ), temp, xml );
                            }

                            // Move matched elements from seed to results to keep them synchronized
                            i = matcherOut.length;
                            while ( i-- ) {
                                if ( ( elem = matcherOut[ i ] ) &&
                                    ( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

                                    seed[ temp ] = !( results[ temp ] = elem );
                                }
                            }
                        }

                        // Add elements to results, through postFinder if defined
                    } else {
                        matcherOut = condense(
                            matcherOut === results ?
                                matcherOut.splice( preexisting, matcherOut.length ) :
                                matcherOut
                        );
                        if ( postFinder ) {
                            postFinder( null, results, matcherOut, xml );
                        } else {
                            push.apply( results, matcherOut );
                        }
                    }
                } );
            }

            function matcherFromTokens( tokens ) {
                var checkContext, matcher, j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[ tokens[ 0 ].type ],
                    implicitRelative = leadingRelative || Expr.relative[ " " ],
                    i = leadingRelative ? 1 : 0,

                    // The foundational matcher ensures that elements are reachable from top-level context(s)
                    matchContext = addCombinator( function( elem ) {
                        return elem === checkContext;
                    }, implicitRelative, true ),
                    matchAnyContext = addCombinator( function( elem ) {
                        return indexOf( checkContext, elem ) > -1;
                    }, implicitRelative, true ),
                    matchers = [ function( elem, context, xml ) {
                        var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                            ( checkContext = context ).nodeType ?
                                matchContext( elem, context, xml ) :
                                matchAnyContext( elem, context, xml ) );

                        // Avoid hanging onto element (issue #299)
                        checkContext = null;
                        return ret;
                    } ];

                for ( ; i < len; i++ ) {
                    if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
                        matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
                    } else {
                        matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

                        // Return special upon seeing a positional matcher
                        if ( matcher[ expando ] ) {

                            // Find the next relative operator (if any) for proper handling
                            j = ++i;
                            for ( ; j < len; j++ ) {
                                if ( Expr.relative[ tokens[ j ].type ] ) {
                                    break;
                                }
                            }
                            return setMatcher(
                                i > 1 && elementMatcher( matchers ),
                                i > 1 && toSelector(

                                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                    tokens
                                        .slice( 0, i - 1 )
                                        .concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
                                ).replace( rtrim, "$1" ),
                                matcher,
                                i < j && matcherFromTokens( tokens.slice( i, j ) ),
                                j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
                                j < len && toSelector( tokens )
                            );
                        }
                        matchers.push( matcher );
                    }
                }

                return elementMatcher( matchers );
            }

            function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
                var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function( seed, context, xml, results, outermost ) {
                        var elem, j, matcher,
                            matchedCount = 0,
                            i = "0",
                            unmatched = seed && [],
                            setMatched = [],
                            contextBackup = outermostContext,

                            // We must always have either seed elements or outermost context
                            elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

                            // Use integer dirruns iff this is the outermost matcher
                            dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
                            len = elems.length;

                        if ( outermost ) {

                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            outermostContext = context == document || context || outermost;
                        }

                        // Add elements passing elementMatchers directly to results
                        // Support: IE<9, Safari
                        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                        for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
                            if ( byElement && elem ) {
                                j = 0;

                                // Support: IE 11+, Edge 17 - 18+
                                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                // two documents; shallow comparisons work.
                                // eslint-disable-next-line eqeqeq
                                if ( !context && elem.ownerDocument != document ) {
                                    setDocument( elem );
                                    xml = !documentIsHTML;
                                }
                                while ( ( matcher = elementMatchers[ j++ ] ) ) {
                                    if ( matcher( elem, context || document, xml ) ) {
                                        results.push( elem );
                                        break;
                                    }
                                }
                                if ( outermost ) {
                                    dirruns = dirrunsUnique;
                                }
                            }

                            // Track unmatched elements for set filters
                            if ( bySet ) {

                                // They will have gone through all possible matchers
                                if ( ( elem = !matcher && elem ) ) {
                                    matchedCount--;
                                }

                                // Lengthen the array for every element, matched or not
                                if ( seed ) {
                                    unmatched.push( elem );
                                }
                            }
                        }

                        // `i` is now the count of elements visited above, and adding it to `matchedCount`
                        // makes the latter nonnegative.
                        matchedCount += i;

                        // Apply set filters to unmatched elements
                        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                        // no element matchers and no seed.
                        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                        // numerically zero.
                        if ( bySet && i !== matchedCount ) {
                            j = 0;
                            while ( ( matcher = setMatchers[ j++ ] ) ) {
                                matcher( unmatched, setMatched, context, xml );
                            }

                            if ( seed ) {

                                // Reintegrate element matches to eliminate the need for sorting
                                if ( matchedCount > 0 ) {
                                    while ( i-- ) {
                                        if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
                                            setMatched[ i ] = pop.call( results );
                                        }
                                    }
                                }

                                // Discard index placeholder values to get only actual matches
                                setMatched = condense( setMatched );
                            }

                            // Add matches to results
                            push.apply( results, setMatched );

                            // Seedless set matches succeeding multiple successful matchers stipulate sorting
                            if ( outermost && !seed && setMatched.length > 0 &&
                                ( matchedCount + setMatchers.length ) > 1 ) {

                                Sizzle.uniqueSort( results );
                            }
                        }

                        // Override manipulation of globals by nested matchers
                        if ( outermost ) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }

                        return unmatched;
                    };

                return bySet ?
                    markFunction( superMatcher ) :
                    superMatcher;
            }

            compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
                var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[ selector + " " ];

                if ( !cached ) {

                    // Generate a function of recursive functions that can be used to check each element
                    if ( !match ) {
                        match = tokenize( selector );
                    }
                    i = match.length;
                    while ( i-- ) {
                        cached = matcherFromTokens( match[ i ] );
                        if ( cached[ expando ] ) {
                            setMatchers.push( cached );
                        } else {
                            elementMatchers.push( cached );
                        }
                    }

                    // Cache the compiled function
                    cached = compilerCache(
                        selector,
                        matcherFromGroupMatchers( elementMatchers, setMatchers )
                    );

                    // Save selector and tokenization
                    cached.selector = selector;
                }
                return cached;
            };

            /**
             * A low-level selection function that works with Sizzle's compiled
             *  selector functions
             * @param {String|Function} selector A selector or a pre-compiled
             *  selector function built with Sizzle.compile
             * @param {Element} context
             * @param {Array} [results]
             * @param {Array} [seed] A set of elements to match against
             */
            select = Sizzle.select = function( selector, context, results, seed ) {
                var i, tokens, token, type, find,
                    compiled = typeof selector === "function" && selector,
                    match = !seed && tokenize( ( selector = compiled.selector || selector ) );

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if ( match.length === 1 ) {

                    // Reduce context if the leading compound selector is an ID
                    tokens = match[ 0 ] = match[ 0 ].slice( 0 );
                    if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
                        context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

                        context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
                            .replace( runescape, funescape ), context ) || [] )[ 0 ];
                        if ( !context ) {
                            return results;

                            // Precompiled matchers will still verify ancestry, so step up a level
                        } else if ( compiled ) {
                            context = context.parentNode;
                        }

                        selector = selector.slice( tokens.shift().value.length );
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
                    while ( i-- ) {
                        token = tokens[ i ];

                        // Abort if we hit a combinator
                        if ( Expr.relative[ ( type = token.type ) ] ) {
                            break;
                        }
                        if ( ( find = Expr.find[ type ] ) ) {

                            // Search, expanding context for leading sibling combinators
                            if ( ( seed = find(
                                token.matches[ 0 ].replace( runescape, funescape ),
                                rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
                                context
                            ) ) ) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice( i, 1 );
                                selector = seed.length && toSelector( tokens );
                                if ( !selector ) {
                                    push.apply( results, seed );
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                ( compiled || compile( selector, match ) )(
                    seed,
                    context,
                    !documentIsHTML,
                    results,
                    !context || rsibling.test( selector ) && testContext( context.parentNode ) || context
                );
                return results;
            };

// One-time assignments

// Sort stability
            support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
            support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
            setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
            support.sortDetached = assert( function( el ) {

                // Should return 1, but returns 4 (following)
                return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
            } );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
            if ( !assert( function( el ) {
                el.innerHTML = "<a href='#'></a>";
                return el.firstChild.getAttribute( "href" ) === "#";
            } ) ) {
                addHandle( "type|href|height|width", function( elem, name, isXML ) {
                    if ( !isXML ) {
                        return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
                    }
                } );
            }

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
            if ( !support.attributes || !assert( function( el ) {
                el.innerHTML = "<input/>";
                el.firstChild.setAttribute( "value", "" );
                return el.firstChild.getAttribute( "value" ) === "";
            } ) ) {
                addHandle( "value", function( elem, _name, isXML ) {
                    if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
                        return elem.defaultValue;
                    }
                } );
            }

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
            if ( !assert( function( el ) {
                return el.getAttribute( "disabled" ) == null;
            } ) ) {
                addHandle( booleans, function( elem, name, isXML ) {
                    var val;
                    if ( !isXML ) {
                        return elem[ name ] === true ? name.toLowerCase() :
                            ( val = elem.getAttributeNode( name ) ) && val.specified ?
                                val.value :
                                null;
                    }
                } );
            }

            return Sizzle;

        } )( window );



    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;

// Deprecated
    jQuery.expr[ ":" ] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;




    var dir = function( elem, dir, until ) {
        var matched = [],
            truncate = until !== undefined;

        while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
            if ( elem.nodeType === 1 ) {
                if ( truncate && jQuery( elem ).is( until ) ) {
                    break;
                }
                matched.push( elem );
            }
        }
        return matched;
    };


    var siblings = function( n, elem ) {
        var matched = [];

        for ( ; n; n = n.nextSibling ) {
            if ( n.nodeType === 1 && n !== elem ) {
                matched.push( n );
            }
        }

        return matched;
    };


    var rneedsContext = jQuery.expr.match.needsContext;



    function nodeName( elem, name ) {

        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

    }
    var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
    function winnow( elements, qualifier, not ) {
        if ( isFunction( qualifier ) ) {
            return jQuery.grep( elements, function( elem, i ) {
                return !!qualifier.call( elem, i, elem ) !== not;
            } );
        }

        // Single element
        if ( qualifier.nodeType ) {
            return jQuery.grep( elements, function( elem ) {
                return ( elem === qualifier ) !== not;
            } );
        }

        // Arraylike of elements (jQuery, arguments, Array)
        if ( typeof qualifier !== "string" ) {
            return jQuery.grep( elements, function( elem ) {
                return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
            } );
        }

        // Filtered directly for both simple and complex selectors
        return jQuery.filter( qualifier, elements, not );
    }

    jQuery.filter = function( expr, elems, not ) {
        var elem = elems[ 0 ];

        if ( not ) {
            expr = ":not(" + expr + ")";
        }

        if ( elems.length === 1 && elem.nodeType === 1 ) {
            return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
        }

        return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
            return elem.nodeType === 1;
        } ) );
    };

    jQuery.fn.extend( {
        find: function( selector ) {
            var i, ret,
                len = this.length,
                self = this;

            if ( typeof selector !== "string" ) {
                return this.pushStack( jQuery( selector ).filter( function() {
                    for ( i = 0; i < len; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                } ) );
            }

            ret = this.pushStack( [] );

            for ( i = 0; i < len; i++ ) {
                jQuery.find( selector, self[ i ], ret );
            }

            return len > 1 ? jQuery.uniqueSort( ret ) : ret;
        },
        filter: function( selector ) {
            return this.pushStack( winnow( this, selector || [], false ) );
        },
        not: function( selector ) {
            return this.pushStack( winnow( this, selector || [], true ) );
        },
        is: function( selector ) {
            return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test( selector ) ?
                    jQuery( selector ) :
                    selector || [],
                false
            ).length;
        }
    } );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
    var rootjQuery,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
        // Strict HTML recognition (trac-11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

        init = jQuery.fn.init = function( selector, context, root ) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }

            // Method init() accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;

            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector[ 0 ] === "<" &&
                    selector[ selector.length - 1 ] === ">" &&
                    selector.length >= 3 ) {

                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];

                } else {
                    match = rquickExpr.exec( selector );
                }

                // Match html or make sure no context is specified for #id
                if ( match && ( match[ 1 ] || !context ) ) {

                    // HANDLE: $(html) -> $(array)
                    if ( match[ 1 ] ) {
                        context = context instanceof jQuery ? context[ 0 ] : context;

                        // Option to run scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge( this, jQuery.parseHTML(
                            match[ 1 ],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ) );

                        // HANDLE: $(html, props)
                        if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
                            for ( match in context ) {

                                // Properties of context are called as methods if possible
                                if ( isFunction( this[ match ] ) ) {
                                    this[ match ]( context[ match ] );

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr( match, context[ match ] );
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[ 2 ] );

                        if ( elem ) {

                            // Inject the element directly into the jQuery object
                            this[ 0 ] = elem;
                            this.length = 1;
                        }
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || root ).find( selector );

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }

                // HANDLE: $(DOMElement)
            } else if ( selector.nodeType ) {
                this[ 0 ] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if ( isFunction( selector ) ) {
                return root.ready !== undefined ?
                    root.ready( selector ) :

                    // Execute immediately if ready is not present
                    selector( jQuery );
            }

            return jQuery.makeArray( selector, this );
        };

// Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

// Initialize central reference
    rootjQuery = jQuery( document );


    var rparentsprev = /^(?:parents|prev(?:Until|All))/,

        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend( {
        has: function( target ) {
            var targets = jQuery( target, this ),
                l = targets.length;

            return this.filter( function() {
                var i = 0;
                for ( ; i < l; i++ ) {
                    if ( jQuery.contains( this, targets[ i ] ) ) {
                        return true;
                    }
                }
            } );
        },

        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery( selectors );

            // Positional selectors never match, since there's no _selection_ context
            if ( !rneedsContext.test( selectors ) ) {
                for ( ; i < l; i++ ) {
                    for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

                        // Always skip document fragments
                        if ( cur.nodeType < 11 && ( targets ?
                            targets.index( cur ) > -1 :

                            // Don't pass non-elements to Sizzle
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector( cur, selectors ) ) ) {

                            matched.push( cur );
                            break;
                        }
                    }
                }
            }

            return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
        },

        // Determine the position of an element within the set
        index: function( elem ) {

            // No argument, return index in parent
            if ( !elem ) {
                return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
            }

            // Index in selector
            if ( typeof elem === "string" ) {
                return indexOf.call( jQuery( elem ), this[ 0 ] );
            }

            // Locate the position of the desired element
            return indexOf.call( this,

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[ 0 ] : elem
            );
        },

        add: function( selector, context ) {
            return this.pushStack(
                jQuery.uniqueSort(
                    jQuery.merge( this.get(), jQuery( selector, context ) )
                )
            );
        },

        addBack: function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter( selector )
            );
        }
    } );

    function sibling( cur, dir ) {
        while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
        return cur;
    }

    jQuery.each( {
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, _i, until ) {
            return dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, _i, until ) {
            return dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, _i, until ) {
            return dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return siblings( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return siblings( elem.firstChild );
        },
        contents: function( elem ) {
            if ( elem.contentDocument != null &&

                // Support: IE 11+
                // <object> elements with no `data` attribute has an object
                // `contentDocument` with a `null` prototype.
                getProto( elem.contentDocument ) ) {

                return elem.contentDocument;
            }

            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if ( nodeName( elem, "template" ) ) {
                elem = elem.content || elem;
            }

            return jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var matched = jQuery.map( this, fn, until );

            if ( name.slice( -5 ) !== "Until" ) {
                selector = until;
            }

            if ( selector && typeof selector === "string" ) {
                matched = jQuery.filter( selector, matched );
            }

            if ( this.length > 1 ) {

                // Remove duplicates
                if ( !guaranteedUnique[ name ] ) {
                    jQuery.uniqueSort( matched );
                }

                // Reverse order for parents* and prev-derivatives
                if ( rparentsprev.test( name ) ) {
                    matched.reverse();
                }
            }

            return this.pushStack( matched );
        };
    } );
    var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
    function createOptions( options ) {
        var object = {};
        jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
            object[ flag ] = true;
        } );
        return object;
    }

    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
    jQuery.Callbacks = function( options ) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            createOptions( options ) :
            jQuery.extend( {}, options );

        var // Flag to know if list is currently firing
            firing,

            // Last fire value for non-forgettable lists
            memory,

            // Flag to know if list was already fired
            fired,

            // Flag to prevent firing
            locked,

            // Actual callback list
            list = [],

            // Queue of execution data for repeatable lists
            queue = [],

            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,

            // Fire callbacks
            fire = function() {

                // Enforce single-firing
                locked = locked || options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for ( ; queue.length; firingIndex = -1 ) {
                    memory = queue.shift();
                    while ( ++firingIndex < list.length ) {

                        // Run callback and check for early termination
                        if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
                            options.stopOnFalse ) {

                            // Jump to end and forget the data so .add doesn't re-fire
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }

                // Forget the data if we're done with it
                if ( !options.memory ) {
                    memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if ( locked ) {

                    // Keep an empty list if we have data for future add calls
                    if ( memory ) {
                        list = [];

                        // Otherwise, this object is spent
                    } else {
                        list = "";
                    }
                }
            },

            // Actual Callbacks object
            self = {

                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {

                        // If we have memory from a past run, we should fire after adding
                        if ( memory && !firing ) {
                            firingIndex = list.length - 1;
                            queue.push( memory );
                        }

                        ( function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                if ( isFunction( arg ) ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && toType( arg ) !== "string" ) {

                                    // Inspect recursively
                                    add( arg );
                                }
                            } );
                        } )( arguments );

                        if ( memory && !firing ) {
                            fire();
                        }
                    }
                    return this;
                },

                // Remove a callback from the list
                remove: function() {
                    jQuery.each( arguments, function( _, arg ) {
                        var index;
                        while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                            list.splice( index, 1 );

                            // Handle firing indexes
                            if ( index <= firingIndex ) {
                                firingIndex--;
                            }
                        }
                    } );
                    return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function( fn ) {
                    return fn ?
                        jQuery.inArray( fn, list ) > -1 :
                        list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function() {
                    if ( list ) {
                        list = [];
                    }
                    return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function() {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function() {
                    return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function() {
                    locked = queue = [];
                    if ( !memory && !firing ) {
                        list = memory = "";
                    }
                    return this;
                },
                locked: function() {
                    return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    if ( !locked ) {
                        args = args || [];
                        args = [ context, args.slice ? args.slice() : args ];
                        queue.push( args );
                        if ( !firing ) {
                            fire();
                        }
                    }
                    return this;
                },

                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };


    function Identity( v ) {
        return v;
    }
    function Thrower( ex ) {
        throw ex;
    }

    function adoptValue( value, resolve, reject, noValue ) {
        var method;

        try {

            // Check for promise aspect first to privilege synchronous behavior
            if ( value && isFunction( ( method = value.promise ) ) ) {
                method.call( value ).done( resolve ).fail( reject );

                // Other thenables
            } else if ( value && isFunction( ( method = value.then ) ) ) {
                method.call( value, resolve, reject );

                // Other non-thenables
            } else {

                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                // * false: [ value ].slice( 0 ) => resolve( value )
                // * true: [ value ].slice( 1 ) => resolve()
                resolve.apply( undefined, [ value ].slice( noValue ) );
            }

            // For Promises/A+, convert exceptions into rejections
            // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
            // Deferred#then to conditionally suppress rejection.
        } catch ( value ) {

            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply( undefined, [ value ] );
        }
    }

    jQuery.extend( {

        Deferred: function( func ) {
            var tuples = [

                    // action, add listener, callbacks,
                    // ... .then handlers, argument index, [final state]
                    [ "notify", "progress", jQuery.Callbacks( "memory" ),
                        jQuery.Callbacks( "memory" ), 2 ],
                    [ "resolve", "done", jQuery.Callbacks( "once memory" ),
                        jQuery.Callbacks( "once memory" ), 0, "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks( "once memory" ),
                        jQuery.Callbacks( "once memory" ), 1, "rejected" ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    "catch": function( fn ) {
                        return promise.then( null, fn );
                    },

                    // Keep pipe for back-compat
                    pipe: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;

                        return jQuery.Deferred( function( newDefer ) {
                            jQuery.each( tuples, function( _i, tuple ) {

                                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

                                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                deferred[ tuple[ 1 ] ]( function() {
                                    var returned = fn && fn.apply( this, arguments );
                                    if ( returned && isFunction( returned.promise ) ) {
                                        returned.promise()
                                            .progress( newDefer.notify )
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject );
                                    } else {
                                        newDefer[ tuple[ 0 ] + "With" ](
                                            this,
                                            fn ? [ returned ] : arguments
                                        );
                                    }
                                } );
                            } );
                            fns = null;
                        } ).promise();
                    },
                    then: function( onFulfilled, onRejected, onProgress ) {
                        var maxDepth = 0;
                        function resolve( depth, deferred, handler, special ) {
                            return function() {
                                var that = this,
                                    args = arguments,
                                    mightThrow = function() {
                                        var returned, then;

                                        // Support: Promises/A+ section 2.3.3.3.3
                                        // https://promisesaplus.com/#point-59
                                        // Ignore double-resolution attempts
                                        if ( depth < maxDepth ) {
                                            return;
                                        }

                                        returned = handler.apply( that, args );

                                        // Support: Promises/A+ section 2.3.1
                                        // https://promisesaplus.com/#point-48
                                        if ( returned === deferred.promise() ) {
                                            throw new TypeError( "Thenable self-resolution" );
                                        }

                                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                                        // https://promisesaplus.com/#point-54
                                        // https://promisesaplus.com/#point-75
                                        // Retrieve `then` only once
                                        then = returned &&

                                            // Support: Promises/A+ section 2.3.4
                                            // https://promisesaplus.com/#point-64
                                            // Only check objects and functions for thenability
                                            ( typeof returned === "object" ||
                                                typeof returned === "function" ) &&
                                            returned.then;

                                        // Handle a returned thenable
                                        if ( isFunction( then ) ) {

                                            // Special processors (notify) just wait for resolution
                                            if ( special ) {
                                                then.call(
                                                    returned,
                                                    resolve( maxDepth, deferred, Identity, special ),
                                                    resolve( maxDepth, deferred, Thrower, special )
                                                );

                                                // Normal processors (resolve) also hook into progress
                                            } else {

                                                // ...and disregard older resolution values
                                                maxDepth++;

                                                then.call(
                                                    returned,
                                                    resolve( maxDepth, deferred, Identity, special ),
                                                    resolve( maxDepth, deferred, Thrower, special ),
                                                    resolve( maxDepth, deferred, Identity,
                                                        deferred.notifyWith )
                                                );
                                            }

                                            // Handle all other returned values
                                        } else {

                                            // Only substitute handlers pass on context
                                            // and multiple values (non-spec behavior)
                                            if ( handler !== Identity ) {
                                                that = undefined;
                                                args = [ returned ];
                                            }

                                            // Process the value(s)
                                            // Default process is resolve
                                            ( special || deferred.resolveWith )( that, args );
                                        }
                                    },

                                    // Only normal processors (resolve) catch and reject exceptions
                                    process = special ?
                                        mightThrow :
                                        function() {
                                            try {
                                                mightThrow();
                                            } catch ( e ) {

                                                if ( jQuery.Deferred.exceptionHook ) {
                                                    jQuery.Deferred.exceptionHook( e,
                                                        process.stackTrace );
                                                }

                                                // Support: Promises/A+ section 2.3.3.3.4.1
                                                // https://promisesaplus.com/#point-61
                                                // Ignore post-resolution exceptions
                                                if ( depth + 1 >= maxDepth ) {

                                                    // Only substitute handlers pass on context
                                                    // and multiple values (non-spec behavior)
                                                    if ( handler !== Thrower ) {
                                                        that = undefined;
                                                        args = [ e ];
                                                    }

                                                    deferred.rejectWith( that, args );
                                                }
                                            }
                                        };

                                // Support: Promises/A+ section 2.3.3.3.1
                                // https://promisesaplus.com/#point-57
                                // Re-resolve promises immediately to dodge false rejection from
                                // subsequent errors
                                if ( depth ) {
                                    process();
                                } else {

                                    // Call an optional hook to record the stack, in case of exception
                                    // since it's otherwise lost when execution goes async
                                    if ( jQuery.Deferred.getStackHook ) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout( process );
                                }
                            };
                        }

                        return jQuery.Deferred( function( newDefer ) {

                            // progress_handlers.add( ... )
                            tuples[ 0 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onProgress ) ?
                                        onProgress :
                                        Identity,
                                    newDefer.notifyWith
                                )
                            );

                            // fulfilled_handlers.add( ... )
                            tuples[ 1 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onFulfilled ) ?
                                        onFulfilled :
                                        Identity
                                )
                            );

                            // rejected_handlers.add( ... )
                            tuples[ 2 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onRejected ) ?
                                        onRejected :
                                        Thrower
                                )
                            );
                        } ).promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return obj != null ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};

            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 5 ];

                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[ tuple[ 1 ] ] = list.add;

                // Handle state
                if ( stateString ) {
                    list.add(
                        function() {

                            // state = "resolved" (i.e., fulfilled)
                            // state = "rejected"
                            state = stateString;
                        },

                        // rejected_callbacks.disable
                        // fulfilled_callbacks.disable
                        tuples[ 3 - i ][ 2 ].disable,

                        // rejected_handlers.disable
                        // fulfilled_handlers.disable
                        tuples[ 3 - i ][ 3 ].disable,

                        // progress_callbacks.lock
                        tuples[ 0 ][ 2 ].lock,

                        // progress_handlers.lock
                        tuples[ 0 ][ 3 ].lock
                    );
                }

                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add( tuple[ 3 ].fire );

                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[ tuple[ 0 ] ] = function() {
                    deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
                    return this;
                };

                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
            } );

            // Make the deferred a promise
            promise.promise( deferred );

            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function( singleValue ) {
            var

                // count of uncompleted subordinates
                remaining = arguments.length,

                // count of unprocessed arguments
                i = remaining,

                // subordinate fulfillment data
                resolveContexts = Array( i ),
                resolveValues = slice.call( arguments ),

                // the primary Deferred
                primary = jQuery.Deferred(),

                // subordinate callback factory
                updateFunc = function( i ) {
                    return function( value ) {
                        resolveContexts[ i ] = this;
                        resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                        if ( !( --remaining ) ) {
                            primary.resolveWith( resolveContexts, resolveValues );
                        }
                    };
                };

            // Single- and empty arguments are adopted like Promise.resolve
            if ( remaining <= 1 ) {
                adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
                    !remaining );

                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if ( primary.state() === "pending" ||
                    isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

                    return primary.then();
                }
            }

            // Multiple arguments are aggregated like Promise.all array elements
            while ( i-- ) {
                adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
            }

            return primary.promise();
        }
    } );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

    jQuery.Deferred.exceptionHook = function( error, stack ) {

        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
            window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
        }
    };




    jQuery.readyException = function( error ) {
        window.setTimeout( function() {
            throw error;
        } );
    };




// The deferred used on DOM ready
    var readyList = jQuery.Deferred();

    jQuery.fn.ready = function( fn ) {

        readyList
            .then( fn )

            // Wrap jQuery.readyException in a function so that the lookup
            // happens at the time of error handling instead of callback
            // registration.
            .catch( function( error ) {
                jQuery.readyException( error );
            } );

        return this;
    };

    jQuery.extend( {

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See trac-6781
        readyWait: 1,

        // Handle when the DOM is ready
        ready: function( wait ) {

            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );
        }
    } );

    jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
    function completed() {
        document.removeEventListener( "DOMContentLoaded", completed );
        window.removeEventListener( "load", completed );
        jQuery.ready();
    }

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
    if ( document.readyState === "complete" ||
        ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout( jQuery.ready );

    } else {

        // Use the handy event callback
        document.addEventListener( "DOMContentLoaded", completed );

        // A fallback to window.onload, that will always work
        window.addEventListener( "load", completed );
    }




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
    var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
        var i = 0,
            len = elems.length,
            bulk = key == null;

        // Sets many values
        if ( toType( key ) === "object" ) {
            chainable = true;
            for ( i in key ) {
                access( elems, fn, i, key[ i ], true, emptyGet, raw );
            }

            // Sets one value
        } else if ( value !== undefined ) {
            chainable = true;

            if ( !isFunction( value ) ) {
                raw = true;
            }

            if ( bulk ) {

                // Bulk operations run against the entire set
                if ( raw ) {
                    fn.call( elems, value );
                    fn = null;

                    // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function( elem, _key, value ) {
                        return bulk.call( jQuery( elem ), value );
                    };
                }
            }

            if ( fn ) {
                for ( ; i < len; i++ ) {
                    fn(
                        elems[ i ], key, raw ?
                            value :
                            value.call( elems[ i ], i, fn( elems[ i ], key ) )
                    );
                }
            }
        }

        if ( chainable ) {
            return elems;
        }

        // Gets
        if ( bulk ) {
            return fn.call( elems );
        }

        return len ? fn( elems[ 0 ], key ) : emptyGet;
    };


// Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/,
        rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
    function fcamelCase( _all, letter ) {
        return letter.toUpperCase();
    }

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
    function camelCase( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    }
    var acceptData = function( owner ) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
    };




    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;

    Data.prototype = {

        cache: function( owner ) {

            // Check if the owner object already has a cache
            var value = owner[ this.expando ];

            // If not, create one
            if ( !value ) {
                value = {};

                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see trac-8335.
                // Always return an empty object.
                if ( acceptData( owner ) ) {

                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if ( owner.nodeType ) {
                        owner[ this.expando ] = value;

                        // Otherwise secure it in a non-enumerable property
                        // configurable must be true to allow the property to be
                        // deleted when data is removed
                    } else {
                        Object.defineProperty( owner, this.expando, {
                            value: value,
                            configurable: true
                        } );
                    }
                }
            }

            return value;
        },
        set: function( owner, data, value ) {
            var prop,
                cache = this.cache( owner );

            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if ( typeof data === "string" ) {
                cache[ camelCase( data ) ] = value;

                // Handle: [ owner, { properties } ] args
            } else {

                // Copy the properties one-by-one to the cache object
                for ( prop in data ) {
                    cache[ camelCase( prop ) ] = data[ prop ];
                }
            }
            return cache;
        },
        get: function( owner, key ) {
            return key === undefined ?
                this.cache( owner ) :

                // Always use camelCase key (gh-2257)
                owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
        },
        access: function( owner, key, value ) {

            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if ( key === undefined ||
                ( ( key && typeof key === "string" ) && value === undefined ) ) {

                return this.get( owner, key );
            }

            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set( owner, key, value );

            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function( owner, key ) {
            var i,
                cache = owner[ this.expando ];

            if ( cache === undefined ) {
                return;
            }

            if ( key !== undefined ) {

                // Support array or space separated string of keys
                if ( Array.isArray( key ) ) {

                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map( camelCase );
                } else {
                    key = camelCase( key );

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ?
                        [ key ] :
                        ( key.match( rnothtmlwhite ) || [] );
                }

                i = key.length;

                while ( i-- ) {
                    delete cache[ key[ i ] ];
                }
            }

            // Remove the expando if there's no more data
            if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if ( owner.nodeType ) {
                    owner[ this.expando ] = undefined;
                } else {
                    delete owner[ this.expando ];
                }
            }
        },
        hasData: function( owner ) {
            var cache = owner[ this.expando ];
            return cache !== undefined && !jQuery.isEmptyObject( cache );
        }
    };
    var dataPriv = new Data();

    var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;

    function getData( data ) {
        if ( data === "true" ) {
            return true;
        }

        if ( data === "false" ) {
            return false;
        }

        if ( data === "null" ) {
            return null;
        }

        // Only convert to a number if it doesn't change the string
        if ( data === +data + "" ) {
            return +data;
        }

        if ( rbrace.test( data ) ) {
            return JSON.parse( data );
        }

        return data;
    }

    function dataAttr( elem, key, data ) {
        var name;

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {
            name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
            data = elem.getAttribute( name );

            if ( typeof data === "string" ) {
                try {
                    data = getData( data );
                } catch ( e ) {}

                // Make sure we set the data so it isn't changed later
                dataUser.set( elem, key, data );
            } else {
                data = undefined;
            }
        }
        return data;
    }

    jQuery.extend( {
        hasData: function( elem ) {
            return dataUser.hasData( elem ) || dataPriv.hasData( elem );
        },

        data: function( elem, name, data ) {
            return dataUser.access( elem, name, data );
        },

        removeData: function( elem, name ) {
            dataUser.remove( elem, name );
        },

        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function( elem, name, data ) {
            return dataPriv.access( elem, name, data );
        },

        _removeData: function( elem, name ) {
            dataPriv.remove( elem, name );
        }
    } );

    jQuery.fn.extend( {
        data: function( key, value ) {
            var i, name, data,
                elem = this[ 0 ],
                attrs = elem && elem.attributes;

            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = dataUser.get( elem );

                    if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
                        i = attrs.length;
                        while ( i-- ) {

                            // Support: IE 11 only
                            // The attrs elements can be null (trac-14894)
                            if ( attrs[ i ] ) {
                                name = attrs[ i ].name;
                                if ( name.indexOf( "data-" ) === 0 ) {
                                    name = camelCase( name.slice( 5 ) );
                                    dataAttr( elem, name, data[ name ] );
                                }
                            }
                        }
                        dataPriv.set( elem, "hasDataAttrs", true );
                    }
                }

                return data;
            }

            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each( function() {
                    dataUser.set( this, key );
                } );
            }

            return access( this, function( value ) {
                var data;

                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if ( elem && value === undefined ) {

                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get( elem, key );
                    if ( data !== undefined ) {
                        return data;
                    }

                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr( elem, key );
                    if ( data !== undefined ) {
                        return data;
                    }

                    // We tried really hard, but the data doesn't exist.
                    return;
                }

                // Set the data...
                this.each( function() {

                    // We always store the camelCased key
                    dataUser.set( this, key, value );
                } );
            }, null, value, arguments.length > 1, null, true );
        },

        removeData: function( key ) {
            return this.each( function() {
                dataUser.remove( this, key );
            } );
        }
    } );


    jQuery.extend( {
        queue: function( elem, type, data ) {
            var queue;

            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = dataPriv.get( elem, type );

                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || Array.isArray( data ) ) {
                        queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },

        dequeue: function( elem, type ) {
            type = type || "fx";

            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }

            if ( fn ) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }

            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },

        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
                empty: jQuery.Callbacks( "once memory" ).add( function() {
                    dataPriv.remove( elem, [ type + "queue", key ] );
                } )
            } );
        }
    } );

    jQuery.fn.extend( {
        queue: function( type, data ) {
            var setter = 2;

            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }

            if ( arguments.length < setter ) {
                return jQuery.queue( this[ 0 ], type );
            }

            return data === undefined ?
                this :
                this.each( function() {
                    var queue = jQuery.queue( this, type, data );

                    // Ensure a hooks for this queue
                    jQuery._queueHooks( this, type );

                    if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                } );
        },
        dequeue: function( type ) {
            return this.each( function() {
                jQuery.dequeue( this, type );
            } );
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },

        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };

            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while ( i-- ) {
                tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    } );
    var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

    var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

    var documentElement = document.documentElement;



    var isAttached = function( elem ) {
            return jQuery.contains( elem.ownerDocument, elem );
        },
        composed = { composed: true };

    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    // Check attachment across shadow DOM boundaries when possible (gh-3504)
    // Support: iOS 10.0-10.2 only
    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    // leading to errors. We need to check for `getRootNode`.
    if ( documentElement.getRootNode ) {
        isAttached = function( elem ) {
            return jQuery.contains( elem.ownerDocument, elem ) ||
                elem.getRootNode( composed ) === elem.ownerDocument;
        };
    }
    var isHiddenWithinTree = function( elem, el ) {

        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;

        // Inline style trumps all
        return elem.style.display === "none" ||
            elem.style.display === "" &&

            // Otherwise, check computed style
            // Support: Firefox <=43 - 45
            // Disconnected elements can have computed display: none, so first confirm that elem is
            // in the document.
            isAttached( elem ) &&

            jQuery.css( elem, "display" ) === "none";
    };



    function adjustCSS( elem, prop, valueParts, tween ) {
        var adjusted, scale,
            maxIterations = 20,
            currentValue = tween ?
                function() {
                    return tween.cur();
                } :
                function() {
                    return jQuery.css( elem, prop, "" );
                },
            initial = currentValue(),
            unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

            // Starting value computation is required for potential unit mismatches
            initialInUnit = elem.nodeType &&
                ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
                rcssNum.exec( jQuery.css( elem, prop ) );

        if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;

            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[ 3 ];

            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;

            while ( maxIterations-- ) {

                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style( elem, prop, initialInUnit + unit );
                if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;

            }

            initialInUnit = initialInUnit * 2;
            jQuery.style( elem, prop, initialInUnit + unit );

            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }

        if ( valueParts ) {
            initialInUnit = +initialInUnit || +initial || 0;

            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[ 1 ] ?
                initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
                +valueParts[ 2 ];
            if ( tween ) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }


    var defaultDisplayMap = {};

    function getDefaultDisplay( elem ) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[ nodeName ];

        if ( display ) {
            return display;
        }

        temp = doc.body.appendChild( doc.createElement( nodeName ) );
        display = jQuery.css( temp, "display" );

        temp.parentNode.removeChild( temp );

        if ( display === "none" ) {
            display = "block";
        }
        defaultDisplayMap[ nodeName ] = display;

        return display;
    }

    function showHide( elements, show ) {
        var display, elem,
            values = [],
            index = 0,
            length = elements.length;

        // Determine new display value for elements that need to change
        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }

            display = elem.style.display;
            if ( show ) {

                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if ( display === "none" ) {
                    values[ index ] = dataPriv.get( elem, "display" ) || null;
                    if ( !values[ index ] ) {
                        elem.style.display = "";
                    }
                }
                if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
                    values[ index ] = getDefaultDisplay( elem );
                }
            } else {
                if ( display !== "none" ) {
                    values[ index ] = "none";

                    // Remember what we're overwriting
                    dataPriv.set( elem, "display", display );
                }
            }
        }

        // Set the display of the elements in a second loop to avoid constant reflow
        for ( index = 0; index < length; index++ ) {
            if ( values[ index ] != null ) {
                elements[ index ].style.display = values[ index ];
            }
        }

        return elements;
    }

    jQuery.fn.extend( {
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state ) {
            if ( typeof state === "boolean" ) {
                return state ? this.show() : this.hide();
            }

            return this.each( function() {
                if ( isHiddenWithinTree( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            } );
        }
    } );
    var rcheckableType = ( /^(?:checkbox|radio)$/i );

    var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

    var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



    ( function() {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild( document.createElement( "div" ) ),
            input = document.createElement( "input" );

        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (trac-11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (trac-14901)
        input.setAttribute( "type", "radio" );
        input.setAttribute( "checked", "checked" );
        input.setAttribute( "name", "t" );

        div.appendChild( input );

        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

        // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
    } )();


// We have to close these tags to support XHTML (trac-13200)
    var wrapMap = {

        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

        _default: [ 0, "", "" ]
    };

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

// Support: IE <=9 only
    if ( !support.option ) {
        wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
    }


    function getAll( context, tag ) {

        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
        var ret;

        if ( typeof context.getElementsByTagName !== "undefined" ) {
            ret = context.getElementsByTagName( tag || "*" );

        } else if ( typeof context.querySelectorAll !== "undefined" ) {
            ret = context.querySelectorAll( tag || "*" );

        } else {
            ret = [];
        }

        if ( tag === undefined || tag && nodeName( context, tag ) ) {
            return jQuery.merge( [ context ], ret );
        }

        return ret;
    }


// Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
        var i = 0,
            l = elems.length;

        for ( ; i < l; i++ ) {
            dataPriv.set(
                elems[ i ],
                "globalEval",
                !refElements || dataPriv.get( refElements[ i ], "globalEval" )
            );
        }
    }


    var rhtml = /<|&#?\w+;/;

    function buildFragment( elems, context, scripts, selection, ignored ) {
        var elem, tmp, tag, wrap, attached, j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for ( ; i < l; i++ ) {
            elem = elems[ i ];

            if ( elem || elem === 0 ) {

                // Add nodes directly
                if ( toType( elem ) === "object" ) {

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                    // Convert non-html into a text node
                } else if ( !rhtml.test( elem ) ) {
                    nodes.push( context.createTextNode( elem ) );

                    // Convert html into DOM nodes
                } else {
                    tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

                    // Deserialize a standard representation
                    tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
                    wrap = wrapMap[ tag ] || wrapMap._default;
                    tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

                    // Descend through wrappers to the right content
                    j = wrap[ 0 ];
                    while ( j-- ) {
                        tmp = tmp.lastChild;
                    }

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, tmp.childNodes );

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (trac-12392)
                    tmp.textContent = "";
                }
            }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ( ( elem = nodes[ i++ ] ) ) {

            // Skip elements already in the context collection (trac-4087)
            if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
                if ( ignored ) {
                    ignored.push( elem );
                }
                continue;
            }

            attached = isAttached( elem );

            // Append to fragment
            tmp = getAll( fragment.appendChild( elem ), "script" );

            // Preserve script evaluation history
            if ( attached ) {
                setGlobalEval( tmp );
            }

            // Capture executables
            if ( scripts ) {
                j = 0;
                while ( ( elem = tmp[ j++ ] ) ) {
                    if ( rscriptType.test( elem.type || "" ) ) {
                        scripts.push( elem );
                    }
                }
            }
        }

        return fragment;
    }


    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
    function expectSync( elem, type ) {
        return ( elem === safeActiveElement() ) === ( type === "focus" );
    }

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch ( err ) { }
    }

    function on( elem, types, selector, data, fn, one ) {
        var origFn, type;

        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {

            // ( types-Object, selector, data )
            if ( typeof selector !== "string" ) {

                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for ( type in types ) {
                on( elem, type, selector, data, types[ type ], one );
            }
            return elem;
        }

        if ( data == null && fn == null ) {

            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if ( fn == null ) {
            if ( typeof selector === "string" ) {

                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {

                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if ( fn === false ) {
            fn = returnFalse;
        } else if ( !fn ) {
            return elem;
        }

        if ( one === 1 ) {
            origFn = fn;
            fn = function( event ) {

                // Can use an empty set, since event contains the info
                jQuery().off( event );
                return origFn.apply( this, arguments );
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return elem.each( function() {
            jQuery.event.add( this, types, fn, data, selector );
        } );
    }

    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
    jQuery.event = {

        global: {},

        add: function( elem, types, handler, data, selector ) {

            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.get( elem );

            // Only attach events to objects that accept data
            if ( !acceptData( elem ) ) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if ( selector ) {
                jQuery.find.matchesSelector( documentElement, selector );
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if ( !( events = elemData.events ) ) {
                events = elemData.events = Object.create( null );
            }
            if ( !( eventHandle = elemData.handle ) ) {
                eventHandle = elemData.handle = function( e ) {

                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                        jQuery.event.dispatch.apply( elem, arguments ) : undefined;
                };
            }

            // Handle multiple events separated by a space
            types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[ t ] ) || [];
                type = origType = tmp[ 1 ];
                namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

                // There *must* be a type, no attaching namespace-only handlers
                if ( !type ) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend( {
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                    namespace: namespaces.join( "." )
                }, handleObjIn );

                // Init the event handler queue if we're the first
                if ( !( handlers = events[ type ] ) ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if ( !special.setup ||
                        special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle );
                        }
                    }
                }

                if ( special.add ) {
                    special.add.call( elem, handleObj );

                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }

        },

        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {

            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

            if ( !elemData || !( events = elemData.events ) ) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[ t ] ) || [];
                type = origType = tmp[ 1 ];
                namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }

                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                handlers = events[ type ] || [];
                tmp = tmp[ 2 ] &&
                    new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

                // Remove matching events
                origCount = j = handlers.length;
                while ( j-- ) {
                    handleObj = handlers[ j ];

                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !tmp || tmp.test( handleObj.namespace ) ) &&
                        ( !selector || selector === handleObj.selector ||
                            selector === "**" && handleObj.selector ) ) {
                        handlers.splice( j, 1 );

                        if ( handleObj.selector ) {
                            handlers.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( origCount && !handlers.length ) {
                    if ( !special.teardown ||
                        special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

                        jQuery.removeEvent( elem, type, elemData.handle );
                    }

                    delete events[ type ];
                }
            }

            // Remove data and the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                dataPriv.remove( elem, "handle events" );
            }
        },

        dispatch: function( nativeEvent ) {

            var i, j, ret, matched, handleObj, handlerQueue,
                args = new Array( arguments.length ),

                // Make a writable jQuery.Event from the native event object
                event = jQuery.event.fix( nativeEvent ),

                handlers = (
                    dataPriv.get( this, "events" ) || Object.create( null )
                )[ event.type ] || [],
                special = jQuery.event.special[ event.type ] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[ 0 ] = event;

            for ( i = 1; i < arguments.length; i++ ) {
                args[ i ] = arguments[ i ];
            }

            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call( this, event, handlers );

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
                event.currentTarget = matched.elem;

                j = 0;
                while ( ( handleObj = matched.handlers[ j++ ] ) &&
                !event.isImmediatePropagationStopped() ) {

                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if ( !event.rnamespace || handleObj.namespace === false ||
                        event.rnamespace.test( handleObj.namespace ) ) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
                            handleObj.handler ).apply( matched.elem, args );

                        if ( ret !== undefined ) {
                            if ( ( event.result = ret ) === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }

            return event.result;
        },

        handlers: function( event, handlers ) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Find delegate handlers
            if ( delegateCount &&

                // Support: IE <=9
                // Black-hole SVG <use> instance trees (trac-13180)
                cur.nodeType &&

                // Support: Firefox <=42
                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                // Support: IE 11 only
                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                !( event.type === "click" && event.button >= 1 ) ) {

                for ( ; cur !== this; cur = cur.parentNode || this ) {

                    // Don't check non-elements (trac-13208)
                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                    if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];

                            // Don't conflict with Object.prototype properties (trac-13203)
                            sel = handleObj.selector + " ";

                            if ( matchedSelectors[ sel ] === undefined ) {
                                matchedSelectors[ sel ] = handleObj.needsContext ?
                                    jQuery( sel, this ).index( cur ) > -1 :
                                    jQuery.find( sel, this, null, [ cur ] ).length;
                            }
                            if ( matchedSelectors[ sel ] ) {
                                matchedHandlers.push( handleObj );
                            }
                        }
                        if ( matchedHandlers.length ) {
                            handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            cur = this;
            if ( delegateCount < handlers.length ) {
                handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
            }

            return handlerQueue;
        },

        addProp: function( name, hook ) {
            Object.defineProperty( jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: isFunction( hook ) ?
                    function() {
                        if ( this.originalEvent ) {
                            return hook( this.originalEvent );
                        }
                    } :
                    function() {
                        if ( this.originalEvent ) {
                            return this.originalEvent[ name ];
                        }
                    },

                set: function( value ) {
                    Object.defineProperty( this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    } );
                }
            } );
        },

        fix: function( originalEvent ) {
            return originalEvent[ jQuery.expando ] ?
                originalEvent :
                new jQuery.Event( originalEvent );
        },

        special: {
            load: {

                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {

                // Utilize native event to ensure correct state for checkable inputs
                setup: function( data ) {

                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Claim the first handler
                    if ( rcheckableType.test( el.type ) &&
                        el.click && nodeName( el, "input" ) ) {

                        // dataPriv.set( el, "click", ... )
                        leverageNative( el, "click", returnTrue );
                    }

                    // Return false to allow normal processing in the caller
                    return false;
                },
                trigger: function( data ) {

                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Force setup before triggering a click
                    if ( rcheckableType.test( el.type ) &&
                        el.click && nodeName( el, "input" ) ) {

                        leverageNative( el, "click" );
                    }

                    // Return non-false to allow normal event-path propagation
                    return true;
                },

                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function( event ) {
                    var target = event.target;
                    return rcheckableType.test( target.type ) &&
                        target.click && nodeName( target, "input" ) &&
                        dataPriv.get( target, "click" ) ||
                        nodeName( target, "a" );
                }
            },

            beforeunload: {
                postDispatch: function( event ) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if ( event.result !== undefined && event.originalEvent ) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
    function leverageNative( el, type, expectSync ) {

        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if ( !expectSync ) {
            if ( dataPriv.get( el, type ) === undefined ) {
                jQuery.event.add( el, type, returnTrue );
            }
            return;
        }

        // Register the controller as a special universal handler for all event namespaces
        dataPriv.set( el, type, false );
        jQuery.event.add( el, type, {
            namespace: false,
            handler: function( event ) {
                var notAsync, result,
                    saved = dataPriv.get( this, type );

                if ( ( event.isTrigger & 1 ) && this[ type ] ) {

                    // Interrupt processing of the outer synthetic .trigger()ed event
                    // Saved data should be false in such cases, but might be a leftover capture object
                    // from an async native handler (gh-4350)
                    if ( !saved.length ) {

                        // Store arguments for use when handling the inner native event
                        // There will always be at least one argument (an event object), so this array
                        // will not be confused with a leftover capture object.
                        saved = slice.call( arguments );
                        dataPriv.set( this, type, saved );

                        // Trigger the native event and capture its result
                        // Support: IE <=9 - 11+
                        // focus() and blur() are asynchronous
                        notAsync = expectSync( this, type );
                        this[ type ]();
                        result = dataPriv.get( this, type );
                        if ( saved !== result || notAsync ) {
                            dataPriv.set( this, type, false );
                        } else {
                            result = {};
                        }
                        if ( saved !== result ) {

                            // Cancel the outer synthetic event
                            event.stopImmediatePropagation();
                            event.preventDefault();

                            // Support: Chrome 86+
                            // In Chrome, if an element having a focusout handler is blurred by
                            // clicking outside of it, it invokes the handler synchronously. If
                            // that handler calls `.remove()` on the element, the data is cleared,
                            // leaving `result` undefined. We need to guard against this.
                            return result && result.value;
                        }

                        // If this is an inner synthetic event for an event with a bubbling surrogate
                        // (focus or blur), assume that the surrogate already propagated from triggering the
                        // native event and prevent that from happening again here.
                        // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                        // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                        // less bad than duplication.
                    } else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
                        event.stopPropagation();
                    }

                    // If this is a native event triggered above, everything is now in order
                    // Fire an inner synthetic event with the original arguments
                } else if ( saved.length ) {

                    // ...and capture the result
                    dataPriv.set( this, type, {
                        value: jQuery.event.trigger(

                            // Support: IE <=9 - 11+
                            // Extend with the prototype to reset the above stopImmediatePropagation()
                            jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
                            saved.slice( 1 ),
                            this
                        )
                    } );

                    // Abort handling of the native event
                    event.stopImmediatePropagation();
                }
            }
        } );
    }

    jQuery.removeEvent = function( elem, type, handle ) {

        // This "if" is needed for plain objects
        if ( elem.removeEventListener ) {
            elem.removeEventListener( type, handle );
        }
    };

    jQuery.Event = function( src, props ) {

        // Allow instantiation without the 'new' keyword
        if ( !( this instanceof jQuery.Event ) ) {
            return new jQuery.Event( src, props );
        }

        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
            src.defaultPrevented === undefined &&

            // Support: Android <=2.3 only
            src.returnValue === false ?
                returnTrue :
                returnFalse;

            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (trac-504, trac-13143)
            this.target = ( src.target && src.target.nodeType === 3 ) ?
                src.target.parentNode :
                src.target;

            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();

        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;

            if ( e && !this.isSimulated ) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;

            if ( e && !this.isSimulated ) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;

            this.isImmediatePropagationStopped = returnTrue;

            if ( e && !this.isSimulated ) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

// Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each( {
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
    }, jQuery.event.addProp );

    jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
        jQuery.event.special[ type ] = {

            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {

                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative( this, type, expectSync );

                // Return false to allow normal processing in the caller
                return false;
            },
            trigger: function() {

                // Force setup before trigger
                leverageNative( this, type );

                // Return non-false to allow normal event-path propagation
                return true;
            },

            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function( event ) {
                return dataPriv.get( event.target, type );
            },

            delegateType: delegateType
        };
    } );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each( {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,

            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    } );

    jQuery.fn.extend( {

        on: function( types, selector, data, fn ) {
            return on( this, types, selector, data, fn );
        },
        one: function( types, selector, data, fn ) {
            return on( this, types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {

                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ?
                        handleObj.origType + "." + handleObj.namespace :
                        handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {

                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {

                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each( function() {
                jQuery.event.remove( this, types, fn, selector );
            } );
        }
    } );


    var

        // Support: IE <=10 - 11, Edge 12 - 13 only
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,

        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

        rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
    function manipulationTarget( elem, content ) {
        if ( nodeName( elem, "table" ) &&
            nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

            return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
        }

        return elem;
    }

// Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
        elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
        return elem;
    }
    function restoreScript( elem ) {
        if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
            elem.type = elem.type.slice( 5 );
        } else {
            elem.removeAttribute( "type" );
        }

        return elem;
    }

    function cloneCopyEvent( src, dest ) {
        var i, l, type, pdataOld, udataOld, udataCur, events;

        if ( dest.nodeType !== 1 ) {
            return;
        }

        // 1. Copy private data: events, handlers, etc.
        if ( dataPriv.hasData( src ) ) {
            pdataOld = dataPriv.get( src );
            events = pdataOld.events;

            if ( events ) {
                dataPriv.remove( dest, "handle events" );

                for ( type in events ) {
                    for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                        jQuery.event.add( dest, type, events[ type ][ i ] );
                    }
                }
            }
        }

        // 2. Copy user data
        if ( dataUser.hasData( src ) ) {
            udataOld = dataUser.access( src );
            udataCur = jQuery.extend( {}, udataOld );

            dataUser.set( dest, udataCur );
        }
    }

// Fix IE bugs, see support tests
    function fixInput( src, dest ) {
        var nodeName = dest.nodeName.toLowerCase();

        // Fails to persist the checked state of a cloned checkbox or radio button.
        if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
            dest.checked = src.checked;

            // Fails to return the selected option to the default selected state when cloning options
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
        }
    }

    function domManip( collection, args, callback, ignored ) {

        // Flatten any nested arrays
        args = flat( args );

        var fragment, first, scripts, hasScripts, node, doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[ 0 ],
            valueIsFunction = isFunction( value );

        // We can't cloneNode fragments that contain checked, in WebKit
        if ( valueIsFunction ||
            ( l > 1 && typeof value === "string" &&
                !support.checkClone && rchecked.test( value ) ) ) {
            return collection.each( function( index ) {
                var self = collection.eq( index );
                if ( valueIsFunction ) {
                    args[ 0 ] = value.call( this, index, self.html() );
                }
                domManip( self, args, callback, ignored );
            } );
        }

        if ( l ) {
            fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
            first = fragment.firstChild;

            if ( fragment.childNodes.length === 1 ) {
                fragment = first;
            }

            // Require either new content or an interest in ignored elements to invoke the callback
            if ( first || ignored ) {
                scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (trac-8070).
                for ( ; i < l; i++ ) {
                    node = fragment;

                    if ( i !== iNoClone ) {
                        node = jQuery.clone( node, true, true );

                        // Keep references to cloned scripts for later restoration
                        if ( hasScripts ) {

                            // Support: Android <=4.0 only, PhantomJS 1 only
                            // push.apply(_, arraylike) throws on ancient WebKit
                            jQuery.merge( scripts, getAll( node, "script" ) );
                        }
                    }

                    callback.call( collection[ i ], node, i );
                }

                if ( hasScripts ) {
                    doc = scripts[ scripts.length - 1 ].ownerDocument;

                    // Reenable scripts
                    jQuery.map( scripts, restoreScript );

                    // Evaluate executable scripts on first document insertion
                    for ( i = 0; i < hasScripts; i++ ) {
                        node = scripts[ i ];
                        if ( rscriptType.test( node.type || "" ) &&
                            !dataPriv.access( node, "globalEval" ) &&
                            jQuery.contains( doc, node ) ) {

                            if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

                                // Optional AJAX dependency, but won't run scripts if not present
                                if ( jQuery._evalUrl && !node.noModule ) {
                                    jQuery._evalUrl( node.src, {
                                        nonce: node.nonce || node.getAttribute( "nonce" )
                                    }, doc );
                                }
                            } else {

                                // Unwrap a CDATA section containing script contents. This shouldn't be
                                // needed as in XML documents they're already not visible when
                                // inspecting element contents and in HTML documents they have no
                                // meaning but we're preserving that logic for backwards compatibility.
                                // This will be removed completely in 4.0. See gh-4904.
                                DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
                            }
                        }
                    }
                }
            }
        }

        return collection;
    }

    function remove( elem, selector, keepData ) {
        var node,
            nodes = selector ? jQuery.filter( selector, elem ) : elem,
            i = 0;

        for ( ; ( node = nodes[ i ] ) != null; i++ ) {
            if ( !keepData && node.nodeType === 1 ) {
                jQuery.cleanData( getAll( node ) );
            }

            if ( node.parentNode ) {
                if ( keepData && isAttached( node ) ) {
                    setGlobalEval( getAll( node, "script" ) );
                }
                node.parentNode.removeChild( node );
            }
        }

        return elem;
    }

    jQuery.extend( {
        htmlPrefilter: function( html ) {
            return html;
        },

        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var i, l, srcElements, destElements,
                clone = elem.cloneNode( true ),
                inPage = isAttached( elem );

            // Fix IE cloning issues
            if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
                !jQuery.isXMLDoc( elem ) ) {

                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll( clone );
                srcElements = getAll( elem );

                for ( i = 0, l = srcElements.length; i < l; i++ ) {
                    fixInput( srcElements[ i ], destElements[ i ] );
                }
            }

            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                if ( deepDataAndEvents ) {
                    srcElements = srcElements || getAll( elem );
                    destElements = destElements || getAll( clone );

                    for ( i = 0, l = srcElements.length; i < l; i++ ) {
                        cloneCopyEvent( srcElements[ i ], destElements[ i ] );
                    }
                } else {
                    cloneCopyEvent( elem, clone );
                }
            }

            // Preserve script evaluation history
            destElements = getAll( clone, "script" );
            if ( destElements.length > 0 ) {
                setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
            }

            // Return the cloned set
            return clone;
        },

        cleanData: function( elems ) {
            var data, elem, type,
                special = jQuery.event.special,
                i = 0;

            for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
                if ( acceptData( elem ) ) {
                    if ( ( data = elem[ dataPriv.expando ] ) ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }

                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[ dataPriv.expando ] = undefined;
                    }
                    if ( elem[ dataUser.expando ] ) {

                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[ dataUser.expando ] = undefined;
                    }
                }
            }
        }
    } );

    jQuery.fn.extend( {
        detach: function( selector ) {
            return remove( this, selector, true );
        },

        remove: function( selector ) {
            return remove( this, selector );
        },

        text: function( value ) {
            return access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().each( function() {
                        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                            this.textContent = value;
                        }
                    } );
            }, null, value, arguments.length );
        },

        append: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.appendChild( elem );
                }
            } );
        },

        prepend: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.insertBefore( elem, target.firstChild );
                }
            } );
        },

        before: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this );
                }
            } );
        },

        after: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                }
            } );
        },

        empty: function() {
            var elem,
                i = 0;

            for ( ; ( elem = this[ i ] ) != null; i++ ) {
                if ( elem.nodeType === 1 ) {

                    // Prevent memory leaks
                    jQuery.cleanData( getAll( elem, false ) );

                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }

            return this;
        },

        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map( function() {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            } );
        },

        html: function( value ) {
            return access( this, function( value ) {
                var elem = this[ 0 ] || {},
                    i = 0,
                    l = this.length;

                if ( value === undefined && elem.nodeType === 1 ) {
                    return elem.innerHTML;
                }

                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

                    value = jQuery.htmlPrefilter( value );

                    try {
                        for ( ; i < l; i++ ) {
                            elem = this[ i ] || {};

                            // Remove element nodes and prevent memory leaks
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( getAll( elem, false ) );
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch ( e ) {}
                }

                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },

        replaceWith: function() {
            var ignored = [];

            // Make the changes, replacing each non-ignored context element with the new content
            return domManip( this, arguments, function( elem ) {
                var parent = this.parentNode;

                if ( jQuery.inArray( this, ignored ) < 0 ) {
                    jQuery.cleanData( getAll( this ) );
                    if ( parent ) {
                        parent.replaceChild( elem, this );
                    }
                }

                // Force callback invocation
            }, ignored );
        }
    } );

    jQuery.each( {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                ret = [],
                insert = jQuery( selector ),
                last = insert.length - 1,
                i = 0;

            for ( ; i <= last; i++ ) {
                elems = i === last ? this : this.clone( true );
                jQuery( insert[ i ] )[ original ]( elems );

                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push.apply( ret, elems.get() );
            }

            return this.pushStack( ret );
        };
    } );
    var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

    var rcustomProp = /^--/;


    var getStyles = function( elem ) {

        // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if ( !view || !view.opener ) {
            view = window;
        }

        return view.getComputedStyle( elem );
    };

    var swap = function( elem, options, callback ) {
        var ret, name,
            old = {};

        // Remember the old values, and insert the new ones
        for ( name in options ) {
            old[ name ] = elem.style[ name ];
            elem.style[ name ] = options[ name ];
        }

        ret = callback.call( elem );

        // Revert the old values
        for ( name in options ) {
            elem.style[ name ] = old[ name ];
        }

        return ret;
    };


    var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );

    var whitespace = "[\\x20\\t\\r\\n\\f]";


    var rtrimCSS = new RegExp(
        "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
        "g"
    );




    ( function() {

        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {

            // This is a singleton, we need to execute it only once
            if ( !div ) {
                return;
            }

            container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
                "margin-top:1px;padding:0;border:0";
            div.style.cssText =
                "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                "margin:auto;border:1px;padding:1px;" +
                "width:60%;top:1%";
            documentElement.appendChild( container ).appendChild( div );

            var divStyle = window.getComputedStyle( div );
            pixelPositionVal = divStyle.top !== "1%";

            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

            documentElement.removeChild( container );

            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }

        function roundPixelMeasures( measure ) {
            return Math.round( parseFloat( measure ) );
        }

        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
            reliableTrDimensionsVal, reliableMarginLeftVal,
            container = document.createElement( "div" ),
            div = document.createElement( "div" );

        // Finish early in limited (non-browser) environments
        if ( !div.style ) {
            return;
        }

        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (trac-8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode( true ).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        jQuery.extend( support, {
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
            },

            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
                var table, tr, trChild, trStyle;
                if ( reliableTrDimensionsVal == null ) {
                    table = document.createElement( "table" );
                    tr = document.createElement( "tr" );
                    trChild = document.createElement( "div" );

                    table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText = "border:1px solid";

                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";

                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is display: block
                    // gets around this issue.
                    trChild.style.display = "block";

                    documentElement
                        .appendChild( table )
                        .appendChild( tr )
                        .appendChild( trChild );

                    trStyle = window.getComputedStyle( tr );
                    reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
                        parseInt( trStyle.borderTopWidth, 10 ) +
                        parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

                    documentElement.removeChild( table );
                }
                return reliableTrDimensionsVal;
            }
        } );
    } )();


    function curCSS( elem, name, computed ) {
        var width, minWidth, maxWidth, ret,
            isCustomProp = rcustomProp.test( name ),

            // Support: Firefox 51+
            // Retrieving style before computed somehow
            // fixes an issue with getting wrong values
            // on detached elements
            style = elem.style;

        computed = computed || getStyles( elem );

        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, trac-12537)
        //   .css('--customProperty) (gh-3144)
        if ( computed ) {

            // Support: IE <=9 - 11+
            // IE only supports `"float"` in `getPropertyValue`; in computed styles
            // it's only available as `"cssFloat"`. We no longer modify properties
            // sent to `.css()` apart from camelCasing, so we need to check both.
            // Normally, this would create difference in behavior: if
            // `getPropertyValue` returns an empty string, the value returned
            // by `.css()` would be `undefined`. This is usually the case for
            // disconnected elements. However, in IE even disconnected elements
            // with no styles return `"none"` for `getPropertyValue( "float" )`
            ret = computed.getPropertyValue( name ) || computed[ name ];

            if ( isCustomProp && ret ) {

                // Support: Firefox 105+, Chrome <=105+
                // Spec requires trimming whitespace for custom properties (gh-4926).
                // Firefox only trims leading whitespace. Chrome just collapses
                // both leading & trailing whitespace to a single space.
                //
                // Fall back to `undefined` if empty string returned.
                // This collapses a missing definition with property defined
                // and set to an empty string but there's no standard API
                // allowing us to differentiate them without a performance penalty
                // and returning `undefined` aligns with older jQuery.
                //
                // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                // as whitespace while CSS does not, but this is not a problem
                // because CSS preprocessing replaces them with U+000A LINE FEED
                // (which *is* CSS whitespace)
                // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                ret = ret.replace( rtrimCSS, "$1" ) || undefined;
            }

            if ( ret === "" && !isAttached( elem ) ) {
                ret = jQuery.style( elem, name );
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret !== undefined ?

            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + "" :
            ret;
    }


    function addGetHookIf( conditionFn, hookFn ) {

        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if ( conditionFn() ) {

                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return ( this.get = hookFn ).apply( this, arguments );
            }
        };
    }


    var cssPrefixes = [ "Webkit", "Moz", "ms" ],
        emptyStyle = document.createElement( "div" ).style,
        vendorProps = {};

// Return a vendor-prefixed property or undefined
    function vendorPropName( name ) {

        // Check for vendor prefixed names
        var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
            i = cssPrefixes.length;

        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in emptyStyle ) {
                return name;
            }
        }
    }

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    function finalPropName( name ) {
        var final = jQuery.cssProps[ name ] || vendorProps[ name ];

        if ( final ) {
            return final;
        }
        if ( name in emptyStyle ) {
            return name;
        }
        return vendorProps[ name ] = vendorPropName( name ) || name;
    }


    var

        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        };

    function setPositiveNumber( _elem, value, subtract ) {

        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec( value );
        return matches ?

            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
            value;
    }

    function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0;

        // Adjustment may not be necessary
        if ( box === ( isBorderBox ? "border" : "content" ) ) {
            return 0;
        }

        for ( ; i < 4; i += 2 ) {

            // Both box models exclude margin
            if ( box === "margin" ) {
                delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
            }

            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if ( !isBorderBox ) {

                // Add padding
                delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

                // For "border" or "margin", add border
                if ( box !== "padding" ) {
                    delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

                    // But still keep track of it otherwise
                } else {
                    extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }

                // If we get here with a border-box (content + padding + border), we're seeking "content" or
                // "padding" or "margin"
            } else {

                // For "content", subtract padding
                if ( box === "content" ) {
                    delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                }

                // For "content" or "padding", subtract border
                if ( box !== "margin" ) {
                    delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            }
        }

        // Account for positive content-box scroll gutter when requested by providing computedVal
        if ( !isBorderBox && computedVal >= 0 ) {

            // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
            // Assuming integer scroll gutter, subtract the rest and round down
            delta += Math.max( 0, Math.ceil(
                elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                computedVal -
                delta -
                extra -
                0.5

                // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                // Use an explicit zero to avoid NaN (gh-3964)
            ) ) || 0;
        }

        return delta;
    }

    function getWidthOrHeight( elem, dimension, extra ) {

        // Start with computed style
        var styles = getStyles( elem ),

            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
            // Fake content-box until we know it's needed to know the true value.
            boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded &&
                jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
            valueIsBorderBox = isBorderBox,

            val = curCSS( elem, dimension, styles ),
            offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if ( rnumnonpx.test( val ) ) {
            if ( !extra ) {
                return val;
            }
            val = "auto";
        }


        // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.
        if ( ( !support.boxSizingReliable() && isBorderBox ||

                // Support: IE 10 - 11+, Edge 15 - 18+
                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                // set in CSS while `offset*` properties report correct values.
                // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                !support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

                // Fall back to offsetWidth/offsetHeight when value is "auto"
                // This happens for inline elements with no explicit setting (gh-3571)
                val === "auto" ||

                // Support: Android <=4.1 - 4.3 only
                // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                !parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

            // Make sure the element is visible & connected
            elem.getClientRects().length ) {

            isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if ( valueIsBorderBox ) {
                val = elem[ offsetProp ];
            }
        }

        // Normalize "" and auto
        val = parseFloat( val ) || 0;

        // Adjust for the element's box model
        return ( val +
            boxModelAdjustment(
                elem,
                dimension,
                extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox,
                styles,

                // Provide the current computed size to request scroll gutter calculation (gh-3589)
                val
            )
        ) + "px";
    }

    jQuery.extend( {

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {

                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},

        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {

            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = camelCase( name ),
                isCustomProp = rcustomProp.test( name ),
                style = elem.style;

            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if ( !isCustomProp ) {
                name = finalPropName( origName );
            }

            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (trac-7345)
                if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
                    value = adjustCSS( elem, name, ret );

                    // Fixes bug trac-9237
                    type = "number";
                }

                // Make sure that null and NaN values aren't set (trac-7116)
                if ( value == null || value !== value ) {
                    return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if ( type === "number" && !isCustomProp ) {
                    value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
                }

                // background-* props affect original clone's values
                if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
                    style[ name ] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !( "set" in hooks ) ||
                    ( value = hooks.set( elem, value, extra ) ) !== undefined ) {

                    if ( isCustomProp ) {
                        style.setProperty( name, value );
                    } else {
                        style[ name ] = value;
                    }
                }

            } else {

                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks &&
                    ( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },

        css: function( elem, name, extra, styles ) {
            var val, num, hooks,
                origName = camelCase( name ),
                isCustomProp = rcustomProp.test( name );

            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if ( !isCustomProp ) {
                name = finalPropName( origName );
            }

            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }

            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name, styles );
            }

            // Convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }

            // Make numeric if forced or a qualifier was provided and val looks numeric
            if ( extra === "" || extra ) {
                num = parseFloat( val );
                return extra === true || isFinite( num ) ? num || 0 : val;
            }

            return val;
        }
    } );

    jQuery.each( [ "height", "width" ], function( _i, dimension ) {
        jQuery.cssHooks[ dimension ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {

                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

                    // Support: Safari 8+
                    // Table columns in Safari have non-zero offsetWidth & zero
                    // getBoundingClientRect().width unless display is changed.
                    // Support: IE <=11 only
                    // Running getBoundingClientRect on a disconnected node
                    // in IE throws an error.
                    ( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
                        swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, dimension, extra );
                        } ) :
                        getWidthOrHeight( elem, dimension, extra );
                }
            },

            set: function( elem, value, extra ) {
                var matches,
                    styles = getStyles( elem ),

                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy = !support.scrollboxSize() &&
                        styles.position === "absolute",

                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox = boxSizingNeeded &&
                        jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                    subtract = extra ?
                        boxModelAdjustment(
                            elem,
                            dimension,
                            extra,
                            isBorderBox,
                            styles
                        ) :
                        0;

                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if ( isBorderBox && scrollboxSizeBuggy ) {
                    subtract -= Math.ceil(
                        elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                        parseFloat( styles[ dimension ] ) -
                        boxModelAdjustment( elem, dimension, "border", false, styles ) -
                        0.5
                    );
                }

                // Convert to pixels if value adjustment is needed
                if ( subtract && ( matches = rcssNum.exec( value ) ) &&
                    ( matches[ 3 ] || "px" ) !== "px" ) {

                    elem.style[ dimension ] = value;
                    value = jQuery.css( elem, dimension );
                }

                return setPositiveNumber( elem, value, subtract );
            }
        };
    } );

    jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
        function( elem, computed ) {
            if ( computed ) {
                return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
                    elem.getBoundingClientRect().left -
                    swap( elem, { marginLeft: 0 }, function() {
                        return elem.getBoundingClientRect().left;
                    } )
                ) + "px";
            }
        }
    );

// These hooks are used by animate to expand properties
    jQuery.each( {
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i = 0,
                    expanded = {},

                    // Assumes a single number if not a string
                    parts = typeof value === "string" ? value.split( " " ) : [ value ];

                for ( ; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }

                return expanded;
            }
        };

        if ( prefix !== "margin" ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    } );

    jQuery.fn.extend( {
        css: function( name, value ) {
            return access( this, function( elem, name, value ) {
                var styles, len,
                    map = {},
                    i = 0;

                if ( Array.isArray( name ) ) {
                    styles = getStyles( elem );
                    len = name.length;

                    for ( ; i < len; i++ ) {
                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        }
    } );


    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];

            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];

            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;

            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }

            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if ( tween.elem.nodeType !== 1 ||
                    tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
                    return tween.elem[ tween.prop ];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css( tween.elem, tween.prop, "" );

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {

                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.nodeType === 1 && (
                    jQuery.cssHooks[ tween.prop ] ||
                    tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };

    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p * Math.PI ) / 2;
        },
        _default: "swing"
    };

    jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
    jQuery.fx.step = {};




    var
        fxNow, inProgress,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

    function schedule() {
        if ( inProgress ) {
            if ( document.hidden === false && window.requestAnimationFrame ) {
                window.requestAnimationFrame( schedule );
            } else {
                window.setTimeout( schedule, jQuery.fx.interval );
            }

            jQuery.fx.tick();
        }
    }

// Animations created synchronously will run synchronously
    function createFxNow() {
        window.setTimeout( function() {
            fxNow = undefined;
        } );
        return ( fxNow = Date.now() );
    }

// Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            i = 0,
            attrs = { height: type };

        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for ( ; i < 4; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }

        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween( value, prop, animation ) {
        var tween,
            collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
            index = 0,
            length = collection.length;
        for ( ; index < length; index++ ) {
            if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

                // We're done with this property
                return tween;
            }
        }
    }

    function defaultPrefilter( elem, props, opts ) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree( elem ),
            dataShow = dataPriv.get( elem, "fxshow" );

        // Queue-skipping animations hijack the fx hooks
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always( function() {

                // Ensure the complete handler is called before this completes
                anim.always( function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                } );
            } );
        }

        // Detect show/hide animations
        for ( prop in props ) {
            value = props[ prop ];
            if ( rfxtypes.test( value ) ) {
                delete props[ prop ];
                toggle = toggle || value === "toggle";
                if ( value === ( hidden ? "hide" : "show" ) ) {

                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                        hidden = true;

                        // Ignore all other no-op show/hide data
                    } else {
                        continue;
                    }
                }
                orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
            }
        }

        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject( props );
        if ( !propTween && jQuery.isEmptyObject( orig ) ) {
            return;
        }

        // Restrict "overflow" and "display" styles during box animations
        if ( isBox && elem.nodeType === 1 ) {

            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if ( restoreDisplay == null ) {
                restoreDisplay = dataPriv.get( elem, "display" );
            }
            display = jQuery.css( elem, "display" );
            if ( display === "none" ) {
                if ( restoreDisplay ) {
                    display = restoreDisplay;
                } else {

                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide( [ elem ], true );
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css( elem, "display" );
                    showHide( [ elem ] );
                }
            }

            // Animate inline elements as inline-block
            if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
                if ( jQuery.css( elem, "float" ) === "none" ) {

                    // Restore the original display value at the end of pure show/hide animations
                    if ( !propTween ) {
                        anim.done( function() {
                            style.display = restoreDisplay;
                        } );
                        if ( restoreDisplay == null ) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }

        if ( opts.overflow ) {
            style.overflow = "hidden";
            anim.always( function() {
                style.overflow = opts.overflow[ 0 ];
                style.overflowX = opts.overflow[ 1 ];
                style.overflowY = opts.overflow[ 2 ];
            } );
        }

        // Implement show/hide animations
        propTween = false;
        for ( prop in orig ) {

            // General show/hide setup for this element animation
            if ( !propTween ) {
                if ( dataShow ) {
                    if ( "hidden" in dataShow ) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
                }

                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if ( toggle ) {
                    dataShow.hidden = !hidden;
                }

                // Show elements before animating them
                if ( hidden ) {
                    showHide( [ elem ], true );
                }

                /* eslint-disable no-loop-func */

                anim.done( function() {

                    /* eslint-enable no-loop-func */

                    // The final step of a "hide" animation is actually hiding the element
                    if ( !hidden ) {
                        showHide( [ elem ] );
                    }
                    dataPriv.remove( elem, "fxshow" );
                    for ( prop in orig ) {
                        jQuery.style( elem, prop, orig[ prop ] );
                    }
                } );
            }

            // Per-property setup
            propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
            if ( !( prop in dataShow ) ) {
                dataShow[ prop ] = propTween.start;
                if ( hidden ) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }

    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( Array.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }

            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }

            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }

    function Animation( elem, properties, options ) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always( function() {

                // Don't match elem in the :animated selector
                delete tick.elem;
            } ),
            tick = function() {
                if ( stopped ) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for ( ; index < length; index++ ) {
                    animation.tweens[ index ].run( percent );
                }

                deferred.notifyWith( elem, [ animation, percent, remaining ] );

                // If there's more to do, yield
                if ( percent < 1 && length ) {
                    return remaining;
                }

                // If this was an empty animation, synthesize a final progress notification
                if ( !length ) {
                    deferred.notifyWith( elem, [ animation, 1, 0 ] );
                }

                // Resolve the animation and report its conclusion
                deferred.resolveWith( elem, [ animation ] );
                return false;
            },
            animation = deferred.promise( {
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                        animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,

                        // If we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if ( stopped ) {
                        return this;
                    }
                    stopped = true;
                    for ( ; index < length; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if ( gotoEnd ) {
                        deferred.notifyWith( elem, [ animation, 1, 0 ] );
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            } ),
            props = animation.props;

        propFilter( props, animation.opts.specialEasing );

        for ( ; index < length; index++ ) {
            result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                if ( isFunction( result.stop ) ) {
                    jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
                        result.stop.bind( result );
                }
                return result;
            }
        }

        jQuery.map( props, createTween, animation );

        if ( isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }

        // Attach callbacks from options
        animation
            .progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );

        jQuery.fx.timer(
            jQuery.extend( tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            } )
        );

        return animation;
    }

    jQuery.Animation = jQuery.extend( Animation, {

        tweeners: {
            "*": [ function( prop, value ) {
                var tween = this.createTween( prop, value );
                adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
                return tween;
            } ]
        },

        tweener: function( props, callback ) {
            if ( isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.match( rnothtmlwhite );
            }

            var prop,
                index = 0,
                length = props.length;

            for ( ; index < length; index++ ) {
                prop = props[ index ];
                Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
                Animation.tweeners[ prop ].unshift( callback );
            }
        },

        prefilters: [ defaultPrefilter ],

        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                Animation.prefilters.unshift( callback );
            } else {
                Animation.prefilters.push( callback );
            }
        }
    } );

    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction( easing ) && easing
        };

        // Go to the end state if fx are off
        if ( jQuery.fx.off ) {
            opt.duration = 0;

        } else {
            if ( typeof opt.duration !== "number" ) {
                if ( opt.duration in jQuery.fx.speeds ) {
                    opt.duration = jQuery.fx.speeds[ opt.duration ];

                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }

        // Normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if ( isFunction( opt.old ) ) {
                opt.old.call( this );
            }

            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };

        return opt;
    };

    jQuery.fn.extend( {
        fadeTo: function( speed, to, easing, callback ) {

            // Show any hidden elements after setting opacity to 0
            return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

                // Animate to the value specified
                .end().animate( { opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {

                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                    // Empty animations, or finishing resolves immediately
                    if ( empty || dataPriv.get( this, "finish" ) ) {
                        anim.stop( true );
                    }
                };

            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };

            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue ) {
                this.queue( type || "fx", [] );
            }

            return this.each( function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get( this );

                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }

                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this &&
                        ( type == null || timers[ index ].queue === type ) ) {

                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            } );
        },
        finish: function( type ) {
            if ( type !== false ) {
                type = type || "fx";
            }
            return this.each( function() {
                var index,
                    data = dataPriv.get( this ),
                    queue = data[ type + "queue" ],
                    hooks = data[ type + "queueHooks" ],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue( this, type, [] );

                if ( hooks && hooks.stop ) {
                    hooks.stop.call( this, true );
                }

                // Look for any active animations, and finish them
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                        timers[ index ].anim.stop( true );
                        timers.splice( index, 1 );
                    }
                }

                // Look for any animations in the old queue and finish them
                for ( index = 0; index < length; index++ ) {
                    if ( queue[ index ] && queue[ index ].finish ) {
                        queue[ index ].finish.call( this );
                    }
                }

                // Turn off finishing flag
                delete data.finish;
            } );
        }
    } );

    jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    } );

// Generate shortcuts for custom animations
    jQuery.each( {
        slideDown: genFx( "show" ),
        slideUp: genFx( "hide" ),
        slideToggle: genFx( "toggle" ),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    } );

    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer,
            i = 0,
            timers = jQuery.timers;

        fxNow = Date.now();

        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];

            // Run the timer and safely remove it when done (allowing for external removal)
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }

        if ( !timers.length ) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function( timer ) {
        jQuery.timers.push( timer );
        jQuery.fx.start();
    };

    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if ( inProgress ) {
            return;
        }

        inProgress = true;
        schedule();
    };

    jQuery.fx.stop = function() {
        inProgress = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,

        // Default speed
        _default: 400
    };


// Based off of the plugin by Clint Helfers, with permission.
    jQuery.fn.delay = function( time, type ) {
        time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
        type = type || "fx";

        return this.queue( type, function( next, hooks ) {
            var timeout = window.setTimeout( next, time );
            hooks.stop = function() {
                window.clearTimeout( timeout );
            };
        } );
    };


    ( function() {
        var input = document.createElement( "input" ),
            select = document.createElement( "select" ),
            opt = select.appendChild( document.createElement( "option" ) );

        input.type = "checkbox";

        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";

        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;

        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement( "input" );
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    } )();


    var boolHook,
        attrHandle = jQuery.expr.attrHandle;

    jQuery.fn.extend( {
        attr: function( name, value ) {
            return access( this, jQuery.attr, name, value, arguments.length > 1 );
        },

        removeAttr: function( name ) {
            return this.each( function() {
                jQuery.removeAttr( this, name );
            } );
        }
    } );

    jQuery.extend( {
        attr: function( elem, name, value ) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set attributes on text, comment and attribute nodes
            if ( nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === "undefined" ) {
                return jQuery.prop( elem, name, value );
            }

            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
                hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
                    ( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
            }

            if ( value !== undefined ) {
                if ( value === null ) {
                    jQuery.removeAttr( elem, name );
                    return;
                }

                if ( hooks && "set" in hooks &&
                    ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                    return ret;
                }

                elem.setAttribute( name, value + "" );
                return value;
            }

            if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                return ret;
            }

            ret = jQuery.find.attr( elem, name );

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },

        attrHooks: {
            type: {
                set: function( elem, value ) {
                    if ( !support.radioValue && value === "radio" &&
                        nodeName( elem, "input" ) ) {
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        removeAttr: function( elem, value ) {
            var name,
                i = 0,

                // Attribute names can contain non-HTML whitespace characters
                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                attrNames = value && value.match( rnothtmlwhite );

            if ( attrNames && elem.nodeType === 1 ) {
                while ( ( name = attrNames[ i++ ] ) ) {
                    elem.removeAttribute( name );
                }
            }
        }
    } );

// Hooks for boolean attributes
    boolHook = {
        set: function( elem, value, name ) {
            if ( value === false ) {

                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else {
                elem.setAttribute( name, name );
            }
            return name;
        }
    };

    jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
        var getter = attrHandle[ name ] || jQuery.find.attr;

        attrHandle[ name ] = function( elem, name, isXML ) {
            var ret, handle,
                lowercaseName = name.toLowerCase();

            if ( !isXML ) {

                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[ lowercaseName ];
                attrHandle[ lowercaseName ] = ret;
                ret = getter( elem, name, isXML ) != null ?
                    lowercaseName :
                    null;
                attrHandle[ lowercaseName ] = handle;
            }
            return ret;
        };
    } );




    var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;

    jQuery.fn.extend( {
        prop: function( name, value ) {
            return access( this, jQuery.prop, name, value, arguments.length > 1 );
        },

        removeProp: function( name ) {
            return this.each( function() {
                delete this[ jQuery.propFix[ name ] || name ];
            } );
        }
    } );

    jQuery.extend( {
        prop: function( elem, name, value ) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if ( nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }

            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }

            if ( value !== undefined ) {
                if ( hooks && "set" in hooks &&
                    ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                    return ret;
                }

                return ( elem[ name ] = value );
            }

            if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                return ret;
            }

            return elem[ name ];
        },

        propHooks: {
            tabIndex: {
                get: function( elem ) {

                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // Use proper attribute retrieval (trac-12072)
                    var tabindex = jQuery.find.attr( elem, "tabindex" );

                    if ( tabindex ) {
                        return parseInt( tabindex, 10 );
                    }

                    if (
                        rfocusable.test( elem.nodeName ) ||
                        rclickable.test( elem.nodeName ) &&
                        elem.href
                    ) {
                        return 0;
                    }

                    return -1;
                }
            }
        },

        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    } );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
    if ( !support.optSelected ) {
        jQuery.propHooks.selected = {
            get: function( elem ) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if ( parent && parent.parentNode ) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function( elem ) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if ( parent ) {
                    parent.selectedIndex;

                    if ( parent.parentNode ) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }

    jQuery.each( [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[ this.toLowerCase() ] = this;
    } );




    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse( value ) {
        var tokens = value.match( rnothtmlwhite ) || [];
        return tokens.join( " " );
    }


    function getClass( elem ) {
        return elem.getAttribute && elem.getAttribute( "class" ) || "";
    }

    function classesToArray( value ) {
        if ( Array.isArray( value ) ) {
            return value;
        }
        if ( typeof value === "string" ) {
            return value.match( rnothtmlwhite ) || [];
        }
        return [];
    }

    jQuery.fn.extend( {
        addClass: function( value ) {
            var classNames, cur, curValue, className, i, finalValue;

            if ( isFunction( value ) ) {
                return this.each( function( j ) {
                    jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
                } );
            }

            classNames = classesToArray( value );

            if ( classNames.length ) {
                return this.each( function() {
                    curValue = getClass( this );
                    cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

                    if ( cur ) {
                        for ( i = 0; i < classNames.length; i++ ) {
                            className = classNames[ i ];
                            if ( cur.indexOf( " " + className + " " ) < 0 ) {
                                cur += className + " ";
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse( cur );
                        if ( curValue !== finalValue ) {
                            this.setAttribute( "class", finalValue );
                        }
                    }
                } );
            }

            return this;
        },

        removeClass: function( value ) {
            var classNames, cur, curValue, className, i, finalValue;

            if ( isFunction( value ) ) {
                return this.each( function( j ) {
                    jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
                } );
            }

            if ( !arguments.length ) {
                return this.attr( "class", "" );
            }

            classNames = classesToArray( value );

            if ( classNames.length ) {
                return this.each( function() {
                    curValue = getClass( this );

                    // This expression is here for better compressibility (see addClass)
                    cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

                    if ( cur ) {
                        for ( i = 0; i < classNames.length; i++ ) {
                            className = classNames[ i ];

                            // Remove *all* instances
                            while ( cur.indexOf( " " + className + " " ) > -1 ) {
                                cur = cur.replace( " " + className + " ", " " );
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse( cur );
                        if ( curValue !== finalValue ) {
                            this.setAttribute( "class", finalValue );
                        }
                    }
                } );
            }

            return this;
        },

        toggleClass: function( value, stateVal ) {
            var classNames, className, i, self,
                type = typeof value,
                isValidValue = type === "string" || Array.isArray( value );

            if ( isFunction( value ) ) {
                return this.each( function( i ) {
                    jQuery( this ).toggleClass(
                        value.call( this, i, getClass( this ), stateVal ),
                        stateVal
                    );
                } );
            }

            if ( typeof stateVal === "boolean" && isValidValue ) {
                return stateVal ? this.addClass( value ) : this.removeClass( value );
            }

            classNames = classesToArray( value );

            return this.each( function() {
                if ( isValidValue ) {

                    // Toggle individual class names
                    self = jQuery( this );

                    for ( i = 0; i < classNames.length; i++ ) {
                        className = classNames[ i ];

                        // Check each className given, space separated list
                        if ( self.hasClass( className ) ) {
                            self.removeClass( className );
                        } else {
                            self.addClass( className );
                        }
                    }

                    // Toggle whole class name
                } else if ( value === undefined || type === "boolean" ) {
                    className = getClass( this );
                    if ( className ) {

                        // Store className if set
                        dataPriv.set( this, "__className__", className );
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if ( this.setAttribute ) {
                        this.setAttribute( "class",
                            className || value === false ?
                                "" :
                                dataPriv.get( this, "__className__" ) || ""
                        );
                    }
                }
            } );
        },

        hasClass: function( selector ) {
            var className, elem,
                i = 0;

            className = " " + selector + " ";
            while ( ( elem = this[ i++ ] ) ) {
                if ( elem.nodeType === 1 &&
                    ( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
                    return true;
                }
            }

            return false;
        }
    } );




    var rreturn = /\r/g;

    jQuery.fn.extend( {
        val: function( value ) {
            var hooks, ret, valueIsFunction,
                elem = this[ 0 ];

            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] ||
                        jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                    if ( hooks &&
                        "get" in hooks &&
                        ( ret = hooks.get( elem, "value" ) ) !== undefined
                    ) {
                        return ret;
                    }

                    ret = elem.value;

                    // Handle most common string cases
                    if ( typeof ret === "string" ) {
                        return ret.replace( rreturn, "" );
                    }

                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }

                return;
            }

            valueIsFunction = isFunction( value );

            return this.each( function( i ) {
                var val;

                if ( this.nodeType !== 1 ) {
                    return;
                }

                if ( valueIsFunction ) {
                    val = value.call( this, i, jQuery( this ).val() );
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";

                } else if ( typeof val === "number" ) {
                    val += "";

                } else if ( Array.isArray( val ) ) {
                    val = jQuery.map( val, function( value ) {
                        return value == null ? "" : value + "";
                    } );
                }

                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

                // If set returns undefined, fall back to normal setting
                if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            } );
        }
    } );

    jQuery.extend( {
        valHooks: {
            option: {
                get: function( elem ) {

                    var val = jQuery.find.attr( elem, "value" );
                    return val != null ?
                        val :

                        // Support: IE <=10 - 11 only
                        // option.text throws exceptions (trac-14686, trac-14858)
                        // Strip and collapse whitespace
                        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                        stripAndCollapse( jQuery.text( elem ) );
                }
            },
            select: {
                get: function( elem ) {
                    var value, option, i,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one",
                        values = one ? null : [],
                        max = one ? index + 1 : options.length;

                    if ( index < 0 ) {
                        i = max;

                    } else {
                        i = one ? index : 0;
                    }

                    // Loop through all the selected options
                    for ( ; i < max; i++ ) {
                        option = options[ i ];

                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (trac-2551)
                        if ( ( option.selected || i === index ) &&

                            // Don't return options that are disabled or in a disabled optgroup
                            !option.disabled &&
                            ( !option.parentNode.disabled ||
                                !nodeName( option.parentNode, "optgroup" ) ) ) {

                            // Get the specific value for the option
                            value = jQuery( option ).val();

                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }

                    return values;
                },

                set: function( elem, value ) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray( value ),
                        i = options.length;

                    while ( i-- ) {
                        option = options[ i ];

                        /* eslint-disable no-cond-assign */

                        if ( option.selected =
                            jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
                        ) {
                            optionSet = true;
                        }

                        /* eslint-enable no-cond-assign */
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if ( !optionSet ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    } );

// Radios and checkboxes getter/setter
    jQuery.each( [ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = {
            set: function( elem, value ) {
                if ( Array.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
                }
            }
        };
        if ( !support.checkOn ) {
            jQuery.valHooks[ this ].get = function( elem ) {
                return elem.getAttribute( "value" ) === null ? "on" : elem.value;
            };
        }
    } );




// Return jQuery for attributes-only inclusion


    support.focusin = "onfocusin" in window;


    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        stopPropagationCallback = function( e ) {
            e.stopPropagation();
        };

    jQuery.extend( jQuery.event, {

        trigger: function( event, data, elem, onlyHandlers ) {

            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
                eventPath = [ elem || document ],
                type = hasOwn.call( event, "type" ) ? event.type : event,
                namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

            cur = lastElement = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }

            if ( type.indexOf( "." ) > -1 ) {

                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split( "." );
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf( ":" ) < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[ jQuery.expando ] ?
                event :
                new jQuery.Event( type, typeof event === "object" && event );

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join( "." );
            event.rnamespace = event.namespace ?
                new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [ event ] :
                jQuery.makeArray( data, [ event ] );

            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (trac-9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
            if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

                bubbleType = special.delegateType || type;
                if ( !rfocusMorph.test( bubbleType + type ) ) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode ) {
                    eventPath.push( cur );
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( tmp === ( elem.ownerDocument || document ) ) {
                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
                lastElement = cur;
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
                    dataPriv.get( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }

                // Native handler
                handle = ontype && cur[ ontype ];
                if ( handle && handle.apply && acceptData( cur ) ) {
                    event.result = handle.apply( cur, data );
                    if ( event.result === false ) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {

                if ( ( !special._default ||
                        special._default.apply( eventPath.pop(), data ) === false ) &&
                    acceptData( elem ) ) {

                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (trac-6170)
                    if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ ontype ];

                        if ( tmp ) {
                            elem[ ontype ] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;

                        if ( event.isPropagationStopped() ) {
                            lastElement.addEventListener( type, stopPropagationCallback );
                        }

                        elem[ type ]();

                        if ( event.isPropagationStopped() ) {
                            lastElement.removeEventListener( type, stopPropagationCallback );
                        }

                        jQuery.event.triggered = undefined;

                        if ( tmp ) {
                            elem[ ontype ] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function( type, elem, event ) {
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                {
                    type: type,
                    isSimulated: true
                }
            );

            jQuery.event.trigger( e, null, elem );
        }

    } );

    jQuery.fn.extend( {

        trigger: function( type, data ) {
            return this.each( function() {
                jQuery.event.trigger( type, data, this );
            } );
        },
        triggerHandler: function( type, data ) {
            var elem = this[ 0 ];
            if ( elem ) {
                return jQuery.event.trigger( type, data, elem, true );
            }
        }
    } );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if ( !support.focusin ) {
        jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function( event ) {
                jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
            };

            jQuery.event.special[ fix ] = {
                setup: function() {

                    // Handle: regular nodes (via `this.ownerDocument`), window
                    // (via `this.document`) & document (via `this`).
                    var doc = this.ownerDocument || this.document || this,
                        attaches = dataPriv.access( doc, fix );

                    if ( !attaches ) {
                        doc.addEventListener( orig, handler, true );
                    }
                    dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
                },
                teardown: function() {
                    var doc = this.ownerDocument || this.document || this,
                        attaches = dataPriv.access( doc, fix ) - 1;

                    if ( !attaches ) {
                        doc.removeEventListener( orig, handler, true );
                        dataPriv.remove( doc, fix );

                    } else {
                        dataPriv.access( doc, fix, attaches );
                    }
                }
            };
        } );
    }
    var location = window.location;

    var nonce = { guid: Date.now() };

    var rquery = ( /\?/ );



// Cross-browser xml parsing
    jQuery.parseXML = function( data ) {
        var xml, parserErrorElem;
        if ( !data || typeof data !== "string" ) {
            return null;
        }

        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
        } catch ( e ) {}

        parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
        if ( !xml || parserErrorElem ) {
            jQuery.error( "Invalid XML: " + (
                parserErrorElem ?
                    jQuery.map( parserErrorElem.childNodes, function( el ) {
                        return el.textContent;
                    } ).join( "\n" ) :
                    data
            ) );
        }
        return xml;
    };


    var
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams( prefix, obj, traditional, add ) {
        var name;

        if ( Array.isArray( obj ) ) {

            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {

                    // Treat each array item as a scalar.
                    add( prefix, v );

                } else {

                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                        prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
                        v,
                        traditional,
                        add
                    );
                }
            } );

        } else if ( !traditional && toType( obj ) === "object" ) {

            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }

        } else {

            // Serialize scalar item.
            add( prefix, obj );
        }
    }

// Serialize an array of form elements or a set of
// key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, valueOrFunction ) {

                // If value is a function, invoke it and use its return value
                var value = isFunction( valueOrFunction ) ?
                    valueOrFunction() :
                    valueOrFunction;

                s[ s.length ] = encodeURIComponent( key ) + "=" +
                    encodeURIComponent( value == null ? "" : value );
            };

        if ( a == null ) {
            return "";
        }

        // If an array was passed in, assume that it is an array of form elements.
        if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            } );

        } else {

            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }

        // Return the resulting serialization
        return s.join( "&" );
    };

    jQuery.fn.extend( {
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map( function() {

                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop( this, "elements" );
                return elements ? jQuery.makeArray( elements ) : this;
            } ).filter( function() {
                var type = this.type;

                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery( this ).is( ":disabled" ) &&
                    rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                    ( this.checked || !rcheckableType.test( type ) );
            } ).map( function( _i, elem ) {
                var val = jQuery( this ).val();

                if ( val == null ) {
                    return null;
                }

                if ( Array.isArray( val ) ) {
                    return jQuery.map( val, function( val ) {
                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                    } );
                }

                return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            } ).get();
        }
    } );


    var
        r20 = /%20/g,
        rhash = /#.*$/,
        rantiCache = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

        // trac-7653, trac-8125, trac-8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,

        /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
        prefilters = {},

        /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
        transports = {},

        // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
        allTypes = "*/".concat( "*" ),

        // Anchor tag for parsing the document origin
        originAnchor = document.createElement( "a" );

    originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {

        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {

            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

            if ( isFunction( func ) ) {

                // For each dataType in the dataTypeExpression
                while ( ( dataType = dataTypes[ i++ ] ) ) {

                    // Prepend if requested
                    if ( dataType[ 0 ] === "+" ) {
                        dataType = dataType.slice( 1 ) || "*";
                        ( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

                        // Otherwise append
                    } else {
                        ( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
                    }
                }
            }
        };
    }

// Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

        var inspected = {},
            seekingTransport = ( structure === transports );

        function inspect( dataType ) {
            var selected;
            inspected[ dataType ] = true;
            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                if ( typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[ dataTypeOrTransport ] ) {

                    options.dataTypes.unshift( dataTypeOrTransport );
                    inspect( dataTypeOrTransport );
                    return false;
                } else if ( seekingTransport ) {
                    return !( selected = dataTypeOrTransport );
                }
            } );
            return selected;
        }

        return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
    function ajaxExtend( target, src ) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }

        return target;
    }

    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
    function ajaxHandleResponses( s, jqXHR, responses ) {

        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while ( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
            }
        }

        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {

            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }

            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }

    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
    function ajaxConvert( s, response, jqXHR, isSuccess ) {
        var conv2, current, conv, tmp, prev,
            converters = {},

            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while ( current ) {

            if ( s.responseFields[ current ] ) {
                jqXHR[ s.responseFields[ current ] ] = response;
            }

            // Apply the dataFilter if provided
            if ( !prev && isSuccess && s.dataFilter ) {
                response = s.dataFilter( response, s.dataType );
            }

            prev = current;
            current = dataTypes.shift();

            if ( current ) {

                // There's only work to do if current dataType is non-auto
                if ( current === "*" ) {

                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                } else if ( prev !== "*" && prev !== current ) {

                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {

                            // If conv2 outputs current
                            tmp = conv2.split( " " );
                            if ( tmp[ 1 ] === current ) {

                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {

                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];

                                        // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.unshift( tmp[ 1 ] );
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {

                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s.throws ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return { state: "success", data: response };
    }

    jQuery.extend( {

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test( location.protocol ),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",

            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": JSON.parse,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            return settings ?

                // Building a settings object
                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

                // Extending ajaxSettings
                ajaxExtend( jQuery.ajaxSettings, target );
        },

        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),

        // Main method
        ajax: function( url, options ) {

            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var transport,

                // URL without anti-cache param
                cacheURL,

                // Response headers
                responseHeadersString,
                responseHeaders,

                // timeout handle
                timeoutTimer,

                // Url cleanup var
                urlAnchor,

                // Request state (becomes false upon send and true upon completion)
                completed,

                // To know if global events are to be dispatched
                fireGlobals,

                // Loop variable
                i,

                // uncached part of the url
                uncached,

                // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),

                // Callbacks context
                callbackContext = s.context || s,

                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                ( callbackContext.nodeType || callbackContext.jquery ) ?
                    jQuery( callbackContext ) :
                    jQuery.event,

                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks( "once memory" ),

                // Status-dependent callbacks
                statusCode = s.statusCode || {},

                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},

                // Default abort message
                strAbort = "canceled",

                // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( completed ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
                                    responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
                                        ( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
                                            .concat( match[ 2 ] );
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() + " " ];
                        }
                        return match == null ? null : match.join( ", " );
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return completed ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        if ( completed == null ) {
                            name = requestHeadersNames[ name.toLowerCase() ] =
                                requestHeadersNames[ name.toLowerCase() ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( completed == null ) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function( map ) {
                        var code;
                        if ( map ) {
                            if ( completed ) {

                                // Execute the appropriate callbacks
                                jqXHR.always( map[ jqXHR.status ] );
                            } else {

                                // Lazy-add the new callbacks in a way that preserves old ones
                                for ( code in map ) {
                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                }
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function( statusText ) {
                        var finalText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( finalText );
                        }
                        done( 0, finalText );
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise( jqXHR );

            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (trac-10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ( ( url || s.url || location.href ) + "" )
                .replace( rprotocol, location.protocol + "//" );

            // Alias method option to type as per ticket trac-12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

            // A cross-domain request is in order when the origin doesn't match the current origin.
            if ( s.crossDomain == null ) {
                urlAnchor = document.createElement( "a" );

                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;

                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                        urlAnchor.protocol + "//" + urlAnchor.host;
                } catch ( e ) {

                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }

            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }

            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

            // If request was aborted inside a prefilter, stop there
            if ( completed ) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
            fireGlobals = jQuery.event && s.global;

            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger( "ajaxStart" );
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace( rhash, "" );

            // More options handling for requests with no content
            if ( !s.hasContent ) {

                // Remember the hash so we can put it back
                uncached = s.url.slice( cacheURL.length );

                // If data is available and should be processed, append data to url
                if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
                    cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

                    // trac-9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add or update anti-cache param if needed
                if ( s.cache === false ) {
                    cacheURL = cacheURL.replace( rantiCache, "$1" );
                    uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
                        uncached;
                }

                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;

                // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if ( s.data && s.processData &&
                ( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
                s.data = s.data.replace( r20, "+" );
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                if ( jQuery.lastModified[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                }
                if ( jQuery.etag[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                }
            }

            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
                    s.accepts[ s.dataTypes[ 0 ] ] +
                    ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );

            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }

            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend &&
                ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

                // Abort if not done already and return
                return jqXHR.abort();
            }

            // Aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            completeDeferred.add( s.complete );
            jqXHR.done( s.success );
            jqXHR.fail( s.error );

            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }

                // If request was aborted inside ajaxSend, stop there
                if ( completed ) {
                    return jqXHR;
                }

                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = window.setTimeout( function() {
                        jqXHR.abort( "timeout" );
                    }, s.timeout );
                }

                try {
                    completed = false;
                    transport.send( requestHeaders, done );
                } catch ( e ) {

                    // Rethrow post-completion exceptions
                    if ( completed ) {
                        throw e;
                    }

                    // Propagate others as results
                    done( -1, e );
                }
            }

            // Callback for when everything is done
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Ignore repeat invocations
                if ( completed ) {
                    return;
                }

                completed = true;

                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    window.clearTimeout( timeoutTimer );
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }

                // Use a noop converter for missing script but not if jsonp
                if ( !isSuccess &&
                    jQuery.inArray( "script", s.dataTypes ) > -1 &&
                    jQuery.inArray( "json", s.dataTypes ) < 0 ) {
                    s.converters[ "text script" ] = function() {};
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert( s, response, jqXHR, isSuccess );

                // If successful, handle type chaining
                if ( isSuccess ) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        modified = jqXHR.getResponseHeader( "Last-Modified" );
                        if ( modified ) {
                            jQuery.lastModified[ cacheURL ] = modified;
                        }
                        modified = jqXHR.getResponseHeader( "etag" );
                        if ( modified ) {
                            jQuery.etag[ cacheURL ] = modified;
                        }
                    }

                    // if no content
                    if ( status === 204 || s.type === "HEAD" ) {
                        statusText = "nocontent";

                        // if not modified
                    } else if ( status === 304 ) {
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {

                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if ( status || !statusText ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = ( nativeStatusText || statusText ) + "";

                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }

                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;

                if ( fireGlobals ) {
                    globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                        [ jqXHR, s, isSuccess ? success : error ] );
                }

                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger( "ajaxStop" );
                    }
                }
            }

            return jqXHR;
        },

        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        },

        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        }
    } );

    jQuery.each( [ "get", "post" ], function( _i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {

            // Shift arguments if data argument was omitted
            if ( isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            // The url can be an options object (which then must have .url)
            return jQuery.ajax( jQuery.extend( {
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject( url ) && url ) );
        };
    } );

    jQuery.ajaxPrefilter( function( s ) {
        var i;
        for ( i in s.headers ) {
            if ( i.toLowerCase() === "content-type" ) {
                s.contentType = s.headers[ i ] || "";
            }
        }
    } );


    jQuery._evalUrl = function( url, options, doc ) {
        return jQuery.ajax( {
            url: url,

            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,

            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
                "text script": function() {}
            },
            dataFilter: function( response ) {
                jQuery.globalEval( response, options, doc );
            }
        } );
    };


    jQuery.fn.extend( {
        wrapAll: function( html ) {
            var wrap;

            if ( this[ 0 ] ) {
                if ( isFunction( html ) ) {
                    html = html.call( this[ 0 ] );
                }

                // The elements to wrap the target around
                wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

                if ( this[ 0 ].parentNode ) {
                    wrap.insertBefore( this[ 0 ] );
                }

                wrap.map( function() {
                    var elem = this;

                    while ( elem.firstElementChild ) {
                        elem = elem.firstElementChild;
                    }

                    return elem;
                } ).append( this );
            }

            return this;
        },

        wrapInner: function( html ) {
            if ( isFunction( html ) ) {
                return this.each( function( i ) {
                    jQuery( this ).wrapInner( html.call( this, i ) );
                } );
            }

            return this.each( function() {
                var self = jQuery( this ),
                    contents = self.contents();

                if ( contents.length ) {
                    contents.wrapAll( html );

                } else {
                    self.append( html );
                }
            } );
        },

        wrap: function( html ) {
            var htmlIsFunction = isFunction( html );

            return this.each( function( i ) {
                jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
            } );
        },

        unwrap: function( selector ) {
            this.parent( selector ).not( "body" ).each( function() {
                jQuery( this ).replaceWith( this.childNodes );
            } );
            return this;
        }
    } );


    jQuery.expr.pseudos.hidden = function( elem ) {
        return !jQuery.expr.pseudos.visible( elem );
    };
    jQuery.expr.pseudos.visible = function( elem ) {
        return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
    };




    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window.XMLHttpRequest();
        } catch ( e ) {}
    };

    var xhrSuccessStatus = {

            // File protocol always yields status code 0, assume 200
            0: 200,

            // Support: IE <=9 only
            // trac-1450: sometimes IE returns 1223 when it should be 204
            1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr();

    support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    support.ajax = xhrSupported = !!xhrSupported;

    jQuery.ajaxTransport( function( options ) {
        var callback, errorCallback;

        // Cross domain only allowed if supported through XMLHttpRequest
        if ( support.cors || xhrSupported && !options.crossDomain ) {
            return {
                send: function( headers, complete ) {
                    var i,
                        xhr = options.xhr();

                    xhr.open(
                        options.type,
                        options.url,
                        options.async,
                        options.username,
                        options.password
                    );

                    // Apply custom fields if provided
                    if ( options.xhrFields ) {
                        for ( i in options.xhrFields ) {
                            xhr[ i ] = options.xhrFields[ i ];
                        }
                    }

                    // Override mime type if needed
                    if ( options.mimeType && xhr.overrideMimeType ) {
                        xhr.overrideMimeType( options.mimeType );
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
                        headers[ "X-Requested-With" ] = "XMLHttpRequest";
                    }

                    // Set headers
                    for ( i in headers ) {
                        xhr.setRequestHeader( i, headers[ i ] );
                    }

                    // Callback
                    callback = function( type ) {
                        return function() {
                            if ( callback ) {
                                callback = errorCallback = xhr.onload =
                                    xhr.onerror = xhr.onabort = xhr.ontimeout =
                                        xhr.onreadystatechange = null;

                                if ( type === "abort" ) {
                                    xhr.abort();
                                } else if ( type === "error" ) {

                                    // Support: IE <=9 only
                                    // On a manual native abort, IE9 throws
                                    // errors on any property access that is not readyState
                                    if ( typeof xhr.status !== "number" ) {
                                        complete( 0, "error" );
                                    } else {
                                        complete(

                                            // File: protocol always yields status 0; see trac-8605, trac-14207
                                            xhr.status,
                                            xhr.statusText
                                        );
                                    }
                                } else {
                                    complete(
                                        xhrSuccessStatus[ xhr.status ] || xhr.status,
                                        xhr.statusText,

                                        // Support: IE <=9 only
                                        // IE9 has no XHR2 but throws on binary (trac-11426)
                                        // For XHR2 non-text, let the caller handle it (gh-2498)
                                        ( xhr.responseType || "text" ) !== "text"  ||
                                        typeof xhr.responseText !== "string" ?
                                            { binary: xhr.response } :
                                            { text: xhr.responseText },
                                        xhr.getAllResponseHeaders()
                                    );
                                }
                            }
                        };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if ( xhr.onabort !== undefined ) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function() {

                            // Check readyState before timeout as it changes
                            if ( xhr.readyState === 4 ) {

                                // Allow onerror to be called first,
                                // but that will not handle a native abort
                                // Also, save errorCallback to a variable
                                // as xhr.onerror cannot be accessed
                                window.setTimeout( function() {
                                    if ( callback ) {
                                        errorCallback();
                                    }
                                } );
                            }
                        };
                    }

                    // Create the abort callback
                    callback = callback( "abort" );

                    try {

                        // Do send the request (this may raise an exception)
                        xhr.send( options.hasContent && options.data || null );
                    } catch ( e ) {

                        // trac-14683: Only rethrow if this hasn't been notified as an error yet
                        if ( callback ) {
                            throw e;
                        }
                    }
                },

                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    } );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter( function( s ) {
        if ( s.crossDomain ) {
            s.contents.script = false;
        }
    } );

// Install script dataType
    jQuery.ajaxSetup( {
        accepts: {
            script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    } );

// Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
        }
    } );

// Bind script tag hack transport
    jQuery.ajaxTransport( "script", function( s ) {

        // This transport only deals with cross domain or forced-by-attrs requests
        if ( s.crossDomain || s.scriptAttrs ) {
            var script, callback;
            return {
                send: function( _, complete ) {
                    script = jQuery( "<script>" )
                        .attr( s.scriptAttrs || {} )
                        .prop( { charset: s.scriptCharset, src: s.url } )
                        .on( "load error", callback = function( evt ) {
                            script.remove();
                            callback = null;
                            if ( evt ) {
                                complete( evt.type === "error" ? 404 : 200, evt.type );
                            }
                        } );

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild( script[ 0 ] );
                },
                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    } );




    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
    jQuery.ajaxSetup( {
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
            this[ callback ] = true;
            return callback;
        }
    } );

// Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                    "url" :
                    typeof s.data === "string" &&
                    ( s.contentType || "" )
                        .indexOf( "application/x-www-form-urlencoded" ) === 0 &&
                    rjsonp.test( s.data ) && "data"
            );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if ( jsonProp ) {
                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
            } else if ( s.jsonp !== false ) {
                s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters[ "script json" ] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };

            // Force json dataType
            s.dataTypes[ 0 ] = "json";

            // Install callback
            overwritten = window[ callbackName ];
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always( function() {

                // If previous value didn't exist - remove it
                if ( overwritten === undefined ) {
                    jQuery( window ).removeProp( callbackName );

                    // Otherwise restore preexisting value
                } else {
                    window[ callbackName ] = overwritten;
                }

                // Save back as free
                if ( s[ callbackName ] ) {

                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // Save the callback name for future use
                    oldCallbacks.push( callbackName );
                }

                // Call if it was a function and we have a response
                if ( responseContainer && isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }

                responseContainer = overwritten = undefined;
            } );

            // Delegate to script
            return "script";
        }
    } );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = ( function() {
        var body = document.implementation.createHTMLDocument( "" ).body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    } )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function( data, context, keepScripts ) {
        if ( typeof data !== "string" ) {
            return [];
        }
        if ( typeof context === "boolean" ) {
            keepScripts = context;
            context = false;
        }

        var base, parsed, scripts;

        if ( !context ) {

            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if ( support.createHTMLDocument ) {
                context = document.implementation.createHTMLDocument( "" );

                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement( "base" );
                base.href = document.location.href;
                context.head.appendChild( base );
            } else {
                context = document;
            }
        }

        parsed = rsingleTag.exec( data );
        scripts = !keepScripts && [];

        // Single tag
        if ( parsed ) {
            return [ context.createElement( parsed[ 1 ] ) ];
        }

        parsed = buildFragment( [ data ], context, scripts );

        if ( scripts && scripts.length ) {
            jQuery( scripts ).remove();
        }

        return jQuery.merge( [], parsed.childNodes );
    };


    /**
     * Load a url into a page
     */
    jQuery.fn.load = function( url, params, callback ) {
        var selector, type, response,
            self = this,
            off = url.indexOf( " " );

        if ( off > -1 ) {
            selector = stripAndCollapse( url.slice( off ) );
            url = url.slice( 0, off );
        }

        // If it's a function
        if ( isFunction( params ) ) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if ( self.length > 0 ) {
            jQuery.ajax( {
                url: url,

                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            } ).done( function( responseText ) {

                // Save response for use in complete callback
                response = arguments;

                self.html( selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

                    // Otherwise use the full result
                    responseText );

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            } ).always( callback && function( jqXHR, status ) {
                self.each( function() {
                    callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
                } );
            } );
        }

        return this;
    };




    jQuery.expr.pseudos.animated = function( elem ) {
        return jQuery.grep( jQuery.timers, function( fn ) {
            return elem === fn.elem;
        } ).length;
    };




    jQuery.offset = {
        setOffset: function( elem, options, i ) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css( elem, "position" ),
                curElem = jQuery( elem ),
                props = {};

            // Set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css( elem, "top" );
            curCSSLeft = jQuery.css( elem, "left" );
            calculatePosition = ( position === "absolute" || position === "fixed" ) &&
                ( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;

            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }

            if ( isFunction( options ) ) {

                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
            }

            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }

            if ( "using" in options ) {
                options.using.call( elem, props );

            } else {
                curElem.css( props );
            }
        }
    };

    jQuery.fn.extend( {

        // offset() relates an element's border box to the document origin
        offset: function( options ) {

            // Preserve chaining for setter
            if ( arguments.length ) {
                return options === undefined ?
                    this :
                    this.each( function( i ) {
                        jQuery.offset.setOffset( this, options, i );
                    } );
            }

            var rect, win,
                elem = this[ 0 ];

            if ( !elem ) {
                return;
            }

            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if ( !elem.getClientRects().length ) {
                return { top: 0, left: 0 };
            }

            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },

        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function() {
            if ( !this[ 0 ] ) {
                return;
            }

            var offsetParent, offset, doc,
                elem = this[ 0 ],
                parentOffset = { top: 0, left: 0 };

            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if ( jQuery.css( elem, "position" ) === "fixed" ) {

                // Assume position:fixed implies availability of getBoundingClientRect
                offset = elem.getBoundingClientRect();

            } else {
                offset = this.offset();

                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while ( offsetParent &&
                ( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
                jQuery.css( offsetParent, "position" ) === "static" ) {

                    offsetParent = offsetParent.parentNode;
                }
                if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery( offsetParent ).offset();
                    parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
                    parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
                }
            }

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
            };
        },

        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
            return this.map( function() {
                var offsetParent = this.offsetParent;

                while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
            } );
        }
    } );

// Create scrollLeft and scrollTop methods
    jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
        var top = "pageYOffset" === prop;

        jQuery.fn[ method ] = function( val ) {
            return access( this, function( elem, method, val ) {

                // Coalesce documents and windows
                var win;
                if ( isWindow( elem ) ) {
                    win = elem;
                } else if ( elem.nodeType === 9 ) {
                    win = elem.defaultView;
                }

                if ( val === undefined ) {
                    return win ? win[ prop ] : elem[ method ];
                }

                if ( win ) {
                    win.scrollTo(
                        !top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                    );

                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length );
        };
    } );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
    jQuery.each( [ "top", "left" ], function( _i, prop ) {
        jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
            function( elem, computed ) {
                if ( computed ) {
                    computed = curCSS( elem, prop );

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test( computed ) ?
                        jQuery( elem ).position()[ prop ] + "px" :
                        computed;
                }
            }
        );
    } );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( {
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function( defaultExtra, funcName ) {

            // Margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

                return access( this, function( elem, type, value ) {
                    var doc;

                    if ( isWindow( elem ) ) {

                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                        return funcName.indexOf( "outer" ) === 0 ?
                            elem[ "inner" + name ] :
                            elem.document.documentElement[ "client" + name ];
                    }

                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }

                    return value === undefined ?

                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, extra ) :

                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable );
            };
        } );
    } );


    jQuery.each( [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function( _i, type ) {
        jQuery.fn[ type ] = function( fn ) {
            return this.on( type, fn );
        };
    } );




    jQuery.fn.extend( {

        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },

        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {

            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ?
                this.off( selector, "**" ) :
                this.off( types, selector || "**", fn );
        },

        hover: function( fnOver, fnOut ) {
            return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
        }
    } );

    jQuery.each(
        ( "blur focus focusin focusout resize scroll click dblclick " +
            "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
            "change select submit keydown keypress keyup contextmenu" ).split( " " ),
        function( _i, name ) {

            // Handle event binding
            jQuery.fn[ name ] = function( data, fn ) {
                return arguments.length > 0 ?
                    this.on( name, null, data, fn ) :
                    this.trigger( name );
            };
        }
    );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
    var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
    jQuery.proxy = function( fn, context ) {
        var tmp, args, proxy;

        if ( typeof context === "string" ) {
            tmp = fn[ context ];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !isFunction( fn ) ) {
            return undefined;
        }

        // Simulated bind
        args = slice.call( arguments, 2 );
        proxy = function() {
            return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
    };

    jQuery.holdReady = function( hold ) {
        if ( hold ) {
            jQuery.readyWait++;
        } else {
            jQuery.ready( true );
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;

    jQuery.now = Date.now;

    jQuery.isNumeric = function( obj ) {

        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type( obj );
        return ( type === "number" || type === "string" ) &&

            // parseFloat NaNs numeric-cast false positives ("")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            !isNaN( obj - parseFloat( obj ) );
    };

    jQuery.trim = function( text ) {
        return text == null ?
            "" :
            ( text + "" ).replace( rtrim, "$1" );
    };



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if ( typeof define === "function" && define.amd ) {
        define( "jquery", [], function() {
            return jQuery;
        } );
    }




    var

        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$;

    jQuery.noConflict = function( deep ) {
        if ( window.$ === jQuery ) {
            window.$ = _$;
        }

        if ( deep && window.jQuery === jQuery ) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    };

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
    if ( typeof noGlobal === "undefined" ) {
        window.jQuery = window.$ = jQuery;
    }




    return jQuery;
} );

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.noUiSlider = {}));
})(this, (function (exports) { 'use strict';

    exports.PipsMode = void 0;
    (function (PipsMode) {
        PipsMode["Range"] = "range";
        PipsMode["Steps"] = "steps";
        PipsMode["Positions"] = "positions";
        PipsMode["Count"] = "count";
        PipsMode["Values"] = "values";
    })(exports.PipsMode || (exports.PipsMode = {}));
    exports.PipsType = void 0;
    (function (PipsType) {
        PipsType[PipsType["None"] = -1] = "None";
        PipsType[PipsType["NoValue"] = 0] = "NoValue";
        PipsType[PipsType["LargeValue"] = 1] = "LargeValue";
        PipsType[PipsType["SmallValue"] = 2] = "SmallValue";
    })(exports.PipsType || (exports.PipsType = {}));
    //region Helper Methods
    function isValidFormatter(entry) {
        return isValidPartialFormatter(entry) && typeof entry.from === "function";
    }
    function isValidPartialFormatter(entry) {
        // partial formatters only need a to function and not a from function
        return typeof entry === "object" && typeof entry.to === "function";
    }
    function removeElement(el) {
        el.parentElement.removeChild(el);
    }
    function isSet(value) {
        return value !== null && value !== undefined;
    }
    // Bindable version
    function preventDefault(e) {
        e.preventDefault();
    }
    // Removes duplicates from an array.
    function unique(array) {
        return array.filter(function (a) {
            return !this[a] ? (this[a] = true) : false;
        }, {});
    }
    // Round a value to the closest 'to'.
    function closest(value, to) {
        return Math.round(value / to) * to;
    }
    // Current position of an element relative to the document.
    function offset(elem, orientation) {
        var rect = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var docElem = doc.documentElement;
        var pageOffset = getPageOffset(doc);
        // getBoundingClientRect contains left scroll in Chrome on Android.
        // I haven't found a feature detection that proves this. Worst case
        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
            pageOffset.x = 0;
        }
        return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
    }
    // Checks whether a value is numerical.
    function isNumeric(a) {
        return typeof a === "number" && !isNaN(a) && isFinite(a);
    }
    // Sets a class and removes it after [duration] ms.
    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function () {
                removeClass(element, className);
            }, duration);
        }
    }
    // Limits a value to 0 - 100
    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }
    // Wraps a variable as an array, if it isn't one yet.
    // Note that an input array is returned by reference!
    function asArray(a) {
        return Array.isArray(a) ? a : [a];
    }
    // Counts decimals
    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }
    // http://youmightnotneedjquery.com/#add_class
    function addClass(el, className) {
        if (el.classList && !/\s/.test(className)) {
            el.classList.add(className);
        }
        else {
            el.className += " " + className;
        }
    }
    // http://youmightnotneedjquery.com/#remove_class
    function removeClass(el, className) {
        if (el.classList && !/\s/.test(className)) {
            el.classList.remove(className);
        }
        else {
            el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
        }
    }
    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
    function hasClass(el, className) {
        return el.classList ? el.classList.contains(className) : new RegExp("\\b" + className + "\\b").test(el.className);
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
    function getPageOffset(doc) {
        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
        var x = supportPageOffset
            ? window.pageXOffset
            : isCSS1Compat
                ? doc.documentElement.scrollLeft
                : doc.body.scrollLeft;
        var y = supportPageOffset
            ? window.pageYOffset
            : isCSS1Compat
                ? doc.documentElement.scrollTop
                : doc.body.scrollTop;
        return {
            x: x,
            y: y,
        };
    }
    // we provide a function to compute constants instead
    // of accessing window.* as soon as the module needs it
    // so that we do not compute anything if not needed
    function getActions() {
        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        return window.navigator.pointerEnabled
            ? {
                start: "pointerdown",
                move: "pointermove",
                end: "pointerup",
            }
            : window.navigator.msPointerEnabled
                ? {
                    start: "MSPointerDown",
                    move: "MSPointerMove",
                    end: "MSPointerUp",
                }
                : {
                    start: "mousedown touchstart",
                    move: "mousemove touchmove",
                    end: "mouseup touchend",
                };
    }
    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    // Issue #785
    function getSupportsPassive() {
        var supportsPassive = false;
        /* eslint-disable */
        try {
            var opts = Object.defineProperty({}, "passive", {
                get: function () {
                    supportsPassive = true;
                },
            });
            // @ts-ignore
            window.addEventListener("test", null, opts);
        }
        catch (e) { }
        /* eslint-enable */
        return supportsPassive;
    }
    function getSupportsTouchActionNone() {
        return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
    }
    //endregion
    //region Range Calculation
    // Determine the size of a sub-range in relation to a full range.
    function subRangeRatio(pa, pb) {
        return 100 / (pb - pa);
    }
    // (percentage) How many percent is this value of this range?
    function fromPercentage(range, value, startRange) {
        return (value * 100) / (range[startRange + 1] - range[startRange]);
    }
    // (percentage) Where is this value on this range?
    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);
    }
    // (value) How much is this percentage on this range?
    function isPercentage(range, value) {
        return (value * (range[1] - range[0])) / 100 + range[0];
    }
    function getJ(value, arr) {
        var j = 1;
        while (value >= arr[j]) {
            j += 1;
        }
        return j;
    }
    // (percentage) Input a value, find where, on a scale of 0-100, it applies.
    function toStepping(xVal, xPct, value) {
        if (value >= xVal.slice(-1)[0]) {
            return 100;
        }
        var j = getJ(value, xVal);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);
    }
    // (value) Input a percentage, find where it is on the specified range.
    function fromStepping(xVal, xPct, value) {
        // There is no range group that fits 100
        if (value >= 100) {
            return xVal.slice(-1)[0];
        }
        var j = getJ(value, xPct);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
    }
    // (percentage) Get the step that applies at a certain value.
    function getStep(xPct, xSteps, snap, value) {
        if (value === 100) {
            return value;
        }
        var j = getJ(value, xPct);
        var a = xPct[j - 1];
        var b = xPct[j];
        // If 'snap' is set, steps are used as fixed points on the slider.
        if (snap) {
            // Find the closest position, a or b.
            if (value - a > (b - a) / 2) {
                return b;
            }
            return a;
        }
        if (!xSteps[j - 1]) {
            return value;
        }
        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
    }
    //endregion
    //region Spectrum
    var Spectrum = /** @class */ (function () {
        function Spectrum(entry, snap, singleStep) {
            this.xPct = [];
            this.xVal = [];
            this.xSteps = [];
            this.xNumSteps = [];
            this.xHighestCompleteStep = [];
            this.xSteps = [singleStep || false];
            this.xNumSteps = [false];
            this.snap = snap;
            var index;
            var ordered = [];
            // Map the object keys to an array.
            Object.keys(entry).forEach(function (index) {
                ordered.push([asArray(entry[index]), index]);
            });
            // Sort all entries by value (numeric sort).
            ordered.sort(function (a, b) {
                return a[0][0] - b[0][0];
            });
            // Convert all entries to subranges.
            for (index = 0; index < ordered.length; index++) {
                this.handleEntryPoint(ordered[index][1], ordered[index][0]);
            }
            // Store the actual step values.
            // xSteps is sorted in the same order as xPct and xVal.
            this.xNumSteps = this.xSteps.slice(0);
            // Convert all numeric steps to the percentage of the subrange they represent.
            for (index = 0; index < this.xNumSteps.length; index++) {
                this.handleStepPoint(index, this.xNumSteps[index]);
            }
        }
        Spectrum.prototype.getDistance = function (value) {
            var distances = [];
            for (var index = 0; index < this.xNumSteps.length - 1; index++) {
                distances[index] = fromPercentage(this.xVal, value, index);
            }
            return distances;
        };
        // Calculate the percentual distance over the whole scale of ranges.
        // direction: 0 = backwards / 1 = forwards
        Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {
            var xPct_index = 0;
            // Calculate range where to start calculation
            if (value < this.xPct[this.xPct.length - 1]) {
                while (value > this.xPct[xPct_index + 1]) {
                    xPct_index++;
                }
            }
            else if (value === this.xPct[this.xPct.length - 1]) {
                xPct_index = this.xPct.length - 2;
            }
            // If looking backwards and the value is exactly at a range separator then look one range further
            if (!direction && value === this.xPct[xPct_index + 1]) {
                xPct_index++;
            }
            if (distances === null) {
                distances = [];
            }
            var start_factor;
            var rest_factor = 1;
            var rest_rel_distance = distances[xPct_index];
            var range_pct = 0;
            var rel_range_distance = 0;
            var abs_distance_counter = 0;
            var range_counter = 0;
            // Calculate what part of the start range the value is
            if (direction) {
                start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            }
            else {
                start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            }
            // Do until the complete distance across ranges is calculated
            while (rest_rel_distance > 0) {
                // Calculate the percentage of total range
                range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter];
                // Detect if the margin, padding or limit is larger then the current range and calculate
                if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {
                    // If larger then take the percentual distance of the whole range
                    rel_range_distance = range_pct * start_factor;
                    // Rest factor of relative percentual distance still to be calculated
                    rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter];
                    // Set start factor to 1 as for next range it does not apply.
                    start_factor = 1;
                }
                else {
                    // If smaller or equal then take the percentual distance of the calculate percentual part of that range
                    rel_range_distance = ((distances[xPct_index + range_counter] * range_pct) / 100) * rest_factor;
                    // No rest left as the rest fits in current range
                    rest_factor = 0;
                }
                if (direction) {
                    abs_distance_counter = abs_distance_counter - rel_range_distance;
                    // Limit range to first range when distance becomes outside of minimum range
                    if (this.xPct.length + range_counter >= 1) {
                        range_counter--;
                    }
                }
                else {
                    abs_distance_counter = abs_distance_counter + rel_range_distance;
                    // Limit range to last range when distance becomes outside of maximum range
                    if (this.xPct.length - range_counter >= 1) {
                        range_counter++;
                    }
                }
                // Rest of relative percentual distance still to be calculated
                rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;
            }
            return value + abs_distance_counter;
        };
        Spectrum.prototype.toStepping = function (value) {
            value = toStepping(this.xVal, this.xPct, value);
            return value;
        };
        Spectrum.prototype.fromStepping = function (value) {
            return fromStepping(this.xVal, this.xPct, value);
        };
        Spectrum.prototype.getStep = function (value) {
            value = getStep(this.xPct, this.xSteps, this.snap, value);
            return value;
        };
        Spectrum.prototype.getDefaultStep = function (value, isDown, size) {
            var j = getJ(value, this.xPct);
            // When at the top or stepping down, look at the previous sub-range
            if (value === 100 || (isDown && value === this.xPct[j - 1])) {
                j = Math.max(j - 1, 1);
            }
            return (this.xVal[j] - this.xVal[j - 1]) / size;
        };
        Spectrum.prototype.getNearbySteps = function (value) {
            var j = getJ(value, this.xPct);
            return {
                stepBefore: {
                    startValue: this.xVal[j - 2],
                    step: this.xNumSteps[j - 2],
                    highestStep: this.xHighestCompleteStep[j - 2],
                },
                thisStep: {
                    startValue: this.xVal[j - 1],
                    step: this.xNumSteps[j - 1],
                    highestStep: this.xHighestCompleteStep[j - 1],
                },
                stepAfter: {
                    startValue: this.xVal[j],
                    step: this.xNumSteps[j],
                    highestStep: this.xHighestCompleteStep[j],
                },
            };
        };
        Spectrum.prototype.countStepDecimals = function () {
            var stepDecimals = this.xNumSteps.map(countDecimals);
            return Math.max.apply(null, stepDecimals);
        };
        Spectrum.prototype.hasNoSize = function () {
            return this.xVal[0] === this.xVal[this.xVal.length - 1];
        };
        // Outside testing
        Spectrum.prototype.convert = function (value) {
            return this.getStep(this.toStepping(value));
        };
        Spectrum.prototype.handleEntryPoint = function (index, value) {
            var percentage;
            // Covert min/max syntax to 0 and 100.
            if (index === "min") {
                percentage = 0;
            }
            else if (index === "max") {
                percentage = 100;
            }
            else {
                percentage = parseFloat(index);
            }
            // Check for correct input.
            if (!isNumeric(percentage) || !isNumeric(value[0])) {
                throw new Error("noUiSlider: 'range' value isn't numeric.");
            }
            // Store values.
            this.xPct.push(percentage);
            this.xVal.push(value[0]);
            var value1 = Number(value[1]);
            // NaN will evaluate to false too, but to keep
            // logging clear, set step explicitly. Make sure
            // not to override the 'step' setting with false.
            if (!percentage) {
                if (!isNaN(value1)) {
                    this.xSteps[0] = value1;
                }
            }
            else {
                this.xSteps.push(isNaN(value1) ? false : value1);
            }
            this.xHighestCompleteStep.push(0);
        };
        Spectrum.prototype.handleStepPoint = function (i, n) {
            // Ignore 'false' stepping.
            if (!n) {
                return;
            }
            // Step over zero-length ranges (#948);
            if (this.xVal[i] === this.xVal[i + 1]) {
                this.xSteps[i] = this.xHighestCompleteStep[i] = this.xVal[i];
                return;
            }
            // Factor to range ratio
            this.xSteps[i] =
                fromPercentage([this.xVal[i], this.xVal[i + 1]], n, 0) / subRangeRatio(this.xPct[i], this.xPct[i + 1]);
            var totalSteps = (this.xVal[i + 1] - this.xVal[i]) / this.xNumSteps[i];
            var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
            var step = this.xVal[i] + this.xNumSteps[i] * highestStep;
            this.xHighestCompleteStep[i] = step;
        };
        return Spectrum;
    }());
    //endregion
    //region Options
    /*	Every input option is tested and parsed. This will prevent
      endless validation in internal methods. These tests are
      structured with an item for every option available. An
      option can be marked as required by setting the 'r' flag.
      The testing function is provided with three arguments:
          - The provided value for the option;
          - A reference to the options object;
          - The name for the option;

      The testing function returns false when an error is detected,
      or true when everything is OK. It can also modify the option
      object, to make sure all values can be correctly looped elsewhere. */
    //region Defaults
    var defaultFormatter = {
        to: function (value) {
            return value === undefined ? "" : value.toFixed(2);
        },
        from: Number,
    };
    var cssClasses = {
        target: "target",
        base: "base",
        origin: "origin",
        handle: "handle",
        handleLower: "handle-lower",
        handleUpper: "handle-upper",
        touchArea: "touch-area",
        horizontal: "horizontal",
        vertical: "vertical",
        background: "background",
        connect: "connect",
        connects: "connects",
        ltr: "ltr",
        rtl: "rtl",
        textDirectionLtr: "txt-dir-ltr",
        textDirectionRtl: "txt-dir-rtl",
        draggable: "draggable",
        drag: "state-drag",
        tap: "state-tap",
        active: "active",
        tooltip: "tooltip",
        pips: "pips",
        pipsHorizontal: "pips-horizontal",
        pipsVertical: "pips-vertical",
        marker: "marker",
        markerHorizontal: "marker-horizontal",
        markerVertical: "marker-vertical",
        markerNormal: "marker-normal",
        markerLarge: "marker-large",
        markerSub: "marker-sub",
        value: "value",
        valueHorizontal: "value-horizontal",
        valueVertical: "value-vertical",
        valueNormal: "value-normal",
        valueLarge: "value-large",
        valueSub: "value-sub",
    };
    // Namespaces of internal event listeners
    var INTERNAL_EVENT_NS = {
        tooltips: ".__tooltips",
        aria: ".__aria",
    };
    //endregion
    function testStep(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'step' is not numeric.");
        }
        // The step option can still be used to set stepping
        // for linear sliders. Overwritten if set in 'range'.
        parsed.singleStep = entry;
    }
    function testKeyboardPageMultiplier(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");
        }
        parsed.keyboardPageMultiplier = entry;
    }
    function testKeyboardMultiplier(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");
        }
        parsed.keyboardMultiplier = entry;
    }
    function testKeyboardDefaultStep(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");
        }
        parsed.keyboardDefaultStep = entry;
    }
    function testRange(parsed, entry) {
        // Filter incorrect input.
        if (typeof entry !== "object" || Array.isArray(entry)) {
            throw new Error("noUiSlider: 'range' is not an object.");
        }
        // Catch missing start or end.
        if (entry.min === undefined || entry.max === undefined) {
            throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
        }
        parsed.spectrum = new Spectrum(entry, parsed.snap || false, parsed.singleStep);
    }
    function testStart(parsed, entry) {
        entry = asArray(entry);
        // Validate input. Values aren't tested, as the public .val method
        // will always provide a valid location.
        if (!Array.isArray(entry) || !entry.length) {
            throw new Error("noUiSlider: 'start' option is incorrect.");
        }
        // Store the number of handles.
        parsed.handles = entry.length;
        // When the slider is initialized, the .val method will
        // be called with the start options.
        parsed.start = entry;
    }
    function testSnap(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'snap' option must be a boolean.");
        }
        // Enforce 100% stepping within subranges.
        parsed.snap = entry;
    }
    function testAnimate(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'animate' option must be a boolean.");
        }
        // Enforce 100% stepping within subranges.
        parsed.animate = entry;
    }
    function testAnimationDuration(parsed, entry) {
        if (typeof entry !== "number") {
            throw new Error("noUiSlider: 'animationDuration' option must be a number.");
        }
        parsed.animationDuration = entry;
    }
    function testConnect(parsed, entry) {
        var connect = [false];
        var i;
        // Map legacy options
        if (entry === "lower") {
            entry = [true, false];
        }
        else if (entry === "upper") {
            entry = [false, true];
        }
        // Handle boolean options
        if (entry === true || entry === false) {
            for (i = 1; i < parsed.handles; i++) {
                connect.push(entry);
            }
            connect.push(false);
        }
        // Reject invalid input
        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
            throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
        }
        else {
            connect = entry;
        }
        parsed.connect = connect;
    }
    function testOrientation(parsed, entry) {
        // Set orientation to an a numerical value for easy
        // array selection.
        switch (entry) {
            case "horizontal":
                parsed.ort = 0;
                break;
            case "vertical":
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider: 'orientation' option is invalid.");
        }
    }
    function testMargin(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'margin' option must be numeric.");
        }
        // Issue #582
        if (entry === 0) {
            return;
        }
        parsed.margin = parsed.spectrum.getDistance(entry);
    }
    function testLimit(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'limit' option must be numeric.");
        }
        parsed.limit = parsed.spectrum.getDistance(entry);
        if (!parsed.limit || parsed.handles < 2) {
            throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.");
        }
    }
    function testPadding(parsed, entry) {
        var index;
        if (!isNumeric(entry) && !Array.isArray(entry)) {
            throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        }
        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
            throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        }
        if (entry === 0) {
            return;
        }
        if (!Array.isArray(entry)) {
            entry = [entry, entry];
        }
        // 'getDistance' returns false for invalid values.
        parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];
        for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {
            // last "range" can't contain step size as it is purely an endpoint.
            if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {
                throw new Error("noUiSlider: 'padding' option must be a positive number(s).");
            }
        }
        var totalPadding = entry[0] + entry[1];
        var firstValue = parsed.spectrum.xVal[0];
        var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];
        if (totalPadding / (lastValue - firstValue) > 1) {
            throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.");
        }
    }
    function testDirection(parsed, entry) {
        // Set direction as a numerical value for easy parsing.
        // Invert connection for RTL sliders, so that the proper
        // handles get the connect/background classes.
        switch (entry) {
            case "ltr":
                parsed.dir = 0;
                break;
            case "rtl":
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider: 'direction' option was not recognized.");
        }
    }
    function testBehaviour(parsed, entry) {
        // Make sure the input is a string.
        if (typeof entry !== "string") {
            throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
        }
        // Check if the string contains any keywords.
        // None are required.
        var tap = entry.indexOf("tap") >= 0;
        var drag = entry.indexOf("drag") >= 0;
        var fixed = entry.indexOf("fixed") >= 0;
        var snap = entry.indexOf("snap") >= 0;
        var hover = entry.indexOf("hover") >= 0;
        var unconstrained = entry.indexOf("unconstrained") >= 0;
        var dragAll = entry.indexOf("drag-all") >= 0;
        var smoothSteps = entry.indexOf("smooth-steps") >= 0;
        if (fixed) {
            if (parsed.handles !== 2) {
                throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");
            }
            // Use margin to enforce fixed state
            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }
        if (unconstrained && (parsed.margin || parsed.limit)) {
            throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");
        }
        parsed.events = {
            tap: tap || snap,
            drag: drag,
            dragAll: dragAll,
            smoothSteps: smoothSteps,
            fixed: fixed,
            snap: snap,
            hover: hover,
            unconstrained: unconstrained,
        };
    }
    function testTooltips(parsed, entry) {
        if (entry === false) {
            return;
        }
        if (entry === true || isValidPartialFormatter(entry)) {
            parsed.tooltips = [];
            for (var i = 0; i < parsed.handles; i++) {
                parsed.tooltips.push(entry);
            }
        }
        else {
            entry = asArray(entry);
            if (entry.length !== parsed.handles) {
                throw new Error("noUiSlider: must pass a formatter for all handles.");
            }
            entry.forEach(function (formatter) {
                if (typeof formatter !== "boolean" && !isValidPartialFormatter(formatter)) {
                    throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.");
                }
            });
            parsed.tooltips = entry;
        }
    }
    function testHandleAttributes(parsed, entry) {
        if (entry.length !== parsed.handles) {
            throw new Error("noUiSlider: must pass a attributes for all handles.");
        }
        parsed.handleAttributes = entry;
    }
    function testAriaFormat(parsed, entry) {
        if (!isValidPartialFormatter(entry)) {
            throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");
        }
        parsed.ariaFormat = entry;
    }
    function testFormat(parsed, entry) {
        if (!isValidFormatter(entry)) {
            throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");
        }
        parsed.format = entry;
    }
    function testKeyboardSupport(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");
        }
        parsed.keyboardSupport = entry;
    }
    function testDocumentElement(parsed, entry) {
        // This is an advanced option. Passed values are used without validation.
        parsed.documentElement = entry;
    }
    function testCssPrefix(parsed, entry) {
        if (typeof entry !== "string" && entry !== false) {
            throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");
        }
        parsed.cssPrefix = entry;
    }
    function testCssClasses(parsed, entry) {
        if (typeof entry !== "object") {
            throw new Error("noUiSlider: 'cssClasses' must be an object.");
        }
        if (typeof parsed.cssPrefix === "string") {
            parsed.cssClasses = {};
            Object.keys(entry).forEach(function (key) {
                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            });
        }
        else {
            parsed.cssClasses = entry;
        }
    }
    // Test all developer settings and parse to assumption-safe values.
    function testOptions(options) {
        // To prove a fix for #537, freeze options here.
        // If the object is modified, an error will be thrown.
        // Object.freeze(options);
        var parsed = {
            margin: null,
            limit: null,
            padding: null,
            animate: true,
            animationDuration: 300,
            ariaFormat: defaultFormatter,
            format: defaultFormatter,
        };
        // Tests are executed in the order they are presented here.
        var tests = {
            step: { r: false, t: testStep },
            keyboardPageMultiplier: { r: false, t: testKeyboardPageMultiplier },
            keyboardMultiplier: { r: false, t: testKeyboardMultiplier },
            keyboardDefaultStep: { r: false, t: testKeyboardDefaultStep },
            start: { r: true, t: testStart },
            connect: { r: true, t: testConnect },
            direction: { r: true, t: testDirection },
            snap: { r: false, t: testSnap },
            animate: { r: false, t: testAnimate },
            animationDuration: { r: false, t: testAnimationDuration },
            range: { r: true, t: testRange },
            orientation: { r: false, t: testOrientation },
            margin: { r: false, t: testMargin },
            limit: { r: false, t: testLimit },
            padding: { r: false, t: testPadding },
            behaviour: { r: true, t: testBehaviour },
            ariaFormat: { r: false, t: testAriaFormat },
            format: { r: false, t: testFormat },
            tooltips: { r: false, t: testTooltips },
            keyboardSupport: { r: true, t: testKeyboardSupport },
            documentElement: { r: false, t: testDocumentElement },
            cssPrefix: { r: true, t: testCssPrefix },
            cssClasses: { r: true, t: testCssClasses },
            handleAttributes: { r: false, t: testHandleAttributes },
        };
        var defaults = {
            connect: false,
            direction: "ltr",
            behaviour: "tap",
            orientation: "horizontal",
            keyboardSupport: true,
            cssPrefix: "noUi-",
            cssClasses: cssClasses,
            keyboardPageMultiplier: 5,
            keyboardMultiplier: 1,
            keyboardDefaultStep: 10,
        };
        // AriaFormat defaults to regular format, if any.
        if (options.format && !options.ariaFormat) {
            options.ariaFormat = options.format;
        }
        // Run all options through a testing mechanism to ensure correct
        // input. It should be noted that options might get modified to
        // be handled properly. E.g. wrapping integers in arrays.
        Object.keys(tests).forEach(function (name) {
            // If the option isn't set, but it is required, throw an error.
            if (!isSet(options[name]) && defaults[name] === undefined) {
                if (tests[name].r) {
                    throw new Error("noUiSlider: '" + name + "' is required.");
                }
                return;
            }
            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
        });
        // Forward pips options
        parsed.pips = options.pips;
        // All recent browsers accept unprefixed transform.
        // We need -ms- for IE9 and -webkit- for older Android;
        // Assume use of -webkit- if unprefixed and -ms- are not supported.
        // https://caniuse.com/#feat=transforms2d
        var d = document.createElement("div");
        var msPrefix = d.style.msTransform !== undefined;
        var noPrefix = d.style.transform !== undefined;
        parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";
        // Pips don't move, so we can place them using left/top.
        var styles = [
            ["left", "top"],
            ["right", "bottom"],
        ];
        parsed.style = styles[parsed.dir][parsed.ort];
        return parsed;
    }
    //endregion
    function scope(target, options, originalOptions) {
        var actions = getActions();
        var supportsTouchActionNone = getSupportsTouchActionNone();
        var supportsPassive = supportsTouchActionNone && getSupportsPassive();
        // All variables local to 'scope' are prefixed with 'scope_'
        // Slider DOM Nodes
        var scope_Target = target;
        var scope_Base;
        var scope_Handles;
        var scope_Connects;
        var scope_Pips;
        var scope_Tooltips;
        // Slider state values
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Locations = [];
        var scope_HandleNumbers = [];
        var scope_ActiveHandlesCount = 0;
        var scope_Events = {};
        // Document Nodes
        var scope_Document = target.ownerDocument;
        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
        var scope_Body = scope_Document.body;
        // For horizontal sliders in standard ltr documents,
        // make .noUi-origin overflow to the left so the document doesn't scroll.
        var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;
        // Creates a node, adds it to target, returns the new node.
        function addNodeTo(addTarget, className) {
            var div = scope_Document.createElement("div");
            if (className) {
                addClass(div, className);
            }
            addTarget.appendChild(div);
            return div;
        }
        // Append a origin to the base
        function addOrigin(base, handleNumber) {
            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);
            addNodeTo(handle, options.cssClasses.touchArea);
            handle.setAttribute("data-handle", String(handleNumber));
            if (options.keyboardSupport) {
                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
                // 0 = focusable and reachable
                handle.setAttribute("tabindex", "0");
                handle.addEventListener("keydown", function (event) {
                    return eventKeydown(event, handleNumber);
                });
            }
            if (options.handleAttributes !== undefined) {
                var attributes_1 = options.handleAttributes[handleNumber];
                Object.keys(attributes_1).forEach(function (attribute) {
                    handle.setAttribute(attribute, attributes_1[attribute]);
                });
            }
            handle.setAttribute("role", "slider");
            handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");
            if (handleNumber === 0) {
                addClass(handle, options.cssClasses.handleLower);
            }
            else if (handleNumber === options.handles - 1) {
                addClass(handle, options.cssClasses.handleUpper);
            }
            origin.handle = handle;
            return origin;
        }
        // Insert nodes for connect elements
        function addConnect(base, add) {
            if (!add) {
                return false;
            }
            return addNodeTo(base, options.cssClasses.connect);
        }
        // Add handles to the slider base.
        function addElements(connectOptions, base) {
            var connectBase = addNodeTo(base, options.cssClasses.connects);
            scope_Handles = [];
            scope_Connects = [];
            scope_Connects.push(addConnect(connectBase, connectOptions[0]));
            // [::::O====O====O====]
            // connectOptions = [0, 1, 1, 1]
            for (var i = 0; i < options.handles; i++) {
                // Keep a list of all added handles.
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
            }
        }
        // Initialize a single slider.
        function addSlider(addTarget) {
            // Apply classes and data to the target.
            addClass(addTarget, options.cssClasses.target);
            if (options.dir === 0) {
                addClass(addTarget, options.cssClasses.ltr);
            }
            else {
                addClass(addTarget, options.cssClasses.rtl);
            }
            if (options.ort === 0) {
                addClass(addTarget, options.cssClasses.horizontal);
            }
            else {
                addClass(addTarget, options.cssClasses.vertical);
            }
            var textDirection = getComputedStyle(addTarget).direction;
            if (textDirection === "rtl") {
                addClass(addTarget, options.cssClasses.textDirectionRtl);
            }
            else {
                addClass(addTarget, options.cssClasses.textDirectionLtr);
            }
            return addNodeTo(addTarget, options.cssClasses.base);
        }
        function addTooltip(handle, handleNumber) {
            if (!options.tooltips || !options.tooltips[handleNumber]) {
                return false;
            }
            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }
        function isSliderDisabled() {
            return scope_Target.hasAttribute("disabled");
        }
        // Disable the slider dragging if any handle is disabled
        function isHandleDisabled(handleNumber) {
            var handleOrigin = scope_Handles[handleNumber];
            return handleOrigin.hasAttribute("disabled");
        }
        function disable(handleNumber) {
            if (handleNumber !== null && handleNumber !== undefined) {
                scope_Handles[handleNumber].setAttribute("disabled", "");
                scope_Handles[handleNumber].handle.removeAttribute("tabindex");
            }
            else {
                scope_Target.setAttribute("disabled", "");
                scope_Handles.forEach(function (handle) {
                    handle.handle.removeAttribute("tabindex");
                });
            }
        }
        function enable(handleNumber) {
            if (handleNumber !== null && handleNumber !== undefined) {
                scope_Handles[handleNumber].removeAttribute("disabled");
                scope_Handles[handleNumber].handle.setAttribute("tabindex", "0");
            }
            else {
                scope_Target.removeAttribute("disabled");
                scope_Handles.forEach(function (handle) {
                    handle.removeAttribute("disabled");
                    handle.handle.setAttribute("tabindex", "0");
                });
            }
        }
        function removeTooltips() {
            if (scope_Tooltips) {
                removeEvent("update" + INTERNAL_EVENT_NS.tooltips);
                scope_Tooltips.forEach(function (tooltip) {
                    if (tooltip) {
                        removeElement(tooltip);
                    }
                });
                scope_Tooltips = null;
            }
        }
        // The tooltips option is a shorthand for using the 'update' event.
        function tooltips() {
            removeTooltips();
            // Tooltips are added with options.tooltips in original order.
            scope_Tooltips = scope_Handles.map(addTooltip);
            bindEvent("update" + INTERNAL_EVENT_NS.tooltips, function (values, handleNumber, unencoded) {
                if (!scope_Tooltips || !options.tooltips) {
                    return;
                }
                if (scope_Tooltips[handleNumber] === false) {
                    return;
                }
                var formattedValue = values[handleNumber];
                if (options.tooltips[handleNumber] !== true) {
                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                }
                scope_Tooltips[handleNumber].innerHTML = formattedValue;
            });
        }
        function aria() {
            removeEvent("update" + INTERNAL_EVENT_NS.aria);
            bindEvent("update" + INTERNAL_EVENT_NS.aria, function (values, handleNumber, unencoded, tap, positions) {
                // Update Aria Values for all handles, as a change in one changes min and max values for the next.
                scope_HandleNumbers.forEach(function (index) {
                    var handle = scope_Handles[index];
                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);
                    var now = positions[index];
                    // Formatted value for display
                    var text = String(options.ariaFormat.to(unencoded[index]));
                    // Map to slider range values
                    min = scope_Spectrum.fromStepping(min).toFixed(1);
                    max = scope_Spectrum.fromStepping(max).toFixed(1);
                    now = scope_Spectrum.fromStepping(now).toFixed(1);
                    handle.children[0].setAttribute("aria-valuemin", min);
                    handle.children[0].setAttribute("aria-valuemax", max);
                    handle.children[0].setAttribute("aria-valuenow", now);
                    handle.children[0].setAttribute("aria-valuetext", text);
                });
            });
        }
        function getGroup(pips) {
            // Use the range.
            if (pips.mode === exports.PipsMode.Range || pips.mode === exports.PipsMode.Steps) {
                return scope_Spectrum.xVal;
            }
            if (pips.mode === exports.PipsMode.Count) {
                if (pips.values < 2) {
                    throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");
                }
                // Divide 0 - 100 in 'count' parts.
                var interval = pips.values - 1;
                var spread = 100 / interval;
                var values = [];
                // List these parts and have them handled as 'positions'.
                while (interval--) {
                    values[interval] = interval * spread;
                }
                values.push(100);
                return mapToRange(values, pips.stepped);
            }
            if (pips.mode === exports.PipsMode.Positions) {
                // Map all percentages to on-range values.
                return mapToRange(pips.values, pips.stepped);
            }
            if (pips.mode === exports.PipsMode.Values) {
                // If the value must be stepped, it needs to be converted to a percentage first.
                if (pips.stepped) {
                    return pips.values.map(function (value) {
                        // Convert to percentage, apply step, return to value.
                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                    });
                }
                // Otherwise, we can simply use the values.
                return pips.values;
            }
            return []; // pips.mode = never
        }
        function mapToRange(values, stepped) {
            return values.map(function (value) {
                return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
            });
        }
        function generateSpread(pips) {
            function safeIncrement(value, increment) {
                // Avoid floating point variance by dropping the smallest decimal places.
                return Number((value + increment).toFixed(7));
            }
            var group = getGroup(pips);
            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;
            // Create a copy of the group, sort it and filter away all duplicates.
            group = unique(group.slice().sort(function (a, b) {
                return a - b;
            }));
            // Make sure the range starts with the first element.
            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }
            // Likewise for the last one.
            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }
            group.forEach(function (current, index) {
                // Get the current step and the lower + upper positions.
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepSize;
                var isSteps = pips.mode === exports.PipsMode.Steps;
                // When using 'steps' mode, use the provided steps.
                // Otherwise, we'll step on to the next subrange.
                if (isSteps) {
                    step = scope_Spectrum.xNumSteps[index];
                }
                // Default to a 'full' step.
                if (!step) {
                    step = high - low;
                }
                // If high is undefined we are at the last subrange. Make sure it iterates once (#1088)
                if (high === undefined) {
                    high = low;
                }
                // Make sure step isn't 0, which would cause an infinite loop (#654)
                step = Math.max(step, 0.0000001);
                // Find all steps in the subrange.
                for (i = low; i <= high; i = safeIncrement(i, step)) {
                    // Get the percentage value for the current step,
                    // calculate the size for the subrange.
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;
                    steps = pctDifference / (pips.density || 1);
                    realSteps = Math.round(steps);
                    // This ratio represents the amount of percentage-space a point indicates.
                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.
                    // Round the percentage offset to an even number, then divide by two
                    // to spread the offset on both sides of the range.
                    stepSize = pctDifference / realSteps;
                    // Divide all points evenly, adding the correct number to this subrange.
                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                    for (q = 1; q <= realSteps; q += 1) {
                        // The ratio between the rounded value and the actual size might be ~1% off.
                        // Correct the percentage offset by the number of points
                        // per subrange. density = 1 will result in 100 points on the
                        // full range, 2 for 50, 4 for 25, etc.
                        pctPos = prevPct + q * stepSize;
                        indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];
                    }
                    // Determine the point type.
                    type = group.indexOf(i) > -1 ? exports.PipsType.LargeValue : isSteps ? exports.PipsType.SmallValue : exports.PipsType.NoValue;
                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                    if (!index && ignoreFirst && i !== high) {
                        type = 0;
                    }
                    if (!(i === high && ignoreLast)) {
                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                        indexes[newPct.toFixed(5)] = [i, type];
                    }
                    // Update the percentage count.
                    prevPct = newPct;
                }
            });
            return indexes;
        }
        function addMarking(spread, filterFunc, formatter) {
            var _a, _b;
            var element = scope_Document.createElement("div");
            var valueSizeClasses = (_a = {},
                _a[exports.PipsType.None] = "",
                _a[exports.PipsType.NoValue] = options.cssClasses.valueNormal,
                _a[exports.PipsType.LargeValue] = options.cssClasses.valueLarge,
                _a[exports.PipsType.SmallValue] = options.cssClasses.valueSub,
                _a);
            var markerSizeClasses = (_b = {},
                _b[exports.PipsType.None] = "",
                _b[exports.PipsType.NoValue] = options.cssClasses.markerNormal,
                _b[exports.PipsType.LargeValue] = options.cssClasses.markerLarge,
                _b[exports.PipsType.SmallValue] = options.cssClasses.markerSub,
                _b);
            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];
            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);
            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;
                return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
            }
            function addSpread(offset, value, type) {
                // Apply the filter function, if it is set.
                type = filterFunc ? filterFunc(value, type) : type;
                if (type === exports.PipsType.None) {
                    return;
                }
                // Add a marker for every point
                var node = addNodeTo(element, false);
                node.className = getClasses(type, options.cssClasses.marker);
                node.style[options.style] = offset + "%";
                // Values are only appended for points marked '1' or '2'.
                if (type > exports.PipsType.NoValue) {
                    node = addNodeTo(element, false);
                    node.className = getClasses(type, options.cssClasses.value);
                    node.setAttribute("data-value", String(value));
                    node.style[options.style] = offset + "%";
                    node.innerHTML = String(formatter.to(value));
                }
            }
            // Append all points.
            Object.keys(spread).forEach(function (offset) {
                addSpread(offset, spread[offset][0], spread[offset][1]);
            });
            return element;
        }
        function removePips() {
            if (scope_Pips) {
                removeElement(scope_Pips);
                scope_Pips = null;
            }
        }
        function pips(pips) {
            // Fix #669
            removePips();
            var spread = generateSpread(pips);
            var filter = pips.filter;
            var format = pips.format || {
                to: function (value) {
                    return String(Math.round(value));
                },
            };
            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));
            return scope_Pips;
        }
        // Shorthand for base dimensions.
        function baseSize() {
            var rect = scope_Base.getBoundingClientRect();
            var alt = ("offset" + ["Width", "Height"][options.ort]);
            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
        }
        // Handler for attaching events trough a proxy.
        function attachEvent(events, element, callback, data) {
            // This function can be used to 'filter' events to the slider.
            // element is a node, not a nodeList
            var method = function (event) {
                var e = fixEvent(event, data.pageOffset, data.target || element);
                // fixEvent returns false if this event has a different target
                // when handling (multi-) touch events;
                if (!e) {
                    return false;
                }
                // doNotReject is passed by all end events to make sure released touches
                // are not rejected, leaving the slider "stuck" to the cursor;
                if (isSliderDisabled() && !data.doNotReject) {
                    return false;
                }
                // Stop if an active 'tap' transition is taking place.
                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
                    return false;
                }
                // Ignore right or middle clicks on start #454
                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                    return false;
                }
                // Ignore right or middle clicks on start #454
                if (data.hover && e.buttons) {
                    return false;
                }
                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
                // touch-action: manipulation, but that allows panning, which breaks
                // sliders after zooming/on non-responsive pages.
                // See: https://bugs.webkit.org/show_bug.cgi?id=133112
                if (!supportsPassive) {
                    e.preventDefault();
                }
                e.calcPoint = e.points[options.ort];
                // Call the event handler with the event [ and additional data ].
                callback(e, data);
                return;
            };
            var methods = [];
            // Bind a closure on the target for every event type.
            events.split(" ").forEach(function (eventName) {
                element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);
                methods.push([eventName, method]);
            });
            return methods;
        }
        // Provide a clean event with standardized offset values.
        function fixEvent(e, pageOffset, eventTarget) {
            // Filter the event to register the type, which can be
            // touch, mouse or pointer. Offset changes need to be
            // made on an event specific basis.
            var touch = e.type.indexOf("touch") === 0;
            var mouse = e.type.indexOf("mouse") === 0;
            var pointer = e.type.indexOf("pointer") === 0;
            var x = 0;
            var y = 0;
            // IE10 implemented pointer events with a prefix;
            if (e.type.indexOf("MSPointer") === 0) {
                pointer = true;
            }
            // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with
            // the slider. They appear to be of type MouseEvent, yet they don't have usual properties set. Ignore
            // events that have no touches or buttons associated with them. (#1057, #1079, #1095)
            if (e.type === "mousedown" && !e.buttons && !e.touches) {
                return false;
            }
            // The only thing one handle should be concerned about is the touches that originated on top of it.
            if (touch) {
                // Returns true if a touch originated on the target.
                var isTouchOnTarget = function (checkTouch) {
                    var target = checkTouch.target;
                    return (target === eventTarget ||
                        eventTarget.contains(target) ||
                        (e.composed && e.composedPath().shift() === eventTarget));
                };
                // In the case of touchstart events, we need to make sure there is still no more than one
                // touch on the target so we look amongst all touches.
                if (e.type === "touchstart") {
                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);
                    // Do not support more than one touch per handle.
                    if (targetTouches.length > 1) {
                        return false;
                    }
                    x = targetTouches[0].pageX;
                    y = targetTouches[0].pageY;
                }
                else {
                    // In the other cases, find on changedTouches is enough.
                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);
                    // Cancel if the target touch has not moved.
                    if (!targetTouch) {
                        return false;
                    }
                    x = targetTouch.pageX;
                    y = targetTouch.pageY;
                }
            }
            pageOffset = pageOffset || getPageOffset(scope_Document);
            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }
            e.pageOffset = pageOffset;
            e.points = [x, y];
            e.cursor = mouse || pointer; // Fix #435
            return e;
        }
        // Translate a coordinate in the document to a percentage on the slider
        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset(scope_Base, options.ort);
            var proposal = (location * 100) / baseSize();
            // Clamp proposal between 0% and 100%
            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
            // are used (e.g. contained handles feature)
            proposal = limit(proposal);
            return options.dir ? 100 - proposal : proposal;
        }
        // Find handle closest to a certain percentage on the slider
        function getClosestHandle(clickedPosition) {
            var smallestDifference = 100;
            var handleNumber = false;
            scope_Handles.forEach(function (handle, index) {
                // Disabled handles are ignored
                if (isHandleDisabled(index)) {
                    return;
                }
                var handlePosition = scope_Locations[index];
                var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);
                // Initial state
                var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;
                // Difference with this handle is smaller than the previously checked handle
                var isCloser = differenceWithThisHandle < smallestDifference;
                var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;
                if (isCloser || isCloserAfter || clickAtEdge) {
                    handleNumber = index;
                    smallestDifference = differenceWithThisHandle;
                }
            });
            return handleNumber;
        }
        // Fire 'end' when a mouse or pen leaves the document.
        function documentLeave(event, data) {
            if (event.type === "mouseout" &&
                event.target.nodeName === "HTML" &&
                event.relatedTarget === null) {
                eventEnd(event, data);
            }
        }
        // Handle movement on document for handle and range drag.
        function eventMove(event, data) {
            // Fix #498
            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
            // IE9 has .buttons and .which zero on mousemove.
            // Firefox breaks the spec MDN defines.
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
                return eventEnd(event, data);
            }
            // Check if we are moving up or down
            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);
            // Convert the movement into a percentage of the slider width/height
            var proposal = (movement * 100) / data.baseSize;
            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers, data.connect);
        }
        // Unbind move events on document, call callbacks.
        function eventEnd(event, data) {
            // The handle is no longer active, so remove the class.
            if (data.handle) {
                removeClass(data.handle, options.cssClasses.active);
                scope_ActiveHandlesCount -= 1;
            }
            // Unbind the move and end events, which are added on 'start'.
            data.listeners.forEach(function (c) {
                scope_DocumentElement.removeEventListener(c[0], c[1]);
            });
            if (scope_ActiveHandlesCount === 0) {
                // Remove dragging class.
                removeClass(scope_Target, options.cssClasses.drag);
                setZindex();
                // Remove cursor styles and text-selection events bound to the body.
                if (event.cursor) {
                    scope_Body.style.cursor = "";
                    scope_Body.removeEventListener("selectstart", preventDefault);
                }
            }
            if (options.events.smoothSteps) {
                data.handleNumbers.forEach(function (handleNumber) {
                    setHandle(handleNumber, scope_Locations[handleNumber], true, true, false, false);
                });
                data.handleNumbers.forEach(function (handleNumber) {
                    fireEvent("update", handleNumber);
                });
            }
            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent("change", handleNumber);
                fireEvent("set", handleNumber);
                fireEvent("end", handleNumber);
            });
        }
        // Bind move events on document.
        function eventStart(event, data) {
            // Ignore event if any handle is disabled
            if (data.handleNumbers.some(isHandleDisabled)) {
                return;
            }
            var handle;
            if (data.handleNumbers.length === 1) {
                var handleOrigin = scope_Handles[data.handleNumbers[0]];
                handle = handleOrigin.children[0];
                scope_ActiveHandlesCount += 1;
                // Mark the handle as 'active' so it can be styled.
                addClass(handle, options.cssClasses.active);
            }
            // A drag should never propagate up to the 'tap' event.
            event.stopPropagation();
            // Record the event listeners.
            var listeners = [];
            // Attach the move and end events.
            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
                // The event target has changed so we need to propagate the original one so that we keep
                // relying on it to extract target touches.
                target: event.target,
                handle: handle,
                connect: data.connect,
                listeners: listeners,
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice(),
            });
            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers,
            });
            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers,
            });
            // We want to make sure we pushed the listeners in the listener list rather than creating
            // a new one as it has already been passed to the event handlers.
            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));
            // Text selection isn't an issue on touch devices,
            // so adding cursor styles can be skipped.
            if (event.cursor) {
                // Prevent the 'I' cursor and extend the range-drag cursor.
                scope_Body.style.cursor = getComputedStyle(event.target).cursor;
                // Mark the target with a dragging state.
                if (scope_Handles.length > 1) {
                    addClass(scope_Target, options.cssClasses.drag);
                }
                // Prevent text selection when dragging the handles.
                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
                // The 'cursor' flag is false.
                // See: http://caniuse.com/#search=selectstart
                scope_Body.addEventListener("selectstart", preventDefault, false);
            }
            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent("start", handleNumber);
            });
        }
        // Move closest handle to tapped location.
        function eventTap(event) {
            // The tap event shouldn't propagate up
            event.stopPropagation();
            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);
            // Tackle the case that all handles are 'disabled'.
            if (handleNumber === false) {
                return;
            }
            // Flag the slider as it is now in a transitional state.
            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
            if (!options.events.snap) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }
            setHandle(handleNumber, proposal, true, true);
            setZindex();
            fireEvent("slide", handleNumber, true);
            fireEvent("update", handleNumber, true);
            if (!options.events.snap) {
                fireEvent("change", handleNumber, true);
                fireEvent("set", handleNumber, true);
            }
            else {
                eventStart(event, { handleNumbers: [handleNumber] });
            }
        }
        // Fires a 'hover' event for a hovered mouse/pen position.
        function eventHover(event) {
            var proposal = calcPointToPercentage(event.calcPoint);
            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);
            Object.keys(scope_Events).forEach(function (targetEvent) {
                if ("hover" === targetEvent.split(".")[0]) {
                    scope_Events[targetEvent].forEach(function (callback) {
                        callback.call(scope_Self, value);
                    });
                }
            });
        }
        // Handles keydown on focused handles
        // Don't move the document when pressing arrow keys on focused handles
        function eventKeydown(event, handleNumber) {
            if (isSliderDisabled() || isHandleDisabled(handleNumber)) {
                return false;
            }
            var horizontalKeys = ["Left", "Right"];
            var verticalKeys = ["Down", "Up"];
            var largeStepKeys = ["PageDown", "PageUp"];
            var edgeKeys = ["Home", "End"];
            if (options.dir && !options.ort) {
                // On an right-to-left slider, the left and right keys act inverted
                horizontalKeys.reverse();
            }
            else if (options.ort && !options.dir) {
                // On a top-to-bottom slider, the up and down keys act inverted
                verticalKeys.reverse();
                largeStepKeys.reverse();
            }
            // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
            var key = event.key.replace("Arrow", "");
            var isLargeDown = key === largeStepKeys[0];
            var isLargeUp = key === largeStepKeys[1];
            var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;
            var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;
            var isMin = key === edgeKeys[0];
            var isMax = key === edgeKeys[1];
            if (!isDown && !isUp && !isMin && !isMax) {
                return true;
            }
            event.preventDefault();
            var to;
            if (isUp || isDown) {
                var direction = isDown ? 0 : 1;
                var steps = getNextStepsForHandle(handleNumber);
                var step = steps[direction];
                // At the edge of a slider, do nothing
                if (step === null) {
                    return false;
                }
                // No step set, use the default of 10% of the sub-range
                if (step === false) {
                    step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);
                }
                if (isLargeUp || isLargeDown) {
                    step *= options.keyboardPageMultiplier;
                }
                else {
                    step *= options.keyboardMultiplier;
                }
                // Step over zero-length ranges (#948);
                step = Math.max(step, 0.0000001);
                // Decrement for down steps
                step = (isDown ? -1 : 1) * step;
                to = scope_Values[handleNumber] + step;
            }
            else if (isMax) {
                // End key
                to = options.spectrum.xVal[options.spectrum.xVal.length - 1];
            }
            else {
                // Home key
                to = options.spectrum.xVal[0];
            }
            setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);
            fireEvent("slide", handleNumber);
            fireEvent("update", handleNumber);
            fireEvent("change", handleNumber);
            fireEvent("set", handleNumber);
            return false;
        }
        // Attach events to several slider parts.
        function bindSliderEvents(behaviour) {
            // Attach the standard drag event to the handles.
            if (!behaviour.fixed) {
                scope_Handles.forEach(function (handle, index) {
                    // These events are only bound to the visual handle
                    // element, not the 'real' origin element.
                    attachEvent(actions.start, handle.children[0], eventStart, {
                        handleNumbers: [index],
                    });
                });
            }
            // Attach the tap event to the slider base.
            if (behaviour.tap) {
                attachEvent(actions.start, scope_Base, eventTap, {});
            }
            // Fire hover events
            if (behaviour.hover) {
                attachEvent(actions.move, scope_Base, eventHover, {
                    hover: true,
                });
            }
            // Make the range draggable.
            if (behaviour.drag) {
                scope_Connects.forEach(function (connect, index) {
                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                        return;
                    }
                    var handleBefore = scope_Handles[index - 1];
                    var handleAfter = scope_Handles[index];
                    var eventHolders = [connect];
                    var handlesToDrag = [handleBefore, handleAfter];
                    var handleNumbersToDrag = [index - 1, index];
                    addClass(connect, options.cssClasses.draggable);
                    // When the range is fixed, the entire range can
                    // be dragged by the handles. The handle in the first
                    // origin will propagate the start event upward,
                    // but it needs to be bound manually on the other.
                    if (behaviour.fixed) {
                        eventHolders.push(handleBefore.children[0]);
                        eventHolders.push(handleAfter.children[0]);
                    }
                    if (behaviour.dragAll) {
                        handlesToDrag = scope_Handles;
                        handleNumbersToDrag = scope_HandleNumbers;
                    }
                    eventHolders.forEach(function (eventHolder) {
                        attachEvent(actions.start, eventHolder, eventStart, {
                            handles: handlesToDrag,
                            handleNumbers: handleNumbersToDrag,
                            connect: connect,
                        });
                    });
                });
            }
        }
        // Attach an event to this slider, possibly including a namespace
        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);
            // If the event bound is 'update,' fire it immediately for all handles.
            if (namespacedEvent.split(".")[0] === "update") {
                scope_Handles.forEach(function (a, index) {
                    fireEvent("update", index);
                });
            }
        }
        function isInternalNamespace(namespace) {
            return namespace === INTERNAL_EVENT_NS.aria || namespace === INTERNAL_EVENT_NS.tooltips;
        }
        // Undo attachment of event
        function removeEvent(namespacedEvent) {
            var event = namespacedEvent && namespacedEvent.split(".")[0];
            var namespace = event ? namespacedEvent.substring(event.length) : namespacedEvent;
            Object.keys(scope_Events).forEach(function (bind) {
                var tEvent = bind.split(".")[0];
                var tNamespace = bind.substring(tEvent.length);
                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                    // only delete protected internal event if intentional
                    if (!isInternalNamespace(tNamespace) || namespace === tNamespace) {
                        delete scope_Events[bind];
                    }
                }
            });
        }
        // External event handling
        function fireEvent(eventName, handleNumber, tap) {
            Object.keys(scope_Events).forEach(function (targetEvent) {
                var eventType = targetEvent.split(".")[0];
                if (eventName === eventType) {
                    scope_Events[targetEvent].forEach(function (callback) {
                        callback.call(
                            // Use the slider public API as the scope ('this')
                            scope_Self,
                            // Return values as array, so arg_1[arg_2] is always valid.
                            scope_Values.map(options.format.to),
                            // Handle index, 0 or 1
                            handleNumber,
                            // Un-formatted slider values
                            scope_Values.slice(),
                            // Event is fired by tap, true or false
                            tap || false,
                            // Left offset of the handle, in relation to the slider
                            scope_Locations.slice(),
                            // add the slider public API to an accessible parameter when this is unavailable
                            scope_Self);
                    });
                }
            });
        }
        // Split out the handle positioning logic so the Move event can use it, too
        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue, smoothSteps) {
            var distance;
            // For sliders with multiple handles, limit movement to the other handle.
            // Apply the margin option by adding it to the handle positions.
            if (scope_Handles.length > 1 && !options.events.unconstrained) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, false);
                    to = Math.max(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, true);
                    to = Math.min(to, distance);
                }
            }
            // The limit option has the opposite effect, limiting handles to a
            // maximum distance from another. Limit must be > 0, as otherwise
            // handles would be unmovable.
            if (scope_Handles.length > 1 && options.limit) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, false);
                    to = Math.min(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, true);
                    to = Math.max(to, distance);
                }
            }
            // The padding option keeps the handles a certain distance from the
            // edges of the slider. Padding must be > 0.
            if (options.padding) {
                if (handleNumber === 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], false);
                    to = Math.max(to, distance);
                }
                if (handleNumber === scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], true);
                    to = Math.min(to, distance);
                }
            }
            if (!smoothSteps) {
                to = scope_Spectrum.getStep(to);
            }
            // Limit percentage to the 0 - 100 range
            to = limit(to);
            // Return false if handle can't move
            if (to === reference[handleNumber] && !getValue) {
                return false;
            }
            return to;
        }
        // Uses slider orientation to create CSS rules. a = base value;
        function inRuleOrder(v, a) {
            var o = options.ort;
            return (o ? a : v) + ", " + (o ? v : a);
        }
        // Moves handle(s) by a percentage
        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
        function moveHandles(upward, proposal, locations, handleNumbers, connect) {
            var proposals = locations.slice();
            // Store first handle now, so we still have it in case handleNumbers is reversed
            var firstHandle = handleNumbers[0];
            var smoothSteps = options.events.smoothSteps;
            var b = [!upward, upward];
            var f = [upward, !upward];
            // Copy handleNumbers so we don't change the dataset
            handleNumbers = handleNumbers.slice();
            // Check to see which handle is 'leading'.
            // If that one can't move the second can't either.
            if (upward) {
                handleNumbers.reverse();
            }
            // Step 1: get the maximum percentage that any of the handles can move
            if (handleNumbers.length > 1) {
                handleNumbers.forEach(function (handleNumber, o) {
                    var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false, smoothSteps);
                    // Stop if one of the handles can't move.
                    if (to === false) {
                        proposal = 0;
                    }
                    else {
                        proposal = to - proposals[handleNumber];
                        proposals[handleNumber] = to;
                    }
                });
            }
            // If using one handle, check backward AND forward
            else {
                b = f = [true];
            }
            var state = false;
            // Step 2: Try to set the handles with the found percentage
            handleNumbers.forEach(function (handleNumber, o) {
                state =
                    setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o], false, smoothSteps) || state;
            });
            // Step 3: If a handle moved, fire events
            if (state) {
                handleNumbers.forEach(function (handleNumber) {
                    fireEvent("update", handleNumber);
                    fireEvent("slide", handleNumber);
                });
                // If target is a connect, then fire drag event
                if (connect != undefined) {
                    fireEvent("drag", firstHandle);
                }
            }
        }
        // Takes a base value and an offset. This offset is used for the connect bar size.
        // In the initial design for this feature, the origin element was 1% wide.
        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
        function transformDirection(a, b) {
            return options.dir ? 100 - a - b : a;
        }
        // Updates scope_Locations and scope_Values, updates visual state
        function updateHandlePosition(handleNumber, to) {
            // Update locations.
            scope_Locations[handleNumber] = to;
            // Convert the value to the slider stepping/range.
            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);
            var translation = transformDirection(to, 0) - scope_DirOffset;
            var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";
            scope_Handles[handleNumber].style[options.transformRule] = translateRule;
            updateConnect(handleNumber);
            updateConnect(handleNumber + 1);
        }
        // Handles before the slider middle are stacked later = higher,
        // Handles after the middle later is lower
        // [[7] [8] .......... | .......... [5] [4]
        function setZindex() {
            scope_HandleNumbers.forEach(function (handleNumber) {
                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
                scope_Handles[handleNumber].style.zIndex = String(zIndex);
            });
        }
        // Test suggested values and apply margin, step.
        // if exactInput is true, don't run checkHandlePosition, then the handle can be placed in between steps (#436)
        function setHandle(handleNumber, to, lookBackward, lookForward, exactInput, smoothSteps) {
            if (!exactInput) {
                to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false, smoothSteps);
            }
            if (to === false) {
                return false;
            }
            updateHandlePosition(handleNumber, to);
            return true;
        }
        // Updates style attribute for connect nodes
        function updateConnect(index) {
            // Skip connects set to false
            if (!scope_Connects[index]) {
                return;
            }
            var l = 0;
            var h = 100;
            if (index !== 0) {
                l = scope_Locations[index - 1];
            }
            if (index !== scope_Connects.length - 1) {
                h = scope_Locations[index];
            }
            // We use two rules:
            // 'translate' to change the left/top offset;
            // 'scale' to change the width of the element;
            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
            var connectWidth = h - l;
            var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";
            var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";
            scope_Connects[index].style[options.transformRule] =
                translateRule + " " + scaleRule;
        }
        // Parses value passed to .set method. Returns current value if not parse-able.
        function resolveToValue(to, handleNumber) {
            // Setting with null indicates an 'ignore'.
            // Inputting 'false' is invalid.
            if (to === null || to === false || to === undefined) {
                return scope_Locations[handleNumber];
            }
            // If a formatted number was passed, attempt to decode it.
            if (typeof to === "number") {
                to = String(to);
            }
            to = options.format.from(to);
            if (to !== false) {
                to = scope_Spectrum.toStepping(to);
            }
            // If parsing the number failed, use the current value.
            if (to === false || isNaN(to)) {
                return scope_Locations[handleNumber];
            }
            return to;
        }
        // Set the slider value.
        function valueSet(input, fireSetEvent, exactInput) {
            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;
            // Event fires by default
            fireSetEvent = fireSetEvent === undefined ? true : fireSetEvent;
            // Animation is optional.
            // Make sure the initial values were set before using animated placement.
            if (options.animate && !isInit) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }
            // First pass, without lookAhead but with lookBackward. Values are set from left to right.
            scope_HandleNumbers.forEach(function (handleNumber) {
                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false, exactInput);
            });
            var i = scope_HandleNumbers.length === 1 ? 0 : 1;
            // Spread handles evenly across the slider if the range has no size (min=max)
            if (isInit && scope_Spectrum.hasNoSize()) {
                exactInput = true;
                scope_Locations[0] = 0;
                if (scope_HandleNumbers.length > 1) {
                    var space_1 = 100 / (scope_HandleNumbers.length - 1);
                    scope_HandleNumbers.forEach(function (handleNumber) {
                        scope_Locations[handleNumber] = handleNumber * space_1;
                    });
                }
            }
            // Secondary passes. Now that all base values are set, apply constraints.
            // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)
            for (; i < scope_HandleNumbers.length; ++i) {
                scope_HandleNumbers.forEach(function (handleNumber) {
                    setHandle(handleNumber, scope_Locations[handleNumber], true, true, exactInput);
                });
            }
            setZindex();
            scope_HandleNumbers.forEach(function (handleNumber) {
                fireEvent("update", handleNumber);
                // Fire the event only for handles that received a new value, as per #579
                if (values[handleNumber] !== null && fireSetEvent) {
                    fireEvent("set", handleNumber);
                }
            });
        }
        // Reset slider to initial values
        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }
        // Set value for a single handle
        function valueSetHandle(handleNumber, value, fireSetEvent, exactInput) {
            // Ensure numeric input
            handleNumber = Number(handleNumber);
            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {
                throw new Error("noUiSlider: invalid handle number, got: " + handleNumber);
            }
            // Look both backward and forward, since we don't want this handle to "push" other handles (#960);
            // The exactInput argument can be used to ignore slider stepping (#436)
            setHandle(handleNumber, resolveToValue(value, handleNumber), true, true, exactInput);
            fireEvent("update", handleNumber);
            if (fireSetEvent) {
                fireEvent("set", handleNumber);
            }
        }
        // Get the slider value.
        function valueGet(unencoded) {
            if (unencoded === void 0) { unencoded = false; }
            if (unencoded) {
                // return a copy of the raw values
                return scope_Values.length === 1 ? scope_Values[0] : scope_Values.slice(0);
            }
            var values = scope_Values.map(options.format.to);
            // If only one handle is used, return a single value.
            if (values.length === 1) {
                return values[0];
            }
            return values;
        }
        // Removes classes from the root and empties it.
        function destroy() {
            // remove protected internal listeners
            removeEvent(INTERNAL_EVENT_NS.aria);
            removeEvent(INTERNAL_EVENT_NS.tooltips);
            Object.keys(options.cssClasses).forEach(function (key) {
                removeClass(scope_Target, options.cssClasses[key]);
            });
            while (scope_Target.firstChild) {
                scope_Target.removeChild(scope_Target.firstChild);
            }
            delete scope_Target.noUiSlider;
        }
        function getNextStepsForHandle(handleNumber) {
            var location = scope_Locations[handleNumber];
            var nearbySteps = scope_Spectrum.getNearbySteps(location);
            var value = scope_Values[handleNumber];
            var increment = nearbySteps.thisStep.step;
            var decrement = null;
            // If snapped, directly use defined step value
            if (options.snap) {
                return [
                    value - nearbySteps.stepBefore.startValue || null,
                    nearbySteps.stepAfter.startValue - value || null,
                ];
            }
            // If the next value in this step moves into the next step,
            // the increment is the start of the next step - the current value
            if (increment !== false) {
                if (value + increment > nearbySteps.stepAfter.startValue) {
                    increment = nearbySteps.stepAfter.startValue - value;
                }
            }
            // If the value is beyond the starting point
            if (value > nearbySteps.thisStep.startValue) {
                decrement = nearbySteps.thisStep.step;
            }
            else if (nearbySteps.stepBefore.step === false) {
                decrement = false;
            }
            // If a handle is at the start of a step, it always steps back into the previous step first
            else {
                decrement = value - nearbySteps.stepBefore.highestStep;
            }
            // Now, if at the slider edges, there is no in/decrement
            if (location === 100) {
                increment = null;
            }
            else if (location === 0) {
                decrement = null;
            }
            // As per #391, the comparison for the decrement step can have some rounding issues.
            var stepDecimals = scope_Spectrum.countStepDecimals();
            // Round per #391
            if (increment !== null && increment !== false) {
                increment = Number(increment.toFixed(stepDecimals));
            }
            if (decrement !== null && decrement !== false) {
                decrement = Number(decrement.toFixed(stepDecimals));
            }
            return [decrement, increment];
        }
        // Get the current step size for the slider.
        function getNextSteps() {
            return scope_HandleNumbers.map(getNextStepsForHandle);
        }
        // Updatable: margin, limit, padding, step, range, animate, snap
        function updateOptions(optionsToUpdate, fireSetEvent) {
            // Spectrum is created using the range, snap, direction and step options.
            // 'snap' and 'step' can be updated.
            // If 'snap' and 'step' are not passed, they should remain unchanged.
            var v = valueGet();
            var updateAble = [
                "margin",
                "limit",
                "padding",
                "range",
                "animate",
                "snap",
                "step",
                "format",
                "pips",
                "tooltips",
            ];
            // Only change options that we're actually passed to update.
            updateAble.forEach(function (name) {
                // Check for undefined. null removes the value.
                if (optionsToUpdate[name] !== undefined) {
                    originalOptions[name] = optionsToUpdate[name];
                }
            });
            var newOptions = testOptions(originalOptions);
            // Load new options into the slider state
            updateAble.forEach(function (name) {
                if (optionsToUpdate[name] !== undefined) {
                    options[name] = newOptions[name];
                }
            });
            scope_Spectrum = newOptions.spectrum;
            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;
            // Update pips, removes existing.
            if (options.pips) {
                pips(options.pips);
            }
            else {
                removePips();
            }
            // Update tooltips, removes existing.
            if (options.tooltips) {
                tooltips();
            }
            else {
                removeTooltips();
            }
            // Invalidate the current positioning so valueSet forces an update.
            scope_Locations = [];
            valueSet(isSet(optionsToUpdate.start) ? optionsToUpdate.start : v, fireSetEvent);
        }
        // Initialization steps
        function setupSlider() {
            // Create the base element, initialize HTML and set classes.
            // Add handles and connect elements.
            scope_Base = addSlider(scope_Target);
            addElements(options.connect, scope_Base);
            // Attach user events.
            bindSliderEvents(options.events);
            // Use the public value method to set the start values.
            valueSet(options.start);
            if (options.pips) {
                pips(options.pips);
            }
            if (options.tooltips) {
                tooltips();
            }
            aria();
        }
        setupSlider();
        var scope_Self = {
            destroy: destroy,
            steps: getNextSteps,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            setHandle: valueSetHandle,
            reset: valueReset,
            disable: disable,
            enable: enable,
            // Exposed for unit testing, don't use this in your application.
            __moveHandles: function (upward, proposal, handleNumbers) {
                moveHandles(upward, proposal, scope_Locations, handleNumbers);
            },
            options: originalOptions,
            updateOptions: updateOptions,
            target: scope_Target,
            removePips: removePips,
            removeTooltips: removeTooltips,
            getPositions: function () {
                return scope_Locations.slice();
            },
            getTooltips: function () {
                return scope_Tooltips;
            },
            getOrigins: function () {
                return scope_Handles;
            },
            pips: pips, // Issue #594
        };
        return scope_Self;
    }
    // Run the standard initializer
    function initialize(target, originalOptions) {
        if (!target || !target.nodeName) {
            throw new Error("noUiSlider: create requires a single element, got: " + target);
        }
        // Throw an error if the slider was already initialized.
        if (target.noUiSlider) {
            throw new Error("noUiSlider: Slider was already initialized.");
        }
        // Test the options and create the slider environment;
        var options = testOptions(originalOptions);
        var api = scope(target, options, originalOptions);
        target.noUiSlider = api;
        return api;
    }
    var nouislider = {
        // Exposed for unit testing, don't use this in your application.
        __spectrum: Spectrum,
        // A reference to the default classes, allows global changes.
        // Use the cssClasses option for changes to one slider.
        cssClasses: cssClasses,
        create: initialize,
    };

    exports.create = initialize;
    exports.cssClasses = cssClasses;
    exports["default"] = nouislider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

/*!
 * Chart.js v4.2.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 *
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 *
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 *
 * date-fns v2.29.3
 * https://date-fns.org
 * (c) 2021 Sasha Koss and Lesha Koss
 * Released under the MIT License
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Chart = factory());
})(this, (function () { 'use strict';

    function _iterableToArrayLimit(arr, i) {
        var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
        if (null != _i) {
            var _s,
                _e,
                _x,
                _r,
                _arr = [],
                _n = !0,
                _d = !1;
            try {
                if (_x = (_i = _i.call(arr)).next, 0 === i) {
                    if (Object(_i) !== _i) return;
                    _n = !1;
                } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
            } catch (err) {
                _d = !0, _e = err;
            } finally {
                try {
                    if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
    }
    function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
        }
        return keys;
    }
    function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
                _defineProperty$w(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
        return target;
    }
    function _typeof$z(obj) {
        "@babel/helpers - typeof";

        return _typeof$z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        }, _typeof$z(obj);
    }
    function _classCallCheck$x(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$x(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
    }
    function _createClass$x(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$x(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$x(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
            writable: false
        });
        return Constructor;
    }
    function _defineProperty$w(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _inherits$w(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        Object.defineProperty(subClass, "prototype", {
            writable: false
        });
        if (superClass) _setPrototypeOf$w(subClass, superClass);
    }
    function _getPrototypeOf$w(o) {
        _getPrototypeOf$w = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$w(o);
    }
    function _setPrototypeOf$w(o, p) {
        _setPrototypeOf$w = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$w(o, p);
    }
    function _isNativeReflectConstruct$w() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _assertThisInitialized$w(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _possibleConstructorReturn$w(self, call) {
        if (call && (typeof call === "object" || typeof call === "function")) {
            return call;
        } else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized$w(self);
    }
    function _createSuper$w(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$w();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$w(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$w(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$w(this, result);
        };
    }
    function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = _getPrototypeOf$w(object);
            if (object === null) break;
        }
        return object;
    }
    function _get() {
        if (typeof Reflect !== "undefined" && Reflect.get) {
            _get = Reflect.get.bind();
        } else {
            _get = function _get(target, property, receiver) {
                var base = _superPropBase(target, property);
                if (!base) return;
                var desc = Object.getOwnPropertyDescriptor(base, property);
                if (desc.get) {
                    return desc.get.call(arguments.length < 3 ? target : receiver);
                }
                return desc.value;
            };
        }
        return _get.apply(this, arguments);
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _unsupportedIterableToArray$1(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
    }
    function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
            if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function () {};
                return {
                    s: F,
                    n: function () {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function (e) {
                        throw e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true,
            didErr = false,
            err;
        return {
            s: function () {
                it = it.call(o);
            },
            n: function () {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function (e) {
                didErr = true;
                err = e;
            },
            f: function () {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally {
                    if (didErr) throw err;
                }
            }
        };
    }
    function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (typeof res !== "object") return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
    }

    /*!
   * @kurkle/color v0.3.2
   * https://github.com/kurkle/color#readme
   * (c) 2023 Jukka Kurkela
   * Released under the MIT License
   */
    function round(v) {
        return v + 0.5 | 0;
    }
    var lim = function lim(v, l, h) {
        return Math.max(Math.min(v, h), l);
    };
    function p2b(v) {
        return lim(round(v * 2.55), 0, 255);
    }
    function n2b(v) {
        return lim(round(v * 255), 0, 255);
    }
    function b2n(v) {
        return lim(round(v / 2.55) / 100, 0, 1);
    }
    function n2p(v) {
        return lim(round(v * 100), 0, 100);
    }
    var map$1 = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        a: 10,
        b: 11,
        c: 12,
        d: 13,
        e: 14,
        f: 15
    };
    var hex = _toConsumableArray('0123456789ABCDEF');
    var h1 = function h1(b) {
        return hex[b & 0xF];
    };
    var h2 = function h2(b) {
        return hex[(b & 0xF0) >> 4] + hex[b & 0xF];
    };
    var eq = function eq(b) {
        return (b & 0xF0) >> 4 === (b & 0xF);
    };
    var isShort = function isShort(v) {
        return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
    };
    function hexParse(str) {
        var len = str.length;
        var ret;
        if (str[0] === '#') {
            if (len === 4 || len === 5) {
                ret = {
                    r: 255 & map$1[str[1]] * 17,
                    g: 255 & map$1[str[2]] * 17,
                    b: 255 & map$1[str[3]] * 17,
                    a: len === 5 ? map$1[str[4]] * 17 : 255
                };
            } else if (len === 7 || len === 9) {
                ret = {
                    r: map$1[str[1]] << 4 | map$1[str[2]],
                    g: map$1[str[3]] << 4 | map$1[str[4]],
                    b: map$1[str[5]] << 4 | map$1[str[6]],
                    a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
                };
            }
        }
        return ret;
    }
    var alpha = function alpha(a, f) {
        return a < 255 ? f(a) : '';
    };
    function _hexString(v) {
        var f = isShort(v) ? h1 : h2;
        return v ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;
    }
    var HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function hsl2rgbn(h, s, l) {
        var a = s * Math.min(l, 1 - l);
        var f = function f(n) {
            var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
            return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        };
        return [f(0), f(8), f(4)];
    }
    function hsv2rgbn(h, s, v) {
        var f = function f(n) {
            var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 60) % 6;
            return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
        };
        return [f(5), f(3), f(1)];
    }
    function hwb2rgbn(h, w, b) {
        var rgb = hsl2rgbn(h, 1, 0.5);
        var i;
        if (w + b > 1) {
            i = 1 / (w + b);
            w *= i;
            b *= i;
        }
        for (i = 0; i < 3; i++) {
            rgb[i] *= 1 - w - b;
            rgb[i] += w;
        }
        return rgb;
    }
    function hueValue(r, g, b, d, max) {
        if (r === max) {
            return (g - b) / d + (g < b ? 6 : 0);
        }
        if (g === max) {
            return (b - r) / d + 2;
        }
        return (r - g) / d + 4;
    }
    function rgb2hsl(v) {
        var range = 255;
        var r = v.r / range;
        var g = v.g / range;
        var b = v.b / range;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var l = (max + min) / 2;
        var h, s, d;
        if (max !== min) {
            d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            h = hueValue(r, g, b, d, max);
            h = h * 60 + 0.5;
        }
        return [h | 0, s || 0, l];
    }
    function calln(f, a, b, c) {
        return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
    }
    function hsl2rgb(h, s, l) {
        return calln(hsl2rgbn, h, s, l);
    }
    function hwb2rgb(h, w, b) {
        return calln(hwb2rgbn, h, w, b);
    }
    function hsv2rgb(h, s, v) {
        return calln(hsv2rgbn, h, s, v);
    }
    function hue(h) {
        return (h % 360 + 360) % 360;
    }
    function hueParse(str) {
        var m = HUE_RE.exec(str);
        var a = 255;
        var v;
        if (!m) {
            return;
        }
        if (m[5] !== v) {
            a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
        }
        var h = hue(+m[2]);
        var p1 = +m[3] / 100;
        var p2 = +m[4] / 100;
        if (m[1] === 'hwb') {
            v = hwb2rgb(h, p1, p2);
        } else if (m[1] === 'hsv') {
            v = hsv2rgb(h, p1, p2);
        } else {
            v = hsl2rgb(h, p1, p2);
        }
        return {
            r: v[0],
            g: v[1],
            b: v[2],
            a: a
        };
    }
    function _rotate(v, deg) {
        var h = rgb2hsl(v);
        h[0] = hue(h[0] + deg);
        h = hsl2rgb(h);
        v.r = h[0];
        v.g = h[1];
        v.b = h[2];
    }
    function _hslString(v) {
        if (!v) {
            return;
        }
        var a = rgb2hsl(v);
        var h = a[0];
        var s = n2p(a[1]);
        var l = n2p(a[2]);
        return v.a < 255 ? "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(b2n(v.a), ")") : "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
    }
    var map$2 = {
        x: 'dark',
        Z: 'light',
        Y: 're',
        X: 'blu',
        W: 'gr',
        V: 'medium',
        U: 'slate',
        A: 'ee',
        T: 'ol',
        S: 'or',
        B: 'ra',
        C: 'lateg',
        D: 'ights',
        R: 'in',
        Q: 'turquois',
        E: 'hi',
        P: 'ro',
        O: 'al',
        N: 'le',
        M: 'de',
        L: 'yello',
        F: 'en',
        K: 'ch',
        G: 'arks',
        H: 'ea',
        I: 'ightg',
        J: 'wh'
    };
    var names$1 = {
        OiceXe: 'f0f8ff',
        antiquewEte: 'faebd7',
        aqua: 'ffff',
        aquamarRe: '7fffd4',
        azuY: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '0',
        blanKedOmond: 'ffebcd',
        Xe: 'ff',
        XeviTet: '8a2be2',
        bPwn: 'a52a2a',
        burlywood: 'deb887',
        caMtXe: '5f9ea0',
        KartYuse: '7fff00',
        KocTate: 'd2691e',
        cSO: 'ff7f50',
        cSnflowerXe: '6495ed',
        cSnsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: 'ffff',
        xXe: '8b',
        xcyan: '8b8b',
        xgTMnPd: 'b8860b',
        xWay: 'a9a9a9',
        xgYF: '6400',
        xgYy: 'a9a9a9',
        xkhaki: 'bdb76b',
        xmagFta: '8b008b',
        xTivegYF: '556b2f',
        xSange: 'ff8c00',
        xScEd: '9932cc',
        xYd: '8b0000',
        xsOmon: 'e9967a',
        xsHgYF: '8fbc8f',
        xUXe: '483d8b',
        xUWay: '2f4f4f',
        xUgYy: '2f4f4f',
        xQe: 'ced1',
        xviTet: '9400d3',
        dAppRk: 'ff1493',
        dApskyXe: 'bfff',
        dimWay: '696969',
        dimgYy: '696969',
        dodgerXe: '1e90ff',
        fiYbrick: 'b22222',
        flSOwEte: 'fffaf0',
        foYstWAn: '228b22',
        fuKsia: 'ff00ff',
        gaRsbSo: 'dcdcdc',
        ghostwEte: 'f8f8ff',
        gTd: 'ffd700',
        gTMnPd: 'daa520',
        Way: '808080',
        gYF: '8000',
        gYFLw: 'adff2f',
        gYy: '808080',
        honeyMw: 'f0fff0',
        hotpRk: 'ff69b4',
        RdianYd: 'cd5c5c',
        Rdigo: '4b0082',
        ivSy: 'fffff0',
        khaki: 'f0e68c',
        lavFMr: 'e6e6fa',
        lavFMrXsh: 'fff0f5',
        lawngYF: '7cfc00',
        NmoncEffon: 'fffacd',
        ZXe: 'add8e6',
        ZcSO: 'f08080',
        Zcyan: 'e0ffff',
        ZgTMnPdLw: 'fafad2',
        ZWay: 'd3d3d3',
        ZgYF: '90ee90',
        ZgYy: 'd3d3d3',
        ZpRk: 'ffb6c1',
        ZsOmon: 'ffa07a',
        ZsHgYF: '20b2aa',
        ZskyXe: '87cefa',
        ZUWay: '778899',
        ZUgYy: '778899',
        ZstAlXe: 'b0c4de',
        ZLw: 'ffffe0',
        lime: 'ff00',
        limegYF: '32cd32',
        lRF: 'faf0e6',
        magFta: 'ff00ff',
        maPon: '800000',
        VaquamarRe: '66cdaa',
        VXe: 'cd',
        VScEd: 'ba55d3',
        VpurpN: '9370db',
        VsHgYF: '3cb371',
        VUXe: '7b68ee',
        VsprRggYF: 'fa9a',
        VQe: '48d1cc',
        VviTetYd: 'c71585',
        midnightXe: '191970',
        mRtcYam: 'f5fffa',
        mistyPse: 'ffe4e1',
        moccasR: 'ffe4b5',
        navajowEte: 'ffdead',
        navy: '80',
        Tdlace: 'fdf5e6',
        Tive: '808000',
        TivedBb: '6b8e23',
        Sange: 'ffa500',
        SangeYd: 'ff4500',
        ScEd: 'da70d6',
        pOegTMnPd: 'eee8aa',
        pOegYF: '98fb98',
        pOeQe: 'afeeee',
        pOeviTetYd: 'db7093',
        papayawEp: 'ffefd5',
        pHKpuff: 'ffdab9',
        peru: 'cd853f',
        pRk: 'ffc0cb',
        plum: 'dda0dd',
        powMrXe: 'b0e0e6',
        purpN: '800080',
        YbeccapurpN: '663399',
        Yd: 'ff0000',
        Psybrown: 'bc8f8f',
        PyOXe: '4169e1',
        saddNbPwn: '8b4513',
        sOmon: 'fa8072',
        sandybPwn: 'f4a460',
        sHgYF: '2e8b57',
        sHshell: 'fff5ee',
        siFna: 'a0522d',
        silver: 'c0c0c0',
        skyXe: '87ceeb',
        UXe: '6a5acd',
        UWay: '708090',
        UgYy: '708090',
        snow: 'fffafa',
        sprRggYF: 'ff7f',
        stAlXe: '4682b4',
        tan: 'd2b48c',
        teO: '8080',
        tEstN: 'd8bfd8',
        tomato: 'ff6347',
        Qe: '40e0d0',
        viTet: 'ee82ee',
        JHt: 'f5deb3',
        wEte: 'ffffff',
        wEtesmoke: 'f5f5f5',
        Lw: 'ffff00',
        LwgYF: '9acd32'
    };
    function unpack() {
        var unpacked = {};
        var keys = Object.keys(names$1);
        var tkeys = Object.keys(map$2);
        var i, j, k, ok, nk;
        for (i = 0; i < keys.length; i++) {
            ok = nk = keys[i];
            for (j = 0; j < tkeys.length; j++) {
                k = tkeys[j];
                nk = nk.replace(k, map$2[k]);
            }
            k = parseInt(names$1[ok], 16);
            unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
        }
        return unpacked;
    }
    var names;
    function nameParse(str) {
        if (!names) {
            names = unpack();
            names.transparent = [0, 0, 0, 0];
        }
        var a = names[str.toLowerCase()];
        return a && {
            r: a[0],
            g: a[1],
            b: a[2],
            a: a.length === 4 ? a[3] : 255
        };
    }
    var RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    function rgbParse(str) {
        var m = RGB_RE.exec(str);
        var a = 255;
        var r, g, b;
        if (!m) {
            return;
        }
        if (m[7] !== r) {
            var v = +m[7];
            a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
        }
        r = +m[1];
        g = +m[3];
        b = +m[5];
        r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
        g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
        b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
        return {
            r: r,
            g: g,
            b: b,
            a: a
        };
    }
    function _rgbString(v) {
        return v && (v.a < 255 ? "rgba(".concat(v.r, ", ").concat(v.g, ", ").concat(v.b, ", ").concat(b2n(v.a), ")") : "rgb(".concat(v.r, ", ").concat(v.g, ", ").concat(v.b, ")"));
    }
    var to = function to(v) {
        return v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
    };
    var from = function from(v) {
        return v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    };
    function _interpolate(rgb1, rgb2, t) {
        var r = from(b2n(rgb1.r));
        var g = from(b2n(rgb1.g));
        var b = from(b2n(rgb1.b));
        return {
            r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
            g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
            b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
            a: rgb1.a + t * (rgb2.a - rgb1.a)
        };
    }
    function modHSL(v, i, ratio) {
        if (v) {
            var tmp = rgb2hsl(v);
            tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
            tmp = hsl2rgb(tmp);
            v.r = tmp[0];
            v.g = tmp[1];
            v.b = tmp[2];
        }
    }
    function clone$1(v, proto) {
        return v ? Object.assign(proto || {}, v) : v;
    }
    function fromObject(input) {
        var v = {
            r: 0,
            g: 0,
            b: 0,
            a: 255
        };
        if (Array.isArray(input)) {
            if (input.length >= 3) {
                v = {
                    r: input[0],
                    g: input[1],
                    b: input[2],
                    a: 255
                };
                if (input.length > 3) {
                    v.a = n2b(input[3]);
                }
            }
        } else {
            v = clone$1(input, {
                r: 0,
                g: 0,
                b: 0,
                a: 1
            });
            v.a = n2b(v.a);
        }
        return v;
    }
    function functionParse(str) {
        if (str.charAt(0) === 'r') {
            return rgbParse(str);
        }
        return hueParse(str);
    }
    var Color = /*#__PURE__*/function () {
        function Color(input) {
            _classCallCheck$x(this, Color);
            if (input instanceof Color) {
                return input;
            }
            var type = _typeof$z(input);
            var v;
            if (type === 'object') {
                v = fromObject(input);
            } else if (type === 'string') {
                v = hexParse(input) || nameParse(input) || functionParse(input);
            }
            this._rgb = v;
            this._valid = !!v;
        }
        _createClass$x(Color, [{
            key: "valid",
            get: function get() {
                return this._valid;
            }
        }, {
            key: "rgb",
            get: function get() {
                var v = clone$1(this._rgb);
                if (v) {
                    v.a = b2n(v.a);
                }
                return v;
            },
            set: function set(obj) {
                this._rgb = fromObject(obj);
            }
        }, {
            key: "rgbString",
            value: function rgbString() {
                return this._valid ? _rgbString(this._rgb) : undefined;
            }
        }, {
            key: "hexString",
            value: function hexString() {
                return this._valid ? _hexString(this._rgb) : undefined;
            }
        }, {
            key: "hslString",
            value: function hslString() {
                return this._valid ? _hslString(this._rgb) : undefined;
            }
        }, {
            key: "mix",
            value: function mix(color, weight) {
                if (color) {
                    var c1 = this.rgb;
                    var c2 = color.rgb;
                    var w2;
                    var p = weight === w2 ? 0.5 : weight;
                    var w = 2 * p - 1;
                    var a = c1.a - c2.a;
                    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
                    w2 = 1 - w1;
                    c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
                    c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
                    c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
                    c1.a = p * c1.a + (1 - p) * c2.a;
                    this.rgb = c1;
                }
                return this;
            }
        }, {
            key: "interpolate",
            value: function interpolate(color, t) {
                if (color) {
                    this._rgb = _interpolate(this._rgb, color._rgb, t);
                }
                return this;
            }
        }, {
            key: "clone",
            value: function clone() {
                return new Color(this.rgb);
            }
        }, {
            key: "alpha",
            value: function alpha(a) {
                this._rgb.a = n2b(a);
                return this;
            }
        }, {
            key: "clearer",
            value: function clearer(ratio) {
                var rgb = this._rgb;
                rgb.a *= 1 - ratio;
                return this;
            }
        }, {
            key: "greyscale",
            value: function greyscale() {
                var rgb = this._rgb;
                var val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
                rgb.r = rgb.g = rgb.b = val;
                return this;
            }
        }, {
            key: "opaquer",
            value: function opaquer(ratio) {
                var rgb = this._rgb;
                rgb.a *= 1 + ratio;
                return this;
            }
        }, {
            key: "negate",
            value: function negate() {
                var v = this._rgb;
                v.r = 255 - v.r;
                v.g = 255 - v.g;
                v.b = 255 - v.b;
                return this;
            }
        }, {
            key: "lighten",
            value: function lighten(ratio) {
                modHSL(this._rgb, 2, ratio);
                return this;
            }
        }, {
            key: "darken",
            value: function darken(ratio) {
                modHSL(this._rgb, 2, -ratio);
                return this;
            }
        }, {
            key: "saturate",
            value: function saturate(ratio) {
                modHSL(this._rgb, 1, ratio);
                return this;
            }
        }, {
            key: "desaturate",
            value: function desaturate(ratio) {
                modHSL(this._rgb, 1, -ratio);
                return this;
            }
        }, {
            key: "rotate",
            value: function rotate(deg) {
                _rotate(this._rgb, deg);
                return this;
            }
        }]);
        return Color;
    }();

    /**
     * @namespace Chart.helpers
     */ /**
     * An empty function that can be used, for example, for optional callback.
     */
    function noop() {
        /* noop */}
    /**
     * Returns a unique id, sequentially generated from a global variable.
     */
    var uid = function () {
        var id = 0;
        return function () {
            return id++;
        };
    }();
    /**
     * Returns true if `value` is neither null nor undefined, else returns false.
     * @param value - The value to test.
     * @since 2.7.0
     */
    function isNullOrUndef(value) {
        return value === null || typeof value === 'undefined';
    }
    /**
     * Returns true if `value` is an array (including typed arrays), else returns false.
     * @param value - The value to test.
     * @function
     */
    function isArray(value) {
        if (Array.isArray && Array.isArray(value)) {
            return true;
        }
        var type = Object.prototype.toString.call(value);
        if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
            return true;
        }
        return false;
    }
    /**
     * Returns true if `value` is an object (excluding null), else returns false.
     * @param value - The value to test.
     * @since 2.7.0
     */
    function isObject(value) {
        return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    }
    /**
     * Returns true if `value` is a finite number, else returns false
     * @param value  - The value to test.
     */
    function isNumberFinite(value) {
        return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
    }
    /**
     * Returns `value` if finite, else returns `defaultValue`.
     * @param value - The value to return if defined.
     * @param defaultValue - The value to return if `value` is not finite.
     */
    function finiteOrDefault(value, defaultValue) {
        return isNumberFinite(value) ? value : defaultValue;
    }
    /**
     * Returns `value` if defined, else returns `defaultValue`.
     * @param value - The value to return if defined.
     * @param defaultValue - The value to return if `value` is undefined.
     */
    function valueOrDefault(value, defaultValue) {
        return typeof value === 'undefined' ? defaultValue : value;
    }
    var toPercentage = function toPercentage(value, dimension) {
        return typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;
    };
    var toDimension = function toDimension(value, dimension) {
        return typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
    };
    /**
     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
     * value returned by `fn`. If `fn` is not a function, this method returns undefined.
     * @param fn - The function to call.
     * @param args - The arguments with which `fn` should be called.
     * @param [thisArg] - The value of `this` provided for the call to `fn`.
     */
    function callback(fn, args, thisArg) {
        if (fn && typeof fn.call === 'function') {
            return fn.apply(thisArg, args);
        }
    }
    function each(loopable, fn, thisArg, reverse) {
        var i, len, keys;
        if (isArray(loopable)) {
            len = loopable.length;
            if (reverse) {
                for (i = len - 1; i >= 0; i--) {
                    fn.call(thisArg, loopable[i], i);
                }
            } else {
                for (i = 0; i < len; i++) {
                    fn.call(thisArg, loopable[i], i);
                }
            }
        } else if (isObject(loopable)) {
            keys = Object.keys(loopable);
            len = keys.length;
            for (i = 0; i < len; i++) {
                fn.call(thisArg, loopable[keys[i]], keys[i]);
            }
        }
    }
    /**
     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
     * @param a0 - The array to compare
     * @param a1 - The array to compare
     * @private
     */
    function _elementsEqual(a0, a1) {
        var i, ilen, v0, v1;
        if (!a0 || !a1 || a0.length !== a1.length) {
            return false;
        }
        for (i = 0, ilen = a0.length; i < ilen; ++i) {
            v0 = a0[i];
            v1 = a1[i];
            if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns a deep copy of `source` without keeping references on objects and arrays.
     * @param source - The value to clone.
     */
    function clone(source) {
        if (isArray(source)) {
            return source.map(clone);
        }
        if (isObject(source)) {
            var target = Object.create(null);
            var keys = Object.keys(source);
            var klen = keys.length;
            var k = 0;
            for (; k < klen; ++k) {
                target[keys[k]] = clone(source[keys[k]]);
            }
            return target;
        }
        return source;
    }
    function isValidKey(key) {
        return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
    }
    /**
     * The default merger when Chart.helpers.merge is called without merger option.
     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
     * @private
     */
    function _merger(key, target, source, options) {
        if (!isValidKey(key)) {
            return;
        }
        var tval = target[key];
        var sval = source[key];
        if (isObject(tval) && isObject(sval)) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            merge(tval, sval, options);
        } else {
            target[key] = clone(sval);
        }
    }
    function merge(target, source, options) {
        var sources = isArray(source) ? source : [source];
        var ilen = sources.length;
        if (!isObject(target)) {
            return target;
        }
        options = options || {};
        var merger = options.merger || _merger;
        var current;
        for (var i = 0; i < ilen; ++i) {
            current = sources[i];
            if (!isObject(current)) {
                continue;
            }
            var keys = Object.keys(current);
            for (var k = 0, klen = keys.length; k < klen; ++k) {
                merger(keys[k], target, current, options);
            }
        }
        return target;
    }
    function mergeIf(target, source) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return merge(target, source, {
            merger: _mergerIf
        });
    }
    /**
     * Merges source[key] in target[key] only if target[key] is undefined.
     * @private
     */
    function _mergerIf(key, target, source) {
        if (!isValidKey(key)) {
            return;
        }
        var tval = target[key];
        var sval = source[key];
        if (isObject(tval) && isObject(sval)) {
            mergeIf(tval, sval);
        } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
            target[key] = clone(sval);
        }
    }
    /**
     * @private
     */
    function _deprecated(scope, value, previous, current) {
        if (value !== undefined) {
            console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
        }
    }
    // resolveObjectKey resolver cache
    var keyResolvers = {
        // Chart.helpers.core resolveObjectKey should resolve empty key to root object
        '': function _(v) {
            return v;
        },
        // default resolvers
        x: function x(o) {
            return o.x;
        },
        y: function y(o) {
            return o.y;
        }
    };
    /**
     * @private
     */
    function _splitKey(key) {
        var parts = key.split('.');
        var keys = [];
        var tmp = '';
        var _iterator = _createForOfIteratorHelper$1(parts),
            _step;
        try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var part = _step.value;
                tmp += part;
                if (tmp.endsWith('\\')) {
                    tmp = tmp.slice(0, -1) + '.';
                } else {
                    keys.push(tmp);
                    tmp = '';
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally {
            _iterator.f();
        }
        return keys;
    }
    function _getKeyResolver(key) {
        var keys = _splitKey(key);
        return function (obj) {
            var _iterator2 = _createForOfIteratorHelper$1(keys),
                _step2;
            try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var k = _step2.value;
                    if (k === '') {
                        break;
                    }
                    obj = obj && obj[k];
                }
            } catch (err) {
                _iterator2.e(err);
            } finally {
                _iterator2.f();
            }
            return obj;
        };
    }
    function resolveObjectKey(obj, key) {
        var resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
        return resolver(obj);
    }
    /**
     * @private
     */
    function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    var defined = function defined(value) {
        return typeof value !== 'undefined';
    };
    var isFunction = function isFunction(value) {
        return typeof value === 'function';
    };
    // Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
    var setsEqual = function setsEqual(a, b) {
        if (a.size !== b.size) {
            return false;
        }
        var _iterator3 = _createForOfIteratorHelper$1(a),
            _step3;
        try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var item = _step3.value;
                if (!b.has(item)) {
                    return false;
                }
            }
        } catch (err) {
            _iterator3.e(err);
        } finally {
            _iterator3.f();
        }
        return true;
    };
    /**
     * @param e - The event
     * @private
     */
    function _isClickEvent(e) {
        return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
    }

    /**
     * @alias Chart.helpers.math
     * @namespace
     */
    var PI = Math.PI;
    var TAU = 2 * PI;
    var PITAU = TAU + PI;
    var INFINITY = Number.POSITIVE_INFINITY;
    var RAD_PER_DEG = PI / 180;
    var HALF_PI = PI / 2;
    var QUARTER_PI = PI / 4;
    var TWO_THIRDS_PI = PI * 2 / 3;
    var log10 = Math.log10;
    var sign = Math.sign;
    function almostEquals(x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
    }
    /**
     * Implementation of the nice number algorithm used in determining where axis labels will go
     */
    function niceNum(range) {
        var roundedRange = Math.round(range);
        range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
        var niceRange = Math.pow(10, Math.floor(log10(range)));
        var fraction = range / niceRange;
        var niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
        return niceFraction * niceRange;
    }
    /**
     * Returns an array of factors sorted from 1 to sqrt(value)
     * @private
     */
    function _factorize(value) {
        var result = [];
        var sqrt = Math.sqrt(value);
        var i;
        for (i = 1; i < sqrt; i++) {
            if (value % i === 0) {
                result.push(i);
                result.push(value / i);
            }
        }
        if (sqrt === (sqrt | 0)) {
            result.push(sqrt);
        }
        result.sort(function (a, b) {
            return a - b;
        }).pop();
        return result;
    }
    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function almostWhole(x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon <= x && rounded + epsilon >= x;
    }
    /**
     * @private
     */
    function _setMinAndMaxByKey(array, target, property) {
        var i, ilen, value;
        for (i = 0, ilen = array.length; i < ilen; i++) {
            value = array[i][property];
            if (!isNaN(value)) {
                target.min = Math.min(target.min, value);
                target.max = Math.max(target.max, value);
            }
        }
    }
    function toRadians(degrees) {
        return degrees * (PI / 180);
    }
    function toDegrees(radians) {
        return radians * (180 / PI);
    }
    /**
     * Returns the number of decimal places
     * i.e. the number of digits after the decimal point, of the value of this Number.
     * @param x - A number.
     * @returns The number of decimal places.
     * @private
     */
    function _decimalPlaces(x) {
        if (!isNumberFinite(x)) {
            return;
        }
        var e = 1;
        var p = 0;
        while (Math.round(x * e) / e !== x) {
            e *= 10;
            p++;
        }
        return p;
    }
    // Gets the angle from vertical upright to the point about a centre.
    function getAngleFromPoint(centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x;
        var distanceFromYCenter = anglePoint.y - centrePoint.y;
        var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
        if (angle < -0.5 * PI) {
            angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
        }

        return {
            angle: angle,
            distance: radialDistanceFromCenter
        };
    }
    function distanceBetweenPoints(pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    }
    /**
     * Shortest distance between angles, in either direction.
     * @private
     */
    function _angleDiff(a, b) {
        return (a - b + PITAU) % TAU - PI;
    }
    /**
     * Normalize angle to be between 0 and 2*PI
     * @private
     */
    function _normalizeAngle(a) {
        return (a % TAU + TAU) % TAU;
    }
    /**
     * @private
     */
    function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
        var a = _normalizeAngle(angle);
        var s = _normalizeAngle(start);
        var e = _normalizeAngle(end);
        var angleToStart = _normalizeAngle(s - a);
        var angleToEnd = _normalizeAngle(e - a);
        var startToAngle = _normalizeAngle(a - s);
        var endToAngle = _normalizeAngle(a - e);
        return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
    }
    /**
     * Limit `value` between `min` and `max`
     * @param value
     * @param min
     * @param max
     * @private
     */
    function _limitValue(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
    /**
     * @param {number} value
     * @private
     */
    function _int16Range(value) {
        return _limitValue(value, -32768, 32767);
    }
    /**
     * @param value
     * @param start
     * @param end
     * @param [epsilon]
     * @private
     */
    function _isBetween(value, start, end) {
        var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e-6;
        return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
    }
    function _lookup(table, value, cmp) {
        cmp = cmp || function (index) {
            return table[index] < value;
        };
        var hi = table.length - 1;
        var lo = 0;
        var mid;
        while (hi - lo > 1) {
            mid = lo + hi >> 1;
            if (cmp(mid)) {
                lo = mid;
            } else {
                hi = mid;
            }
        }
        return {
            lo: lo,
            hi: hi
        };
    }
    /**
     * Binary search
     * @param table - the table search. must be sorted!
     * @param key - property name for the value in each entry
     * @param value - value to find
     * @param last - lookup last index
     * @private
     */
    var _lookupByKey = function _lookupByKey(table, key, value, last) {
        return _lookup(table, value, last ? function (index) {
            var ti = table[index][key];
            return ti < value || ti === value && table[index + 1][key] === value;
        } : function (index) {
            return table[index][key] < value;
        });
    };
    /**
     * Reverse binary search
     * @param table - the table search. must be sorted!
     * @param key - property name for the value in each entry
     * @param value - value to find
     * @private
     */
    var _rlookupByKey = function _rlookupByKey(table, key, value) {
        return _lookup(table, value, function (index) {
            return table[index][key] >= value;
        });
    };
    /**
     * Return subset of `values` between `min` and `max` inclusive.
     * Values are assumed to be in sorted order.
     * @param values - sorted array of values
     * @param min - min value
     * @param max - max value
     */
    function _filterBetween(values, min, max) {
        var start = 0;
        var end = values.length;
        while (start < end && values[start] < min) {
            start++;
        }
        while (end > start && values[end - 1] > max) {
            end--;
        }
        return start > 0 || end < values.length ? values.slice(start, end) : values;
    }
    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
    function listenArrayEvents(array, listener) {
        if (array._chartjs) {
            array._chartjs.listeners.push(listener);
            return;
        }
        Object.defineProperty(array, '_chartjs', {
            configurable: true,
            enumerable: false,
            value: {
                listeners: [listener]
            }
        });
        arrayEvents.forEach(function (key) {
            var method = '_onData' + _capitalize(key);
            var base = array[key];
            Object.defineProperty(array, key, {
                configurable: true,
                enumerable: false,
                value: function value() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    var res = base.apply(this, args);
                    array._chartjs.listeners.forEach(function (object) {
                        if (typeof object[method] === 'function') {
                            object[method].apply(object, args);
                        }
                    });
                    return res;
                }
            });
        });
    }
    function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;
        if (!stub) {
            return;
        }
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
        if (listeners.length > 0) {
            return;
        }
        arrayEvents.forEach(function (key) {
            delete array[key];
        });
        delete array._chartjs;
    }
    /**
     * @param items
     */
    function _arrayUnique(items) {
        var set = new Set();
        var i, ilen;
        for (i = 0, ilen = items.length; i < ilen; ++i) {
            set.add(items[i]);
        }
        if (set.size === ilen) {
            return items;
        }
        return Array.from(set);
    }
    function fontString(pixelSize, fontStyle, fontFamily) {
        return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    }
    /**
     * Request animation polyfill
     */
    var requestAnimFrame = function () {
        if (typeof window === 'undefined') {
            return function (callback) {
                return callback();
            };
        }
        return window.requestAnimationFrame;
    }();
    /**
     * Throttles calling `fn` once per animation frame
     * Latest arguments are used on the actual call
     */
    function throttled(fn, thisArg) {
        var argsToUse = [];
        var ticking = false;
        return function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }
            // Save the args for use later
            argsToUse = args;
            if (!ticking) {
                ticking = true;
                requestAnimFrame.call(window, function () {
                    ticking = false;
                    fn.apply(thisArg, argsToUse);
                });
            }
        };
    }
    /**
     * Debounces calling `fn` for `delay` ms
     */
    function debounce(fn, delay) {
        var timeout;
        return function () {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }
            if (delay) {
                clearTimeout(timeout);
                timeout = setTimeout(fn, delay, args);
            } else {
                fn.apply(this, args);
            }
            return delay;
        };
    }
    /**
     * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
     * @private
     */
    var _toLeftRightCenter = function _toLeftRightCenter(align) {
        return align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
    };
    /**
     * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
     * @private
     */
    var _alignStartEnd = function _alignStartEnd(align, start, end) {
        return align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
    };
    /**
     * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
     * @private
     */
    var _textX = function _textX(align, left, right, rtl) {
        var check = rtl ? 'left' : 'right';
        return align === check ? right : align === 'center' ? (left + right) / 2 : left;
    };
    /**
     * Return start and count of visible points.
     * @private
     */
    function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
        var pointCount = points.length;
        var start = 0;
        var count = pointCount;
        if (meta._sorted) {
            var iScale = meta.iScale,
                _parsed = meta._parsed;
            var axis = iScale.axis;
            var _iScale$getUserBounds = iScale.getUserBounds(),
                min = _iScale$getUserBounds.min,
                max = _iScale$getUserBounds.max,
                minDefined = _iScale$getUserBounds.minDefined,
                maxDefined = _iScale$getUserBounds.maxDefined;
            if (minDefined) {
                start = _limitValue(Math.min(
                    // @ts-expect-error Need to type _parsed
                    _lookupByKey(_parsed, iScale.axis, min).lo,
                    // @ts-expect-error Need to fix types on _lookupByKey
                    animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
            }
            if (maxDefined) {
                count = _limitValue(Math.max(
                    // @ts-expect-error Need to type _parsed
                    _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
                    // @ts-expect-error Need to fix types on _lookupByKey
                    animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
            } else {
                count = pointCount - start;
            }
        }
        return {
            start: start,
            count: count
        };
    }
    /**
     * Checks if the scale ranges have changed.
     * @param {object} meta - dataset meta.
     * @returns {boolean}
     * @private
     */
    function _scaleRangesChanged(meta) {
        var xScale = meta.xScale,
            yScale = meta.yScale,
            _scaleRanges = meta._scaleRanges;
        var newRanges = {
            xmin: xScale.min,
            xmax: xScale.max,
            ymin: yScale.min,
            ymax: yScale.max
        };
        if (!_scaleRanges) {
            meta._scaleRanges = newRanges;
            return true;
        }
        var changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
        Object.assign(_scaleRanges, newRanges);
        return changed;
    }
    var atEdge = function atEdge(t) {
        return t === 0 || t === 1;
    };
    var elasticIn = function elasticIn(t, s, p) {
        return -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
    };
    var elasticOut = function elasticOut(t, s, p) {
        return Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
    };
    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easing.effects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
        linear: function linear(t) {
            return t;
        },
        easeInQuad: function easeInQuad(t) {
            return t * t;
        },
        easeOutQuad: function easeOutQuad(t) {
            return -t * (t - 2);
        },
        easeInOutQuad: function easeInOutQuad(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);
        },
        easeInCubic: function easeInCubic(t) {
            return t * t * t;
        },
        easeOutCubic: function easeOutCubic(t) {
            return (t -= 1) * t * t + 1;
        },
        easeInOutCubic: function easeInOutCubic(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function easeInQuart(t) {
            return t * t * t * t;
        },
        easeOutQuart: function easeOutQuart(t) {
            return -((t -= 1) * t * t * t - 1);
        },
        easeInOutQuart: function easeInOutQuart(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function easeInQuint(t) {
            return t * t * t * t * t;
        },
        easeOutQuint: function easeOutQuint(t) {
            return (t -= 1) * t * t * t * t + 1;
        },
        easeInOutQuint: function easeInOutQuint(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function easeInSine(t) {
            return -Math.cos(t * HALF_PI) + 1;
        },
        easeOutSine: function easeOutSine(t) {
            return Math.sin(t * HALF_PI);
        },
        easeInOutSine: function easeInOutSine(t) {
            return -0.5 * (Math.cos(PI * t) - 1);
        },
        easeInExpo: function easeInExpo(t) {
            return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
        },
        easeOutExpo: function easeOutExpo(t) {
            return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
        },
        easeInOutExpo: function easeInOutExpo(t) {
            return atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2);
        },
        easeInCirc: function easeInCirc(t) {
            return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);
        },
        easeOutCirc: function easeOutCirc(t) {
            return Math.sqrt(1 - (t -= 1) * t);
        },
        easeInOutCirc: function easeInOutCirc(t) {
            return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function easeInElastic(t) {
            return atEdge(t) ? t : elasticIn(t, 0.075, 0.3);
        },
        easeOutElastic: function easeOutElastic(t) {
            return atEdge(t) ? t : elasticOut(t, 0.075, 0.3);
        },
        easeInOutElastic: function easeInOutElastic(t) {
            var s = 0.1125;
            var p = 0.45;
            return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
        },
        easeInBack: function easeInBack(t) {
            var s = 1.70158;
            return t * t * ((s + 1) * t - s);
        },
        easeOutBack: function easeOutBack(t) {
            var s = 1.70158;
            return (t -= 1) * t * ((s + 1) * t + s) + 1;
        },
        easeInOutBack: function easeInOutBack(t) {
            var s = 1.70158;
            if ((t /= 0.5) < 1) {
                return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
            }
            return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
        },
        easeInBounce: function easeInBounce(t) {
            return 1 - effects.easeOutBounce(1 - t);
        },
        easeOutBounce: function easeOutBounce(t) {
            var m = 7.5625;
            var d = 2.75;
            if (t < 1 / d) {
                return m * t * t;
            }
            if (t < 2 / d) {
                return m * (t -= 1.5 / d) * t + 0.75;
            }
            if (t < 2.5 / d) {
                return m * (t -= 2.25 / d) * t + 0.9375;
            }
            return m * (t -= 2.625 / d) * t + 0.984375;
        },
        easeInOutBounce: function easeInOutBounce(t) {
            return t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
        }
    };
    function isPatternOrGradient(value) {
        if (value && _typeof$z(value) === 'object') {
            var type = value.toString();
            return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
        }
        return false;
    }
    function color(value) {
        return isPatternOrGradient(value) ? value : new Color(value);
    }
    function getHoverColor(value) {
        return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
    }
    var numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
    var colors = ['color', 'borderColor', 'backgroundColor'];
    function applyAnimationsDefaults(defaults) {
        defaults.set('animation', {
            delay: undefined,
            duration: 1000,
            easing: 'easeOutQuart',
            fn: undefined,
            from: undefined,
            loop: undefined,
            to: undefined,
            type: undefined
        });
        defaults.describe('animation', {
            _fallback: false,
            _indexable: false,
            _scriptable: function _scriptable(name) {
                return name !== 'onProgress' && name !== 'onComplete' && name !== 'fn';
            }
        });
        defaults.set('animations', {
            colors: {
                type: 'color',
                properties: colors
            },
            numbers: {
                type: 'number',
                properties: numbers
            }
        });
        defaults.describe('animations', {
            _fallback: 'animation'
        });
        defaults.set('transitions', {
            active: {
                animation: {
                    duration: 400
                }
            },
            resize: {
                animation: {
                    duration: 0
                }
            },
            show: {
                animations: {
                    colors: {
                        from: 'transparent'
                    },
                    visible: {
                        type: 'boolean',
                        duration: 0
                    }
                }
            },
            hide: {
                animations: {
                    colors: {
                        to: 'transparent'
                    },
                    visible: {
                        type: 'boolean',
                        easing: 'linear',
                        fn: function fn(v) {
                            return v | 0;
                        }
                    }
                }
            }
        });
    }
    function applyLayoutsDefaults(defaults) {
        defaults.set('layout', {
            autoPadding: true,
            padding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            }
        });
    }
    var intlCache = new Map();
    function getNumberFormat(locale, options) {
        options = options || {};
        var cacheKey = locale + JSON.stringify(options);
        var formatter = intlCache.get(cacheKey);
        if (!formatter) {
            formatter = new Intl.NumberFormat(locale, options);
            intlCache.set(cacheKey, formatter);
        }
        return formatter;
    }
    function formatNumber(num, locale, options) {
        return getNumberFormat(locale, options).format(num);
    }
    var formatters$4 = {
        values: function values(value) {
            return isArray(value) ? value : '' + value;
        },
        numeric: function numeric(tickValue, index, ticks) {
            if (tickValue === 0) {
                return '0';
            }
            var locale = this.chart.options.locale;
            var notation;
            var delta = tickValue;
            if (ticks.length > 1) {
                var maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
                if (maxTick < 1e-4 || maxTick > 1e+15) {
                    notation = 'scientific';
                }
                delta = calculateDelta(tickValue, ticks);
            }
            var logDelta = log10(Math.abs(delta));
            var numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
            var options = {
                notation: notation,
                minimumFractionDigits: numDecimal,
                maximumFractionDigits: numDecimal
            };
            Object.assign(options, this.options.ticks.format);
            return formatNumber(tickValue, locale, options);
        },
        logarithmic: function logarithmic(tickValue, index, ticks) {
            if (tickValue === 0) {
                return '0';
            }
            var remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
            if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {
                return formatters$4.numeric.call(this, tickValue, index, ticks);
            }
            return '';
        }
    };
    function calculateDelta(tickValue, ticks) {
        var delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
        if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
            delta = tickValue - Math.floor(tickValue);
        }
        return delta;
    }
    var Ticks = {
        formatters: formatters$4
    };
    function applyScaleDefaults(defaults) {
        defaults.set('scale', {
            display: true,
            offset: false,
            reverse: false,
            beginAtZero: false,
            bounds: 'ticks',
            grace: 0,
            grid: {
                display: true,
                lineWidth: 1,
                drawOnChartArea: true,
                drawTicks: true,
                tickLength: 8,
                tickWidth: function tickWidth(_ctx, options) {
                    return options.lineWidth;
                },
                tickColor: function tickColor(_ctx, options) {
                    return options.color;
                },
                offset: false
            },
            border: {
                display: true,
                dash: [],
                dashOffset: 0.0,
                width: 1
            },
            title: {
                display: false,
                text: '',
                padding: {
                    top: 4,
                    bottom: 4
                }
            },
            ticks: {
                minRotation: 0,
                maxRotation: 50,
                mirror: false,
                textStrokeWidth: 0,
                textStrokeColor: '',
                padding: 3,
                display: true,
                autoSkip: true,
                autoSkipPadding: 3,
                labelOffset: 0,
                callback: Ticks.formatters.values,
                minor: {},
                major: {},
                align: 'center',
                crossAlign: 'near',
                showLabelBackdrop: false,
                backdropColor: 'rgba(255, 255, 255, 0.75)',
                backdropPadding: 2
            }
        });
        defaults.route('scale.ticks', 'color', '', 'color');
        defaults.route('scale.grid', 'color', '', 'borderColor');
        defaults.route('scale.border', 'color', '', 'borderColor');
        defaults.route('scale.title', 'color', '', 'color');
        defaults.describe('scale', {
            _fallback: false,
            _scriptable: function _scriptable(name) {
                return !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser';
            },
            _indexable: function _indexable(name) {
                return name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash';
            }
        });
        defaults.describe('scales', {
            _fallback: 'scale'
        });
        defaults.describe('scale.ticks', {
            _scriptable: function _scriptable(name) {
                return name !== 'backdropPadding' && name !== 'callback';
            },
            _indexable: function _indexable(name) {
                return name !== 'backdropPadding';
            }
        });
    }
    var overrides = Object.create(null);
    var descriptors = Object.create(null);
    function getScope$1(node, key) {
        if (!key) {
            return node;
        }
        var keys = key.split('.');
        for (var i = 0, n = keys.length; i < n; ++i) {
            var k = keys[i];
            node = node[k] || (node[k] = Object.create(null));
        }
        return node;
    }
    function _set(root, scope, values) {
        if (typeof scope === 'string') {
            return merge(getScope$1(root, scope), values);
        }
        return merge(getScope$1(root, ''), scope);
    }
    var Defaults = /*#__PURE__*/function () {
        function Defaults(_descriptors, _appliers) {
            _classCallCheck$x(this, Defaults);
            this.animation = undefined;
            this.backgroundColor = 'rgba(0,0,0,0.1)';
            this.borderColor = 'rgba(0,0,0,0.1)';
            this.color = '#666';
            this.datasets = {};
            this.devicePixelRatio = function (context) {
                return context.chart.platform.getDevicePixelRatio();
            };
            this.elements = {};
            this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'];
            this.font = {
                family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                size: 12,
                style: 'normal',
                lineHeight: 1.2,
                weight: null
            };
            this.hover = {};
            this.hoverBackgroundColor = function (ctx, options) {
                return getHoverColor(options.backgroundColor);
            };
            this.hoverBorderColor = function (ctx, options) {
                return getHoverColor(options.borderColor);
            };
            this.hoverColor = function (ctx, options) {
                return getHoverColor(options.color);
            };
            this.indexAxis = 'x';
            this.interaction = {
                mode: 'nearest',
                intersect: true,
                includeInvisible: false
            };
            this.maintainAspectRatio = true;
            this.onHover = null;
            this.onClick = null;
            this.parsing = true;
            this.plugins = {};
            this.responsive = true;
            this.scale = undefined;
            this.scales = {};
            this.showLine = true;
            this.drawActiveElementsOnTop = true;
            this.describe(_descriptors);
            this.apply(_appliers);
        }
        _createClass$x(Defaults, [{
            key: "set",
            value: function set(scope, values) {
                return _set(this, scope, values);
            }
        }, {
            key: "get",
            value: function get(scope) {
                return getScope$1(this, scope);
            }
        }, {
            key: "describe",
            value: function describe(scope, values) {
                return _set(descriptors, scope, values);
            }
        }, {
            key: "override",
            value: function override(scope, values) {
                return _set(overrides, scope, values);
            }
        }, {
            key: "route",
            value: function route(scope, name, targetScope, targetName) {
                var _Object$definePropert;
                var scopeObject = getScope$1(this, scope);
                var targetScopeObject = getScope$1(this, targetScope);
                var privateName = '_' + name;
                Object.defineProperties(scopeObject, (_Object$definePropert = {}, _defineProperty$w(_Object$definePropert, privateName, {
                    value: scopeObject[name],
                    writable: true
                }), _defineProperty$w(_Object$definePropert, name, {
                    enumerable: true,
                    get: function get() {
                        var local = this[privateName];
                        var target = targetScopeObject[targetName];
                        if (isObject(local)) {
                            return Object.assign({}, target, local);
                        }
                        return valueOrDefault(local, target);
                    },
                    set: function set(value) {
                        this[privateName] = value;
                    }
                }), _Object$definePropert));
            }
        }, {
            key: "apply",
            value: function apply(appliers) {
                var _this = this;
                appliers.forEach(function (apply) {
                    return apply(_this);
                });
            }
        }]);
        return Defaults;
    }();
    var defaults = /* #__PURE__ */new Defaults({
        _scriptable: function _scriptable(name) {
            return !name.startsWith('on');
        },
        _indexable: function _indexable(name) {
            return name !== 'events';
        },
        hover: {
            _fallback: 'interaction'
        },
        interaction: {
            _scriptable: false,
            _indexable: false
        }
    }, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);
    function toFontString(font) {
        if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
            return null;
        }
        return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
    }
    function _measureText(ctx, data, gc, longest, string) {
        var textWidth = data[string];
        if (!textWidth) {
            textWidth = data[string] = ctx.measureText(string).width;
            gc.push(string);
        }
        if (textWidth > longest) {
            longest = textWidth;
        }
        return longest;
    }
    function _longestText(ctx, font, arrayOfThings, cache) {
        cache = cache || {};
        var data = cache.data = cache.data || {};
        var gc = cache.garbageCollect = cache.garbageCollect || [];
        if (cache.font !== font) {
            data = cache.data = {};
            gc = cache.garbageCollect = [];
            cache.font = font;
        }
        ctx.save();
        ctx.font = font;
        var longest = 0;
        var ilen = arrayOfThings.length;
        var i, j, jlen, thing, nestedThing;
        for (i = 0; i < ilen; i++) {
            thing = arrayOfThings[i];
            if (thing !== undefined && thing !== null && isArray(thing) !== true) {
                longest = _measureText(ctx, data, gc, longest, thing);
            } else if (isArray(thing)) {
                for (j = 0, jlen = thing.length; j < jlen; j++) {
                    nestedThing = thing[j];
                    if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
                        longest = _measureText(ctx, data, gc, longest, nestedThing);
                    }
                }
            }
        }
        ctx.restore();
        var gcLen = gc.length / 2;
        if (gcLen > arrayOfThings.length) {
            for (i = 0; i < gcLen; i++) {
                delete data[gc[i]];
            }
            gc.splice(0, gcLen);
        }
        return longest;
    }
    function _alignPixel(chart, pixel, width) {
        var devicePixelRatio = chart.currentDevicePixelRatio;
        var halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
        return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    }
    function clearCanvas(canvas, ctx) {
        ctx = ctx || canvas.getContext('2d');
        ctx.save();
        ctx.resetTransform();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.restore();
    }
    function drawPoint(ctx, options, x, y) {
        drawPointLegend(ctx, options, x, y, null);
    }
    function drawPointLegend(ctx, options, x, y, w) {
        var type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
        var style = options.pointStyle;
        var rotation = options.rotation;
        var radius = options.radius;
        var rad = (rotation || 0) * RAD_PER_DEG;
        if (style && _typeof$z(style) === 'object') {
            type = style.toString();
            if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(rad);
                ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
                ctx.restore();
                return;
            }
        }
        if (isNaN(radius) || radius <= 0) {
            return;
        }
        ctx.beginPath();
        switch (style) {
            default:
                if (w) {
                    ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
                } else {
                    ctx.arc(x, y, radius, 0, TAU);
                }
                ctx.closePath();
                break;
            case 'triangle':
                width = w ? w / 2 : radius;
                ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                ctx.closePath();
                break;
            case 'rectRounded':
                cornerRadius = radius * 0.516;
                size = radius - cornerRadius;
                xOffset = Math.cos(rad + QUARTER_PI) * size;
                xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
                yOffset = Math.sin(rad + QUARTER_PI) * size;
                yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
                ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
                ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
                ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
                ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
                ctx.closePath();
                break;
            case 'rect':
                if (!rotation) {
                    size = Math.SQRT1_2 * radius;
                    width = w ? w / 2 : size;
                    ctx.rect(x - width, y - size, 2 * width, 2 * size);
                    break;
                }
                rad += QUARTER_PI;
            case 'rectRot':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                ctx.closePath();
                break;
            case 'crossRot':
                rad += QUARTER_PI;
            case 'cross':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                break;
            case 'star':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                rad += QUARTER_PI;
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                break;
            case 'line':
                xOffset = w ? w / 2 : Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                break;
            case 'dash':
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
                break;
            case false:
                ctx.closePath();
                break;
        }
        ctx.fill();
        if (options.borderWidth > 0) {
            ctx.stroke();
        }
    }
    function _isPointInArea(point, area, margin) {
        margin = margin || 0.5;
        return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
    }
    function clipArea(ctx, area) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
        ctx.clip();
    }
    function unclipArea(ctx) {
        ctx.restore();
    }
    function _steppedLineTo(ctx, previous, target, flip, mode) {
        if (!previous) {
            return ctx.lineTo(target.x, target.y);
        }
        if (mode === 'middle') {
            var midpoint = (previous.x + target.x) / 2.0;
            ctx.lineTo(midpoint, previous.y);
            ctx.lineTo(midpoint, target.y);
        } else if (mode === 'after' !== !!flip) {
            ctx.lineTo(previous.x, target.y);
        } else {
            ctx.lineTo(target.x, previous.y);
        }
        ctx.lineTo(target.x, target.y);
    }
    function _bezierCurveTo(ctx, previous, target, flip) {
        if (!previous) {
            return ctx.lineTo(target.x, target.y);
        }
        ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
    }
    function renderText(ctx, text, x, y, font) {
        var opts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var lines = isArray(text) ? text : [text];
        var stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
        var i, line;
        ctx.save();
        ctx.font = font.string;
        setRenderOpts(ctx, opts);
        for (i = 0; i < lines.length; ++i) {
            line = lines[i];
            if (opts.backdrop) {
                drawBackdrop(ctx, opts.backdrop);
            }
            if (stroke) {
                if (opts.strokeColor) {
                    ctx.strokeStyle = opts.strokeColor;
                }
                if (!isNullOrUndef(opts.strokeWidth)) {
                    ctx.lineWidth = opts.strokeWidth;
                }
                ctx.strokeText(line, x, y, opts.maxWidth);
            }
            ctx.fillText(line, x, y, opts.maxWidth);
            decorateText(ctx, x, y, line, opts);
            y += font.lineHeight;
        }
        ctx.restore();
    }
    function setRenderOpts(ctx, opts) {
        if (opts.translation) {
            ctx.translate(opts.translation[0], opts.translation[1]);
        }
        if (!isNullOrUndef(opts.rotation)) {
            ctx.rotate(opts.rotation);
        }
        if (opts.color) {
            ctx.fillStyle = opts.color;
        }
        if (opts.textAlign) {
            ctx.textAlign = opts.textAlign;
        }
        if (opts.textBaseline) {
            ctx.textBaseline = opts.textBaseline;
        }
    }
    function decorateText(ctx, x, y, line, opts) {
        if (opts.strikethrough || opts.underline) {
            var metrics = ctx.measureText(line);
            var left = x - metrics.actualBoundingBoxLeft;
            var right = x + metrics.actualBoundingBoxRight;
            var top = y - metrics.actualBoundingBoxAscent;
            var bottom = y + metrics.actualBoundingBoxDescent;
            var yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
            ctx.strokeStyle = ctx.fillStyle;
            ctx.beginPath();
            ctx.lineWidth = opts.decorationWidth || 2;
            ctx.moveTo(left, yDecoration);
            ctx.lineTo(right, yDecoration);
            ctx.stroke();
        }
    }
    function drawBackdrop(ctx, opts) {
        var oldColor = ctx.fillStyle;
        ctx.fillStyle = opts.color;
        ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
        ctx.fillStyle = oldColor;
    }
    function addRoundedRectPath(ctx, rect) {
        var x = rect.x,
            y = rect.y,
            w = rect.w,
            h = rect.h,
            radius = rect.radius;
        ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
        ctx.lineTo(x, y + h - radius.bottomLeft);
        ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
        ctx.lineTo(x + w - radius.bottomRight, y + h);
        ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
        ctx.lineTo(x + w, y + radius.topRight);
        ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
        ctx.lineTo(x + radius.topLeft, y);
    }
    var LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
    var FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
    /**
     * @alias Chart.helpers.options
     * @namespace
     */ /**
     * Converts the given line height `value` in pixels for a specific font `size`.
     * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
     * @param size - The font size (in pixels) used to resolve relative `value`.
     * @returns The effective line height in pixels (size * 1.2 if value is invalid).
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     * @since 2.7.0
     */
    function toLineHeight(value, size) {
        var matches = ('' + value).match(LINE_HEIGHT);
        if (!matches || matches[1] === 'normal') {
            return size * 1.2;
        }
        value = +matches[2];
        switch (matches[3]) {
            case 'px':
                return value;
            case '%':
                value /= 100;
                break;
        }
        return size * value;
    }
    var numberOrZero = function numberOrZero(v) {
        return +v || 0;
    };
    function _readValueToProps(value, props) {
        var ret = {};
        var objProps = isObject(props);
        var keys = objProps ? Object.keys(props) : props;
        var read = isObject(value) ? objProps ? function (prop) {
            return valueOrDefault(value[prop], value[props[prop]]);
        } : function (prop) {
            return value[prop];
        } : function () {
            return value;
        };
        var _iterator4 = _createForOfIteratorHelper$1(keys),
            _step4;
        try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var prop = _step4.value;
                ret[prop] = numberOrZero(read(prop));
            }
        } catch (err) {
            _iterator4.e(err);
        } finally {
            _iterator4.f();
        }
        return ret;
    }
    /**
     * Converts the given value into a TRBL object.
     * @param value - If a number, set the value to all TRBL component,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     *  x / y are shorthands for same value for left/right and top/bottom.
     * @returns The padding values (top, right, bottom, left)
     * @since 3.0.0
     */
    function toTRBL(value) {
        return _readValueToProps(value, {
            top: 'y',
            right: 'x',
            bottom: 'y',
            left: 'x'
        });
    }
    /**
     * Converts the given value into a TRBL corners object (similar with css border-radius).
     * @param value - If a number, set the value to all TRBL corner components,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
     * @since 3.0.0
     */
    function toTRBLCorners(value) {
        return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
    }
    /**
     * Converts the given value into a padding object with pre-computed width/height.
     * @param value - If a number, set the value to all TRBL component,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     *  x / y are shorthands for same value for left/right and top/bottom.
     * @returns The padding values (top, right, bottom, left, width, height)
     * @since 2.7.0
     */
    function toPadding(value) {
        var obj = toTRBL(value);
        obj.width = obj.left + obj.right;
        obj.height = obj.top + obj.bottom;
        return obj;
    }
    /**
     * Parses font options and returns the font object.
     * @param options - A object that contains font options to be parsed.
     * @param fallback - A object that contains fallback font options.
     * @return The font object.
     * @private
     */
    function toFont(options, fallback) {
        options = options || {};
        fallback = fallback || defaults.font;
        var size = valueOrDefault(options.size, fallback.size);
        if (typeof size === 'string') {
            size = parseInt(size, 10);
        }
        var style = valueOrDefault(options.style, fallback.style);
        if (style && !('' + style).match(FONT_STYLE)) {
            console.warn('Invalid font style specified: "' + style + '"');
            style = undefined;
        }
        var font = {
            family: valueOrDefault(options.family, fallback.family),
            lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
            size: size,
            style: style,
            weight: valueOrDefault(options.weight, fallback.weight),
            string: ''
        };
        font.string = toFontString(font);
        return font;
    }
    /**
     * Evaluates the given `inputs` sequentially and returns the first defined value.
     * @param inputs - An array of values, falling back to the last value.
     * @param context - If defined and the current value is a function, the value
     * is called with `context` as first argument and the result becomes the new input.
     * @param index - If defined and the current value is an array, the value
     * at `index` become the new input.
     * @param info - object to return information about resolution in
     * @param info.cacheable - Will be set to `false` if option is not cacheable.
     * @since 2.7.0
     */
    function resolve(inputs, context, index, info) {
        var cacheable = true;
        var i, ilen, value;
        for (i = 0, ilen = inputs.length; i < ilen; ++i) {
            value = inputs[i];
            if (value === undefined) {
                continue;
            }
            if (context !== undefined && typeof value === 'function') {
                value = value(context);
                cacheable = false;
            }
            if (index !== undefined && isArray(value)) {
                value = value[index % value.length];
                cacheable = false;
            }
            if (value !== undefined) {
                if (info && !cacheable) {
                    info.cacheable = false;
                }
                return value;
            }
        }
    }
    /**
     * @param minmax
     * @param grace
     * @param beginAtZero
     * @private
     */
    function _addGrace(minmax, grace, beginAtZero) {
        var min = minmax.min,
            max = minmax.max;
        var change = toDimension(grace, (max - min) / 2);
        var keepZero = function keepZero(value, add) {
            return beginAtZero && value === 0 ? 0 : value + add;
        };
        return {
            min: keepZero(min, -Math.abs(change)),
            max: keepZero(max, change)
        };
    }
    function createContext(parentContext, context) {
        return Object.assign(Object.create(parentContext), context);
    }
    function _createResolver(scopes) {
        var _cache;
        var prefixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];
        var rootScopes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : scopes;
        var fallback = arguments.length > 3 ? arguments[3] : undefined;
        var getTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
            return scopes[0];
        };
        if (!defined(fallback)) {
            fallback = _resolve('_fallback', scopes);
        }
        var cache = (_cache = {}, _defineProperty$w(_cache, Symbol.toStringTag, 'Object'), _defineProperty$w(_cache, "_cacheable", true), _defineProperty$w(_cache, "_scopes", scopes), _defineProperty$w(_cache, "_rootScopes", rootScopes), _defineProperty$w(_cache, "_fallback", fallback), _defineProperty$w(_cache, "_getTarget", getTarget), _defineProperty$w(_cache, "override", function override(scope) {
            return _createResolver([scope].concat(_toConsumableArray(scopes)), prefixes, rootScopes, fallback);
        }), _cache);
        return new Proxy(cache, {
            deleteProperty: function deleteProperty(target, prop) {
                delete target[prop];
                delete target._keys;
                delete scopes[0][prop];
                return true;
            },
            get: function get(target, prop) {
                return _cached(target, prop, function () {
                    return _resolveWithPrefixes(prop, prefixes, scopes, target);
                });
            },
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, prop) {
                return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
            },
            getPrototypeOf: function getPrototypeOf() {
                return Reflect.getPrototypeOf(scopes[0]);
            },
            has: function has(target, prop) {
                return getKeysFromAllScopes(target).includes(prop);
            },
            ownKeys: function ownKeys(target) {
                return getKeysFromAllScopes(target);
            },
            set: function set(target, prop, value) {
                var storage = target._storage || (target._storage = getTarget());
                target[prop] = storage[prop] = value;
                delete target._keys;
                return true;
            }
        });
    }
    function _attachContext(proxy, context, subProxy, descriptorDefaults) {
        var cache = {
            _cacheable: false,
            _proxy: proxy,
            _context: context,
            _subProxy: subProxy,
            _stack: new Set(),
            _descriptors: _descriptors(proxy, descriptorDefaults),
            setContext: function setContext(ctx) {
                return _attachContext(proxy, ctx, subProxy, descriptorDefaults);
            },
            override: function override(scope) {
                return _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults);
            }
        };
        return new Proxy(cache, {
            deleteProperty: function deleteProperty(target, prop) {
                delete target[prop];
                delete proxy[prop];
                return true;
            },
            get: function get(target, prop, receiver) {
                return _cached(target, prop, function () {
                    return _resolveWithContext(target, prop, receiver);
                });
            },
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, prop) {
                return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                    enumerable: true,
                    configurable: true
                } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
            },
            getPrototypeOf: function getPrototypeOf() {
                return Reflect.getPrototypeOf(proxy);
            },
            has: function has(target, prop) {
                return Reflect.has(proxy, prop);
            },
            ownKeys: function ownKeys() {
                return Reflect.ownKeys(proxy);
            },
            set: function set(target, prop, value) {
                proxy[prop] = value;
                delete target[prop];
                return true;
            }
        });
    }
    function _descriptors(proxy) {
        var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            scriptable: true,
            indexable: true
        };
        var _proxy$_scriptable = proxy._scriptable,
            _scriptable = _proxy$_scriptable === void 0 ? defaults.scriptable : _proxy$_scriptable,
            _proxy$_indexable = proxy._indexable,
            _indexable = _proxy$_indexable === void 0 ? defaults.indexable : _proxy$_indexable,
            _proxy$_allKeys = proxy._allKeys,
            _allKeys = _proxy$_allKeys === void 0 ? defaults.allKeys : _proxy$_allKeys;
        return {
            allKeys: _allKeys,
            scriptable: _scriptable,
            indexable: _indexable,
            isScriptable: isFunction(_scriptable) ? _scriptable : function () {
                return _scriptable;
            },
            isIndexable: isFunction(_indexable) ? _indexable : function () {
                return _indexable;
            }
        };
    }
    var readKey = function readKey(prefix, name) {
        return prefix ? prefix + _capitalize(name) : name;
    };
    var needsSubResolver = function needsSubResolver(prop, value) {
        return isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
    };
    function _cached(target, prop, resolve) {
        if (Object.prototype.hasOwnProperty.call(target, prop)) {
            return target[prop];
        }
        var value = resolve();
        target[prop] = value;
        return value;
    }
    function _resolveWithContext(target, prop, receiver) {
        var _proxy = target._proxy,
            _context = target._context,
            _subProxy = target._subProxy,
            descriptors = target._descriptors;
        var value = _proxy[prop];
        if (isFunction(value) && descriptors.isScriptable(prop)) {
            value = _resolveScriptable(prop, value, target, receiver);
        }
        if (isArray(value) && value.length) {
            value = _resolveArray(prop, value, target, descriptors.isIndexable);
        }
        if (needsSubResolver(prop, value)) {
            value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
        }
        return value;
    }
    function _resolveScriptable(prop, value, target, receiver) {
        var _proxy = target._proxy,
            _context = target._context,
            _subProxy = target._subProxy,
            _stack = target._stack;
        if (_stack.has(prop)) {
            throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
        }
        _stack.add(prop);
        value = value(_context, _subProxy || receiver);
        _stack["delete"](prop);
        if (needsSubResolver(prop, value)) {
            value = createSubResolver(_proxy._scopes, _proxy, prop, value);
        }
        return value;
    }
    function _resolveArray(prop, value, target, isIndexable) {
        var _proxy = target._proxy,
            _context = target._context,
            _subProxy = target._subProxy,
            descriptors = target._descriptors;
        if (defined(_context.index) && isIndexable(prop)) {
            value = value[_context.index % value.length];
        } else if (isObject(value[0])) {
            var arr = value;
            var scopes = _proxy._scopes.filter(function (s) {
                return s !== arr;
            });
            value = [];
            var _iterator5 = _createForOfIteratorHelper$1(arr),
                _step5;
            try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var item = _step5.value;
                    var resolver = createSubResolver(scopes, _proxy, prop, item);
                    value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
                }
            } catch (err) {
                _iterator5.e(err);
            } finally {
                _iterator5.f();
            }
        }
        return value;
    }
    function resolveFallback(fallback, prop, value) {
        return isFunction(fallback) ? fallback(prop, value) : fallback;
    }
    var getScope = function getScope(key, parent) {
        return key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
    };
    function addScopes(set, parentScopes, key, parentFallback, value) {
        var _iterator6 = _createForOfIteratorHelper$1(parentScopes),
            _step6;
        try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var parent = _step6.value;
                var scope = getScope(key, parent);
                if (scope) {
                    set.add(scope);
                    var fallback = resolveFallback(scope._fallback, key, value);
                    if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
                        return fallback;
                    }
                } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
                    return null;
                }
            }
        } catch (err) {
            _iterator6.e(err);
        } finally {
            _iterator6.f();
        }
        return false;
    }
    function createSubResolver(parentScopes, resolver, prop, value) {
        var rootScopes = resolver._rootScopes;
        var fallback = resolveFallback(resolver._fallback, prop, value);
        var allScopes = [].concat(_toConsumableArray(parentScopes), _toConsumableArray(rootScopes));
        var set = new Set();
        set.add(value);
        var key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
        if (key === null) {
            return false;
        }
        if (defined(fallback) && fallback !== prop) {
            key = addScopesFromKey(set, allScopes, fallback, key, value);
            if (key === null) {
                return false;
            }
        }
        return _createResolver(Array.from(set), [''], rootScopes, fallback, function () {
            return subGetTarget(resolver, prop, value);
        });
    }
    function addScopesFromKey(set, allScopes, key, fallback, item) {
        while (key) {
            key = addScopes(set, allScopes, key, fallback, item);
        }
        return key;
    }
    function subGetTarget(resolver, prop, value) {
        var parent = resolver._getTarget();
        if (!(prop in parent)) {
            parent[prop] = {};
        }
        var target = parent[prop];
        if (isArray(target) && isObject(value)) {
            return value;
        }
        return target || {};
    }
    function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
        var value;
        var _iterator7 = _createForOfIteratorHelper$1(prefixes),
            _step7;
        try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var prefix = _step7.value;
                value = _resolve(readKey(prefix, prop), scopes);
                if (defined(value)) {
                    return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
                }
            }
        } catch (err) {
            _iterator7.e(err);
        } finally {
            _iterator7.f();
        }
    }
    function _resolve(key, scopes) {
        var _iterator8 = _createForOfIteratorHelper$1(scopes),
            _step8;
        try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var scope = _step8.value;
                if (!scope) {
                    continue;
                }
                var value = scope[key];
                if (defined(value)) {
                    return value;
                }
            }
        } catch (err) {
            _iterator8.e(err);
        } finally {
            _iterator8.f();
        }
    }
    function getKeysFromAllScopes(target) {
        var keys = target._keys;
        if (!keys) {
            keys = target._keys = resolveKeysFromAllScopes(target._scopes);
        }
        return keys;
    }
    function resolveKeysFromAllScopes(scopes) {
        var set = new Set();
        var _iterator9 = _createForOfIteratorHelper$1(scopes),
            _step9;
        try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var scope = _step9.value;
                var _iterator10 = _createForOfIteratorHelper$1(Object.keys(scope).filter(function (k) {
                        return !k.startsWith('_');
                    })),
                    _step10;
                try {
                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                        var key = _step10.value;
                        set.add(key);
                    }
                } catch (err) {
                    _iterator10.e(err);
                } finally {
                    _iterator10.f();
                }
            }
        } catch (err) {
            _iterator9.e(err);
        } finally {
            _iterator9.f();
        }
        return Array.from(set);
    }
    function _parseObjectDataRadialScale(meta, data, start, count) {
        var iScale = meta.iScale;
        var _this$_parsing$key = this._parsing.key,
            key = _this$_parsing$key === void 0 ? 'r' : _this$_parsing$key;
        var parsed = new Array(count);
        var i, ilen, index, item;
        for (i = 0, ilen = count; i < ilen; ++i) {
            index = i + start;
            item = data[index];
            parsed[i] = {
                r: iScale.parse(resolveObjectKey(item, key), index)
            };
        }
        return parsed;
    }
    var EPSILON = Number.EPSILON || 1e-14;
    var getPoint = function getPoint(points, i) {
        return i < points.length && !points[i].skip && points[i];
    };
    var getValueAxis = function getValueAxis(indexAxis) {
        return indexAxis === 'x' ? 'y' : 'x';
    };
    function splineCurve(firstPoint, middlePoint, afterPoint, t) {
        // Props to Rob Spencer at scaled innovation for his post on splining between points
        // http://scaledinnovation.com/analytics/splines/aboutSplines.html
        // This function must also respect "skipped" points
        var previous = firstPoint.skip ? middlePoint : firstPoint;
        var current = middlePoint;
        var next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = distanceBetweenPoints(current, previous);
        var d12 = distanceBetweenPoints(next, current);
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12);
        // If all points are the same, s01 & s02 will be inf
        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01; // scaling factor for triangle Ta
        var fb = t * s12;
        return {
            previous: {
                x: current.x - fa * (next.x - previous.x),
                y: current.y - fa * (next.y - previous.y)
            },
            next: {
                x: current.x + fb * (next.x - previous.x),
                y: current.y + fb * (next.y - previous.y)
            }
        };
    }
    /**
     * Adjust tangents to ensure monotonic properties
     */
    function monotoneAdjust(points, deltaK, mK) {
        var pointsLen = points.length;
        var alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
        var pointAfter = getPoint(points, 0);
        for (var i = 0; i < pointsLen - 1; ++i) {
            pointCurrent = pointAfter;
            pointAfter = getPoint(points, i + 1);
            if (!pointCurrent || !pointAfter) {
                continue;
            }
            if (almostEquals(deltaK[i], 0, EPSILON)) {
                mK[i] = mK[i + 1] = 0;
                continue;
            }
            alphaK = mK[i] / deltaK[i];
            betaK = mK[i + 1] / deltaK[i];
            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
            if (squaredMagnitude <= 9) {
                continue;
            }
            tauK = 3 / Math.sqrt(squaredMagnitude);
            mK[i] = alphaK * tauK * deltaK[i];
            mK[i + 1] = betaK * tauK * deltaK[i];
        }
    }
    function monotoneCompute(points, mK) {
        var indexAxis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';
        var valueAxis = getValueAxis(indexAxis);
        var pointsLen = points.length;
        var delta, pointBefore, pointCurrent;
        var pointAfter = getPoint(points, 0);
        for (var i = 0; i < pointsLen; ++i) {
            pointBefore = pointCurrent;
            pointCurrent = pointAfter;
            pointAfter = getPoint(points, i + 1);
            if (!pointCurrent) {
                continue;
            }
            var iPixel = pointCurrent[indexAxis];
            var vPixel = pointCurrent[valueAxis];
            if (pointBefore) {
                delta = (iPixel - pointBefore[indexAxis]) / 3;
                pointCurrent["cp1".concat(indexAxis)] = iPixel - delta;
                pointCurrent["cp1".concat(valueAxis)] = vPixel - delta * mK[i];
            }
            if (pointAfter) {
                delta = (pointAfter[indexAxis] - iPixel) / 3;
                pointCurrent["cp2".concat(indexAxis)] = iPixel + delta;
                pointCurrent["cp2".concat(valueAxis)] = vPixel + delta * mK[i];
            }
        }
    }
    /**
     * This function calculates Bézier control points in a similar way than |splineCurve|,
     * but preserves monotonicity of the provided data and ensures no local extremums are added
     * between the dataset discrete points due to the interpolation.
     * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
     */
    function splineCurveMonotone(points) {
        var indexAxis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';
        var valueAxis = getValueAxis(indexAxis);
        var pointsLen = points.length;
        var deltaK = Array(pointsLen).fill(0);
        var mK = Array(pointsLen);
        // Calculate slopes (deltaK) and initialize tangents (mK)
        var i, pointBefore, pointCurrent;
        var pointAfter = getPoint(points, 0);
        for (i = 0; i < pointsLen; ++i) {
            pointBefore = pointCurrent;
            pointCurrent = pointAfter;
            pointAfter = getPoint(points, i + 1);
            if (!pointCurrent) {
                continue;
            }
            if (pointAfter) {
                var slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
                // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
                deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
            }
            mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
        }
        monotoneAdjust(points, deltaK, mK);
        monotoneCompute(points, mK, indexAxis);
    }
    function capControlPoint(pt, min, max) {
        return Math.max(Math.min(pt, max), min);
    }
    function capBezierPoints(points, area) {
        var i, ilen, point, inArea, inAreaPrev;
        var inAreaNext = _isPointInArea(points[0], area);
        for (i = 0, ilen = points.length; i < ilen; ++i) {
            inAreaPrev = inArea;
            inArea = inAreaNext;
            inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
            if (!inArea) {
                continue;
            }
            point = points[i];
            if (inAreaPrev) {
                point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
                point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
            }
            if (inAreaNext) {
                point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
                point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
            }
        }
    }
    /**
     * @private
     */
    function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
        var i, ilen, point, controlPoints;
        // Only consider points that are drawn in case the spanGaps option is used
        if (options.spanGaps) {
            points = points.filter(function (pt) {
                return !pt.skip;
            });
        }
        if (options.cubicInterpolationMode === 'monotone') {
            splineCurveMonotone(points, indexAxis);
        } else {
            var prev = loop ? points[points.length - 1] : points[0];
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                point = points[i];
                controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
                point.cp1x = controlPoints.previous.x;
                point.cp1y = controlPoints.previous.y;
                point.cp2x = controlPoints.next.x;
                point.cp2y = controlPoints.next.y;
                prev = point;
            }
        }
        if (options.capBezierPoints) {
            capBezierPoints(points, area);
        }
    }

    /**
     * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
     * necessary to avoid duplicates with `export * from './helpers`; see
     * https://github.com/microsoft/TypeScript/issues/46011
     * @typedef { import('../core/core.controller.js').default } dom.Chart
     * @typedef { import('../../types').ChartEvent } ChartEvent
     */ /**
     * @private
     */
    function _isDomSupported() {
        return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    /**
     * @private
     */
    function _getParentNode(domNode) {
        var parent = domNode.parentNode;
        if (parent && parent.toString() === '[object ShadowRoot]') {
            parent = parent.host;
        }
        return parent;
    }
    /**
     * convert max-width/max-height values that may be percentages into a number
     * @private
     */
    function parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;
        if (typeof styleValue === 'string') {
            valueInPixels = parseInt(styleValue, 10);
            if (styleValue.indexOf('%') !== -1) {
                // percentage * size in dimension
                valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
            }
        } else {
            valueInPixels = styleValue;
        }
        return valueInPixels;
    }
    var getComputedStyle = function getComputedStyle(element) {
        return element.ownerDocument.defaultView.getComputedStyle(element, null);
    };
    function getStyle(el, property) {
        return getComputedStyle(el).getPropertyValue(property);
    }
    var positions = ['top', 'right', 'bottom', 'left'];
    function getPositionedStyle(styles, style, suffix) {
        var result = {};
        suffix = suffix ? '-' + suffix : '';
        for (var i = 0; i < 4; i++) {
            var pos = positions[i];
            result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
        }
        result.width = result.left + result.right;
        result.height = result.top + result.bottom;
        return result;
    }
    var useOffsetPos = function useOffsetPos(x, y, target) {
        return (x > 0 || y > 0) && (!target || !target.shadowRoot);
    };
    /**
     * @param e
     * @param canvas
     * @returns Canvas position
     */
    function getCanvasPosition(e, canvas) {
        var touches = e.touches;
        var source = touches && touches.length ? touches[0] : e;
        var offsetX = source.offsetX,
            offsetY = source.offsetY;
        var box = false;
        var x, y;
        if (useOffsetPos(offsetX, offsetY, e.target)) {
            x = offsetX;
            y = offsetY;
        } else {
            var rect = canvas.getBoundingClientRect();
            x = source.clientX - rect.left;
            y = source.clientY - rect.top;
            box = true;
        }
        return {
            x: x,
            y: y,
            box: box
        };
    }
    /**
     * Gets an event's x, y coordinates, relative to the chart area
     * @param event
     * @param chart
     * @returns x and y coordinates of the event
     */
    function getRelativePosition(event, chart) {
        if ('native' in event) {
            return event;
        }
        var canvas = chart.canvas,
            currentDevicePixelRatio = chart.currentDevicePixelRatio;
        var style = getComputedStyle(canvas);
        var borderBox = style.boxSizing === 'border-box';
        var paddings = getPositionedStyle(style, 'padding');
        var borders = getPositionedStyle(style, 'border', 'width');
        var _getCanvasPosition = getCanvasPosition(event, canvas),
            x = _getCanvasPosition.x,
            y = _getCanvasPosition.y,
            box = _getCanvasPosition.box;
        var xOffset = paddings.left + (box && borders.left);
        var yOffset = paddings.top + (box && borders.top);
        var width = chart.width,
            height = chart.height;
        if (borderBox) {
            width -= paddings.width + borders.width;
            height -= paddings.height + borders.height;
        }
        return {
            x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
            y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
        };
    }
    function getContainerSize(canvas, width, height) {
        var maxWidth, maxHeight;
        if (width === undefined || height === undefined) {
            var container = _getParentNode(canvas);
            if (!container) {
                width = canvas.clientWidth;
                height = canvas.clientHeight;
            } else {
                var rect = container.getBoundingClientRect(); // this is the border box of the container
                var containerStyle = getComputedStyle(container);
                var containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
                var containerPadding = getPositionedStyle(containerStyle, 'padding');
                width = rect.width - containerPadding.width - containerBorder.width;
                height = rect.height - containerPadding.height - containerBorder.height;
                maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
                maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
            }
        }
        return {
            width: width,
            height: height,
            maxWidth: maxWidth || INFINITY,
            maxHeight: maxHeight || INFINITY
        };
    }
    var round1 = function round1(v) {
        return Math.round(v * 10) / 10;
    };
    // eslint-disable-next-line complexity
    function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
        var style = getComputedStyle(canvas);
        var margins = getPositionedStyle(style, 'margin');
        var maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
        var maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
        var containerSize = getContainerSize(canvas, bbWidth, bbHeight);
        var width = containerSize.width,
            height = containerSize.height;
        if (style.boxSizing === 'content-box') {
            var borders = getPositionedStyle(style, 'border', 'width');
            var paddings = getPositionedStyle(style, 'padding');
            width -= paddings.width + borders.width;
            height -= paddings.height + borders.height;
        }
        width = Math.max(0, width - margins.width);
        height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
        width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
        height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
        if (width && !height) {
            // https://github.com/chartjs/Chart.js/issues/4659
            // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
            height = round1(width / 2);
        }
        var maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
        if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
            height = containerSize.height;
            width = round1(Math.floor(height * aspectRatio));
        }
        return {
            width: width,
            height: height
        };
    }
    /**
     * @param chart
     * @param forceRatio
     * @param forceStyle
     * @returns True if the canvas context size or transformation has changed.
     */
    function retinaScale(chart, forceRatio, forceStyle) {
        var pixelRatio = forceRatio || 1;
        var deviceHeight = Math.floor(chart.height * pixelRatio);
        var deviceWidth = Math.floor(chart.width * pixelRatio);
        chart.height = Math.floor(chart.height);
        chart.width = Math.floor(chart.width);
        var canvas = chart.canvas;
        // If no style has been set on the canvas, the render size is used as display size,
        // making the chart visually bigger, so let's enforce it to the "correct" values.
        // See https://github.com/chartjs/Chart.js/issues/3575
        if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
            canvas.style.height = "".concat(chart.height, "px");
            canvas.style.width = "".concat(chart.width, "px");
        }
        if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
            chart.currentDevicePixelRatio = pixelRatio;
            canvas.height = deviceHeight;
            canvas.width = deviceWidth;
            chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            return true;
        }
        return false;
    }
    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = function () {
        var passiveSupported = false;
        try {
            var options = {
                get passive() {
                    passiveSupported = true;
                    return false;
                }
            };
            window.addEventListener('test', null, options);
            window.removeEventListener('test', null, options);
        } catch (e) {
            // continue regardless of error
        }
        return passiveSupported;
    }();
    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
        var value = getStyle(element, property);
        var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
        return matches ? +matches[1] : undefined;
    }

    /**
     * @private
     */
    function _pointInLine(p1, p2, t, mode) {
        return {
            x: p1.x + t * (p2.x - p1.x),
            y: p1.y + t * (p2.y - p1.y)
        };
    }
    /**
     * @private
     */
    function _steppedInterpolation(p1, p2, t, mode) {
        return {
            x: p1.x + t * (p2.x - p1.x),
            y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
        };
    }
    /**
     * @private
     */
    function _bezierInterpolation(p1, p2, t, mode) {
        var cp1 = {
            x: p1.cp2x,
            y: p1.cp2y
        };
        var cp2 = {
            x: p2.cp1x,
            y: p2.cp1y
        };
        var a = _pointInLine(p1, cp1, t);
        var b = _pointInLine(cp1, cp2, t);
        var c = _pointInLine(cp2, p2, t);
        var d = _pointInLine(a, b, t);
        var e = _pointInLine(b, c, t);
        return _pointInLine(d, e, t);
    }
    var getRightToLeftAdapter = function getRightToLeftAdapter(rectX, width) {
        return {
            x: function x(_x) {
                return rectX + rectX + width - _x;
            },
            setWidth: function setWidth(w) {
                width = w;
            },
            textAlign: function textAlign(align) {
                if (align === 'center') {
                    return align;
                }
                return align === 'right' ? 'left' : 'right';
            },
            xPlus: function xPlus(x, value) {
                return x - value;
            },
            leftForLtr: function leftForLtr(x, itemWidth) {
                return x - itemWidth;
            }
        };
    };
    var getLeftToRightAdapter = function getLeftToRightAdapter() {
        return {
            x: function x(_x2) {
                return _x2;
            },
            setWidth: function setWidth(w) {},
            textAlign: function textAlign(align) {
                return align;
            },
            xPlus: function xPlus(x, value) {
                return x + value;
            },
            leftForLtr: function leftForLtr(x, _itemWidth) {
                return x;
            }
        };
    };
    function getRtlAdapter(rtl, rectX, width) {
        return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
    }
    function overrideTextDirection(ctx, direction) {
        var style, original;
        if (direction === 'ltr' || direction === 'rtl') {
            style = ctx.canvas.style;
            original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];
            style.setProperty('direction', direction, 'important');
            ctx.prevTextDirection = original;
        }
    }
    function restoreTextDirection(ctx, original) {
        if (original !== undefined) {
            delete ctx.prevTextDirection;
            ctx.canvas.style.setProperty('direction', original[0], original[1]);
        }
    }
    function propertyFn(property) {
        if (property === 'angle') {
            return {
                between: _angleBetween,
                compare: _angleDiff,
                normalize: _normalizeAngle
            };
        }
        return {
            between: _isBetween,
            compare: function compare(a, b) {
                return a - b;
            },
            normalize: function normalize(x) {
                return x;
            }
        };
    }
    function normalizeSegment(_ref) {
        var start = _ref.start,
            end = _ref.end,
            count = _ref.count,
            loop = _ref.loop,
            style = _ref.style;
        return {
            start: start % count,
            end: end % count,
            loop: loop && (end - start + 1) % count === 0,
            style: style
        };
    }
    function getSegment(segment, points, bounds) {
        var property = bounds.property,
            startBound = bounds.start,
            endBound = bounds.end;
        var _propertyFn = propertyFn(property),
            between = _propertyFn.between,
            normalize = _propertyFn.normalize;
        var count = points.length;
        var start = segment.start,
            end = segment.end,
            loop = segment.loop;
        var i, ilen;
        if (loop) {
            start += count;
            end += count;
            for (i = 0, ilen = count; i < ilen; ++i) {
                if (!between(normalize(points[start % count][property]), startBound, endBound)) {
                    break;
                }
                start--;
                end--;
            }
            start %= count;
            end %= count;
        }
        if (end < start) {
            end += count;
        }
        return {
            start: start,
            end: end,
            loop: loop,
            style: segment.style
        };
    }
    function _boundSegment(segment, points, bounds) {
        if (!bounds) {
            return [segment];
        }
        var property = bounds.property,
            startBound = bounds.start,
            endBound = bounds.end;
        var count = points.length;
        var _propertyFn2 = propertyFn(property),
            compare = _propertyFn2.compare,
            between = _propertyFn2.between,
            normalize = _propertyFn2.normalize;
        var _getSegment = getSegment(segment, points, bounds),
            start = _getSegment.start,
            end = _getSegment.end,
            loop = _getSegment.loop,
            style = _getSegment.style;
        var result = [];
        var inside = false;
        var subStart = null;
        var value, point, prevValue;
        var startIsBefore = function startIsBefore() {
            return between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
        };
        var endIsBefore = function endIsBefore() {
            return compare(endBound, value) === 0 || between(endBound, prevValue, value);
        };
        var shouldStart = function shouldStart() {
            return inside || startIsBefore();
        };
        var shouldStop = function shouldStop() {
            return !inside || endIsBefore();
        };
        for (var i = start, prev = start; i <= end; ++i) {
            point = points[i % count];
            if (point.skip) {
                continue;
            }
            value = normalize(point[property]);
            if (value === prevValue) {
                continue;
            }
            inside = between(value, startBound, endBound);
            if (subStart === null && shouldStart()) {
                subStart = compare(value, startBound) === 0 ? i : prev;
            }
            if (subStart !== null && shouldStop()) {
                result.push(normalizeSegment({
                    start: subStart,
                    end: i,
                    loop: loop,
                    count: count,
                    style: style
                }));
                subStart = null;
            }
            prev = i;
            prevValue = value;
        }
        if (subStart !== null) {
            result.push(normalizeSegment({
                start: subStart,
                end: end,
                loop: loop,
                count: count,
                style: style
            }));
        }
        return result;
    }
    function _boundSegments(line, bounds) {
        var result = [];
        var segments = line.segments;
        for (var i = 0; i < segments.length; i++) {
            var sub = _boundSegment(segments[i], line.points, bounds);
            if (sub.length) {
                result.push.apply(result, _toConsumableArray(sub));
            }
        }
        return result;
    }
    function findStartAndEnd(points, count, loop, spanGaps) {
        var start = 0;
        var end = count - 1;
        if (loop && !spanGaps) {
            while (start < count && !points[start].skip) {
                start++;
            }
        }
        while (start < count && points[start].skip) {
            start++;
        }
        start %= count;
        if (loop) {
            end += start;
        }
        while (end > start && points[end % count].skip) {
            end--;
        }
        end %= count;
        return {
            start: start,
            end: end
        };
    }
    function solidSegments(points, start, max, loop) {
        var count = points.length;
        var result = [];
        var last = start;
        var prev = points[start];
        var end;
        for (end = start + 1; end <= max; ++end) {
            var cur = points[end % count];
            if (cur.skip || cur.stop) {
                if (!prev.skip) {
                    loop = false;
                    result.push({
                        start: start % count,
                        end: (end - 1) % count,
                        loop: loop
                    });
                    start = last = cur.stop ? end : null;
                }
            } else {
                last = end;
                if (prev.skip) {
                    start = end;
                }
            }
            prev = cur;
        }
        if (last !== null) {
            result.push({
                start: start % count,
                end: last % count,
                loop: loop
            });
        }
        return result;
    }
    function _computeSegments(line, segmentOptions) {
        var points = line.points;
        var spanGaps = line.options.spanGaps;
        var count = points.length;
        if (!count) {
            return [];
        }
        var loop = !!line._loop;
        var _findStartAndEnd = findStartAndEnd(points, count, loop, spanGaps),
            start = _findStartAndEnd.start,
            end = _findStartAndEnd.end;
        if (spanGaps === true) {
            return splitByStyles(line, [{
                start: start,
                end: end,
                loop: loop
            }], points, segmentOptions);
        }
        var max = end < start ? end + count : end;
        var completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
        return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
    }
    function splitByStyles(line, segments, points, segmentOptions) {
        if (!segmentOptions || !segmentOptions.setContext || !points) {
            return segments;
        }
        return doSplitByStyles(line, segments, points, segmentOptions);
    }
    function doSplitByStyles(line, segments, points, segmentOptions) {
        var chartContext = line._chart.getContext();
        var baseStyle = readStyle(line.options);
        var datasetIndex = line._datasetIndex,
            spanGaps = line.options.spanGaps;
        var count = points.length;
        var result = [];
        var prevStyle = baseStyle;
        var start = segments[0].start;
        var i = start;
        function addStyle(s, e, l, st) {
            var dir = spanGaps ? -1 : 1;
            if (s === e) {
                return;
            }
            s += count;
            while (points[s % count].skip) {
                s -= dir;
            }
            while (points[e % count].skip) {
                e += dir;
            }
            if (s % count !== e % count) {
                result.push({
                    start: s % count,
                    end: e % count,
                    loop: l,
                    style: st
                });
                prevStyle = st;
                start = e % count;
            }
        }
        var _iterator11 = _createForOfIteratorHelper$1(segments),
            _step11;
        try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var segment = _step11.value;
                start = spanGaps ? start : segment.start;
                var prev = points[start % count];
                var style = void 0;
                for (i = start + 1; i <= segment.end; i++) {
                    var pt = points[i % count];
                    style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                        type: 'segment',
                        p0: prev,
                        p1: pt,
                        p0DataIndex: (i - 1) % count,
                        p1DataIndex: i % count,
                        datasetIndex: datasetIndex
                    })));
                    if (styleChanged(style, prevStyle)) {
                        addStyle(start, i - 1, segment.loop, prevStyle);
                    }
                    prev = pt;
                    prevStyle = style;
                }
                if (start < i - 1) {
                    addStyle(start, i - 1, segment.loop, prevStyle);
                }
            }
        } catch (err) {
            _iterator11.e(err);
        } finally {
            _iterator11.f();
        }
        return result;
    }
    function readStyle(options) {
        return {
            backgroundColor: options.backgroundColor,
            borderCapStyle: options.borderCapStyle,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderJoinStyle: options.borderJoinStyle,
            borderWidth: options.borderWidth,
            borderColor: options.borderColor
        };
    }
    function styleChanged(style, prevStyle) {
        return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
    }

    var Animator = /*#__PURE__*/function () {
        function Animator() {
            _classCallCheck$x(this, Animator);
            this._request = null;
            this._charts = new Map();
            this._running = false;
            this._lastDate = undefined;
        }
        _createClass$x(Animator, [{
            key: "_notify",
            value: function _notify(chart, anims, date, type) {
                var callbacks = anims.listeners[type];
                var numSteps = anims.duration;
                callbacks.forEach(function (fn) {
                    return fn({
                        chart: chart,
                        initial: anims.initial,
                        numSteps: numSteps,
                        currentStep: Math.min(date - anims.start, numSteps)
                    });
                });
            }
        }, {
            key: "_refresh",
            value: function _refresh() {
                var _this = this;
                if (this._request) {
                    return;
                }
                this._running = true;
                this._request = requestAnimFrame.call(window, function () {
                    _this._update();
                    _this._request = null;
                    if (_this._running) {
                        _this._refresh();
                    }
                });
            }
        }, {
            key: "_update",
            value: function _update() {
                var _this2 = this;
                var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();
                var remaining = 0;
                this._charts.forEach(function (anims, chart) {
                    if (!anims.running || !anims.items.length) {
                        return;
                    }
                    var items = anims.items;
                    var i = items.length - 1;
                    var draw = false;
                    var item;
                    for (; i >= 0; --i) {
                        item = items[i];
                        if (item._active) {
                            if (item._total > anims.duration) {
                                anims.duration = item._total;
                            }
                            item.tick(date);
                            draw = true;
                        } else {
                            items[i] = items[items.length - 1];
                            items.pop();
                        }
                    }
                    if (draw) {
                        chart.draw();
                        _this2._notify(chart, anims, date, 'progress');
                    }
                    if (!items.length) {
                        anims.running = false;
                        _this2._notify(chart, anims, date, 'complete');
                        anims.initial = false;
                    }
                    remaining += items.length;
                });
                this._lastDate = date;
                if (remaining === 0) {
                    this._running = false;
                }
            }
        }, {
            key: "_getAnims",
            value: function _getAnims(chart) {
                var charts = this._charts;
                var anims = charts.get(chart);
                if (!anims) {
                    anims = {
                        running: false,
                        initial: true,
                        items: [],
                        listeners: {
                            complete: [],
                            progress: []
                        }
                    };
                    charts.set(chart, anims);
                }
                return anims;
            }
        }, {
            key: "listen",
            value: function listen(chart, event, cb) {
                this._getAnims(chart).listeners[event].push(cb);
            }
        }, {
            key: "add",
            value: function add(chart, items) {
                var _this$_getAnims$items;
                if (!items || !items.length) {
                    return;
                }
                (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));
            }
        }, {
            key: "has",
            value: function has(chart) {
                return this._getAnims(chart).items.length > 0;
            }
        }, {
            key: "start",
            value: function start(chart) {
                var anims = this._charts.get(chart);
                if (!anims) {
                    return;
                }
                anims.running = true;
                anims.start = Date.now();
                anims.duration = anims.items.reduce(function (acc, cur) {
                    return Math.max(acc, cur._duration);
                }, 0);
                this._refresh();
            }
        }, {
            key: "running",
            value: function running(chart) {
                if (!this._running) {
                    return false;
                }
                var anims = this._charts.get(chart);
                if (!anims || !anims.running || !anims.items.length) {
                    return false;
                }
                return true;
            }
        }, {
            key: "stop",
            value: function stop(chart) {
                var anims = this._charts.get(chart);
                if (!anims || !anims.items.length) {
                    return;
                }
                var items = anims.items;
                var i = items.length - 1;
                for (; i >= 0; --i) {
                    items[i].cancel();
                }
                anims.items = [];
                this._notify(chart, anims, Date.now(), 'complete');
            }
        }, {
            key: "remove",
            value: function remove(chart) {
                return this._charts["delete"](chart);
            }
        }]);
        return Animator;
    }();
    var animator = /* #__PURE__ */new Animator();
    var transparent = 'transparent';
    var interpolators = {
        "boolean": function boolean(from, to, factor) {
            return factor > 0.5 ? to : from;
        },
        color: function color$1(from, to, factor) {
            var c0 = color(from || transparent);
            var c1 = c0.valid && color(to || transparent);
            return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
        },
        number: function number(from, to, factor) {
            return from + (to - from) * factor;
        }
    };
    var Animation = /*#__PURE__*/function () {
        function Animation(cfg, target, prop, to) {
            _classCallCheck$x(this, Animation);
            var currentValue = target[prop];
            to = resolve([cfg.to, to, currentValue, cfg.from]);
            var from = resolve([cfg.from, currentValue, to]);
            this._active = true;
            this._fn = cfg.fn || interpolators[cfg.type || _typeof$z(from)];
            this._easing = effects[cfg.easing] || effects.linear;
            this._start = Math.floor(Date.now() + (cfg.delay || 0));
            this._duration = this._total = Math.floor(cfg.duration);
            this._loop = !!cfg.loop;
            this._target = target;
            this._prop = prop;
            this._from = from;
            this._to = to;
            this._promises = undefined;
        }
        _createClass$x(Animation, [{
            key: "active",
            value: function active() {
                return this._active;
            }
        }, {
            key: "update",
            value: function update(cfg, to, date) {
                if (this._active) {
                    this._notify(false);
                    var currentValue = this._target[this._prop];
                    var elapsed = date - this._start;
                    var remain = this._duration - elapsed;
                    this._start = date;
                    this._duration = Math.floor(Math.max(remain, cfg.duration));
                    this._total += elapsed;
                    this._loop = !!cfg.loop;
                    this._to = resolve([cfg.to, to, currentValue, cfg.from]);
                    this._from = resolve([cfg.from, currentValue, to]);
                }
            }
        }, {
            key: "cancel",
            value: function cancel() {
                if (this._active) {
                    this.tick(Date.now());
                    this._active = false;
                    this._notify(false);
                }
            }
        }, {
            key: "tick",
            value: function tick(date) {
                var elapsed = date - this._start;
                var duration = this._duration;
                var prop = this._prop;
                var from = this._from;
                var loop = this._loop;
                var to = this._to;
                var factor;
                this._active = from !== to && (loop || elapsed < duration);
                if (!this._active) {
                    this._target[prop] = to;
                    this._notify(true);
                    return;
                }
                if (elapsed < 0) {
                    this._target[prop] = from;
                    return;
                }
                factor = elapsed / duration % 2;
                factor = loop && factor > 1 ? 2 - factor : factor;
                factor = this._easing(Math.min(1, Math.max(0, factor)));
                this._target[prop] = this._fn(from, to, factor);
            }
        }, {
            key: "wait",
            value: function wait() {
                var promises = this._promises || (this._promises = []);
                return new Promise(function (res, rej) {
                    promises.push({
                        res: res,
                        rej: rej
                    });
                });
            }
        }, {
            key: "_notify",
            value: function _notify(resolved) {
                var method = resolved ? 'res' : 'rej';
                var promises = this._promises || [];
                for (var i = 0; i < promises.length; i++) {
                    promises[i][method]();
                }
            }
        }]);
        return Animation;
    }();
    var Animations = /*#__PURE__*/function () {
        function Animations(chart, config) {
            _classCallCheck$x(this, Animations);
            this._chart = chart;
            this._properties = new Map();
            this.configure(config);
        }
        _createClass$x(Animations, [{
            key: "configure",
            value: function configure(config) {
                if (!isObject(config)) {
                    return;
                }
                var animationOptions = Object.keys(defaults.animation);
                var animatedProps = this._properties;
                Object.getOwnPropertyNames(config).forEach(function (key) {
                    var cfg = config[key];
                    if (!isObject(cfg)) {
                        return;
                    }
                    var resolved = {};
                    for (var _i = 0, _animationOptions = animationOptions; _i < _animationOptions.length; _i++) {
                        var option = _animationOptions[_i];
                        resolved[option] = cfg[option];
                    }
                    (isArray(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {
                        if (prop === key || !animatedProps.has(prop)) {
                            animatedProps.set(prop, resolved);
                        }
                    });
                });
            }
        }, {
            key: "_animateOptions",
            value: function _animateOptions(target, values) {
                var newOptions = values.options;
                var options = resolveTargetOptions(target, newOptions);
                if (!options) {
                    return [];
                }
                var animations = this._createAnimations(options, newOptions);
                if (newOptions.$shared) {
                    awaitAll(target.options.$animations, newOptions).then(function () {
                        target.options = newOptions;
                    }, function () {});
                }
                return animations;
            }
        }, {
            key: "_createAnimations",
            value: function _createAnimations(target, values) {
                var animatedProps = this._properties;
                var animations = [];
                var running = target.$animations || (target.$animations = {});
                var props = Object.keys(values);
                var date = Date.now();
                var i;
                for (i = props.length - 1; i >= 0; --i) {
                    var prop = props[i];
                    if (prop.charAt(0) === '$') {
                        continue;
                    }
                    if (prop === 'options') {
                        animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));
                        continue;
                    }
                    var value = values[prop];
                    var animation = running[prop];
                    var cfg = animatedProps.get(prop);
                    if (animation) {
                        if (cfg && animation.active()) {
                            animation.update(cfg, value, date);
                            continue;
                        } else {
                            animation.cancel();
                        }
                    }
                    if (!cfg || !cfg.duration) {
                        target[prop] = value;
                        continue;
                    }
                    running[prop] = animation = new Animation(cfg, target, prop, value);
                    animations.push(animation);
                }
                return animations;
            }
        }, {
            key: "update",
            value: function update(target, values) {
                if (this._properties.size === 0) {
                    Object.assign(target, values);
                    return;
                }
                var animations = this._createAnimations(target, values);
                if (animations.length) {
                    animator.add(this._chart, animations);
                    return true;
                }
            }
        }]);
        return Animations;
    }();
    function awaitAll(animations, properties) {
        var running = [];
        var keys = Object.keys(properties);
        for (var i = 0; i < keys.length; i++) {
            var anim = animations[keys[i]];
            if (anim && anim.active()) {
                running.push(anim.wait());
            }
        }
        return Promise.all(running);
    }
    function resolveTargetOptions(target, newOptions) {
        if (!newOptions) {
            return;
        }
        var options = target.options;
        if (!options) {
            target.options = newOptions;
            return;
        }
        if (options.$shared) {
            target.options = options = Object.assign({}, options, {
                $shared: false,
                $animations: {}
            });
        }
        return options;
    }
    function scaleClip(scale, allowedOverflow) {
        var opts = scale && scale.options || {};
        var reverse = opts.reverse;
        var min = opts.min === undefined ? allowedOverflow : 0;
        var max = opts.max === undefined ? allowedOverflow : 0;
        return {
            start: reverse ? max : min,
            end: reverse ? min : max
        };
    }
    function defaultClip(xScale, yScale, allowedOverflow) {
        if (allowedOverflow === false) {
            return false;
        }
        var x = scaleClip(xScale, allowedOverflow);
        var y = scaleClip(yScale, allowedOverflow);
        return {
            top: y.end,
            right: x.end,
            bottom: y.start,
            left: x.start
        };
    }
    function toClip(value) {
        var t, r, b, l;
        if (isObject(value)) {
            t = value.top;
            r = value.right;
            b = value.bottom;
            l = value.left;
        } else {
            t = r = b = l = value;
        }
        return {
            top: t,
            right: r,
            bottom: b,
            left: l,
            disabled: value === false
        };
    }
    function getSortedDatasetIndices(chart, filterVisible) {
        var keys = [];
        var metasets = chart._getSortedDatasetMetas(filterVisible);
        var i, ilen;
        for (i = 0, ilen = metasets.length; i < ilen; ++i) {
            keys.push(metasets[i].index);
        }
        return keys;
    }
    function _applyStack(stack, value, dsIndex) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var keys = stack.keys;
        var singleMode = options.mode === 'single';
        var i, ilen, datasetIndex, otherValue;
        if (value === null) {
            return;
        }
        for (i = 0, ilen = keys.length; i < ilen; ++i) {
            datasetIndex = +keys[i];
            if (datasetIndex === dsIndex) {
                if (options.all) {
                    continue;
                }
                break;
            }
            otherValue = stack.values[datasetIndex];
            if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
                value += otherValue;
            }
        }
        return value;
    }
    function convertObjectDataToArray(data) {
        var keys = Object.keys(data);
        var adata = new Array(keys.length);
        var i, ilen, key;
        for (i = 0, ilen = keys.length; i < ilen; ++i) {
            key = keys[i];
            adata[i] = {
                x: key,
                y: data[key]
            };
        }
        return adata;
    }
    function isStacked(scale, meta) {
        var stacked = scale && scale.options.stacked;
        return stacked || stacked === undefined && meta.stack !== undefined;
    }
    function getStackKey(indexScale, valueScale, meta) {
        return "".concat(indexScale.id, ".").concat(valueScale.id, ".").concat(meta.stack || meta.type);
    }
    function getUserBounds(scale) {
        var _scale$getUserBounds = scale.getUserBounds(),
            min = _scale$getUserBounds.min,
            max = _scale$getUserBounds.max,
            minDefined = _scale$getUserBounds.minDefined,
            maxDefined = _scale$getUserBounds.maxDefined;
        return {
            min: minDefined ? min : Number.NEGATIVE_INFINITY,
            max: maxDefined ? max : Number.POSITIVE_INFINITY
        };
    }
    function getOrCreateStack(stacks, stackKey, indexValue) {
        var subStack = stacks[stackKey] || (stacks[stackKey] = {});
        return subStack[indexValue] || (subStack[indexValue] = {});
    }
    function getLastIndexInStack(stack, vScale, positive, type) {
        var _iterator = _createForOfIteratorHelper$1(vScale.getMatchingVisibleMetas(type).reverse()),
            _step;
        try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var meta = _step.value;
                var value = stack[meta.index];
                if (positive && value > 0 || !positive && value < 0) {
                    return meta.index;
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally {
            _iterator.f();
        }
        return null;
    }
    function updateStacks(controller, parsed) {
        var chart = controller.chart,
            meta = controller._cachedMeta;
        var stacks = chart._stacks || (chart._stacks = {});
        var iScale = meta.iScale,
            vScale = meta.vScale,
            datasetIndex = meta.index;
        var iAxis = iScale.axis;
        var vAxis = vScale.axis;
        var key = getStackKey(iScale, vScale, meta);
        var ilen = parsed.length;
        var stack;
        for (var i = 0; i < ilen; ++i) {
            var item = parsed[i];
            var _index = item[iAxis],
                value = item[vAxis];
            var itemStacks = item._stacks || (item._stacks = {});
            stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, _index);
            stack[datasetIndex] = value;
            stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
            stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
            var visualValues = stack._visualValues || (stack._visualValues = {});
            visualValues[datasetIndex] = value;
        }
    }
    function getFirstScaleId(chart, axis) {
        var scales = chart.scales;
        return Object.keys(scales).filter(function (key) {
            return scales[key].axis === axis;
        }).shift();
    }
    function createDatasetContext(parent, index) {
        return createContext(parent, {
            active: false,
            dataset: undefined,
            datasetIndex: index,
            index: index,
            mode: 'default',
            type: 'dataset'
        });
    }
    function createDataContext(parent, index, element) {
        return createContext(parent, {
            active: false,
            dataIndex: index,
            parsed: undefined,
            raw: undefined,
            element: element,
            index: index,
            mode: 'default',
            type: 'data'
        });
    }
    function clearStacks(meta, items) {
        var datasetIndex = meta.controller.index;
        var axis = meta.vScale && meta.vScale.axis;
        if (!axis) {
            return;
        }
        items = items || meta._parsed;
        var _iterator2 = _createForOfIteratorHelper$1(items),
            _step2;
        try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var parsed = _step2.value;
                var stacks = parsed._stacks;
                if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
                    return;
                }
                delete stacks[axis][datasetIndex];
                if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {
                    delete stacks[axis]._visualValues[datasetIndex];
                }
            }
        } catch (err) {
            _iterator2.e(err);
        } finally {
            _iterator2.f();
        }
    }
    var isDirectUpdateMode = function isDirectUpdateMode(mode) {
        return mode === 'reset' || mode === 'none';
    };
    var cloneIfNotShared = function cloneIfNotShared(cached, shared) {
        return shared ? cached : Object.assign({}, cached);
    };
    var createStack = function createStack(canStack, meta, chart) {
        return canStack && !meta.hidden && meta._stacked && {
            keys: getSortedDatasetIndices(chart, true),
            values: null
        };
    };
    var DatasetController = /*#__PURE__*/function () {
        function DatasetController(chart, datasetIndex) {
            _classCallCheck$x(this, DatasetController);
            this.chart = chart;
            this._ctx = chart.ctx;
            this.index = datasetIndex;
            this._cachedDataOpts = {};
            this._cachedMeta = this.getMeta();
            this._type = this._cachedMeta.type;
            this.options = undefined;
            this._parsing = false;
            this._data = undefined;
            this._objectData = undefined;
            this._sharedOptions = undefined;
            this._drawStart = undefined;
            this._drawCount = undefined;
            this.enableOptionSharing = false;
            this.supportsDecimation = false;
            this.$context = undefined;
            this._syncList = [];
            this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType;
            this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType;
            this.initialize();
        }
        _createClass$x(DatasetController, [{
            key: "initialize",
            value: function initialize() {
                var meta = this._cachedMeta;
                this.configure();
                this.linkScales();
                meta._stacked = isStacked(meta.vScale, meta);
                this.addElements();
                if (this.options.fill && !this.chart.isPluginEnabled('filler')) {
                    console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
                }
            }
        }, {
            key: "updateIndex",
            value: function updateIndex(datasetIndex) {
                if (this.index !== datasetIndex) {
                    clearStacks(this._cachedMeta);
                }
                this.index = datasetIndex;
            }
        }, {
            key: "linkScales",
            value: function linkScales() {
                var chart = this.chart;
                var meta = this._cachedMeta;
                var dataset = this.getDataset();
                var chooseId = function chooseId(axis, x, y, r) {
                    return axis === 'x' ? x : axis === 'r' ? r : y;
                };
                var xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
                var yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
                var rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
                var indexAxis = meta.indexAxis;
                var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
                var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
                meta.xScale = this.getScaleForId(xid);
                meta.yScale = this.getScaleForId(yid);
                meta.rScale = this.getScaleForId(rid);
                meta.iScale = this.getScaleForId(iid);
                meta.vScale = this.getScaleForId(vid);
            }
        }, {
            key: "getDataset",
            value: function getDataset() {
                return this.chart.data.datasets[this.index];
            }
        }, {
            key: "getMeta",
            value: function getMeta() {
                return this.chart.getDatasetMeta(this.index);
            }
        }, {
            key: "getScaleForId",
            value: function getScaleForId(scaleID) {
                return this.chart.scales[scaleID];
            }
        }, {
            key: "_getOtherScale",
            value: function _getOtherScale(scale) {
                var meta = this._cachedMeta;
                return scale === meta.iScale ? meta.vScale : meta.iScale;
            }
        }, {
            key: "reset",
            value: function reset() {
                this._update('reset');
            }
        }, {
            key: "_destroy",
            value: function _destroy() {
                var meta = this._cachedMeta;
                if (this._data) {
                    unlistenArrayEvents(this._data, this);
                }
                if (meta._stacked) {
                    clearStacks(meta);
                }
            }
        }, {
            key: "_dataCheck",
            value: function _dataCheck() {
                var dataset = this.getDataset();
                var data = dataset.data || (dataset.data = []);
                var _data = this._data;
                if (isObject(data)) {
                    this._data = convertObjectDataToArray(data);
                } else if (_data !== data) {
                    if (_data) {
                        unlistenArrayEvents(_data, this);
                        var meta = this._cachedMeta;
                        clearStacks(meta);
                        meta._parsed = [];
                    }
                    if (data && Object.isExtensible(data)) {
                        listenArrayEvents(data, this);
                    }
                    this._syncList = [];
                    this._data = data;
                }
            }
        }, {
            key: "addElements",
            value: function addElements() {
                var meta = this._cachedMeta;
                this._dataCheck();
                if (this.datasetElementType) {
                    meta.dataset = new this.datasetElementType();
                }
            }
        }, {
            key: "buildOrUpdateElements",
            value: function buildOrUpdateElements(resetNewElements) {
                var meta = this._cachedMeta;
                var dataset = this.getDataset();
                var stackChanged = false;
                this._dataCheck();
                var oldStacked = meta._stacked;
                meta._stacked = isStacked(meta.vScale, meta);
                if (meta.stack !== dataset.stack) {
                    stackChanged = true;
                    clearStacks(meta);
                    meta.stack = dataset.stack;
                }
                this._resyncElements(resetNewElements);
                if (stackChanged || oldStacked !== meta._stacked) {
                    updateStacks(this, meta._parsed);
                }
            }
        }, {
            key: "configure",
            value: function configure() {
                var config = this.chart.config;
                var scopeKeys = config.datasetScopeKeys(this._type);
                var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
                this.options = config.createResolver(scopes, this.getContext());
                this._parsing = this.options.parsing;
                this._cachedDataOpts = {};
            }
        }, {
            key: "parse",
            value: function parse(start, count) {
                var meta = this._cachedMeta,
                    data = this._data;
                var iScale = meta.iScale,
                    _stacked = meta._stacked;
                var iAxis = iScale.axis;
                var sorted = start === 0 && count === data.length ? true : meta._sorted;
                var prev = start > 0 && meta._parsed[start - 1];
                var i, cur, parsed;
                if (this._parsing === false) {
                    meta._parsed = data;
                    meta._sorted = true;
                    parsed = data;
                } else {
                    if (isArray(data[start])) {
                        parsed = this.parseArrayData(meta, data, start, count);
                    } else if (isObject(data[start])) {
                        parsed = this.parseObjectData(meta, data, start, count);
                    } else {
                        parsed = this.parsePrimitiveData(meta, data, start, count);
                    }
                    var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {
                        return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
                    };
                    for (i = 0; i < count; ++i) {
                        meta._parsed[i + start] = cur = parsed[i];
                        if (sorted) {
                            if (isNotInOrderComparedToPrev()) {
                                sorted = false;
                            }
                            prev = cur;
                        }
                    }
                    meta._sorted = sorted;
                }
                if (_stacked) {
                    updateStacks(this, parsed);
                }
            }
        }, {
            key: "parsePrimitiveData",
            value: function parsePrimitiveData(meta, data, start, count) {
                var iScale = meta.iScale,
                    vScale = meta.vScale;
                var iAxis = iScale.axis;
                var vAxis = vScale.axis;
                var labels = iScale.getLabels();
                var singleScale = iScale === vScale;
                var parsed = new Array(count);
                var i, ilen, index;
                for (i = 0, ilen = count; i < ilen; ++i) {
                    var _parsed$i;
                    index = i + start;
                    parsed[i] = (_parsed$i = {}, _defineProperty$w(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), _defineProperty$w(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);
                }
                return parsed;
            }
        }, {
            key: "parseArrayData",
            value: function parseArrayData(meta, data, start, count) {
                var xScale = meta.xScale,
                    yScale = meta.yScale;
                var parsed = new Array(count);
                var i, ilen, index, item;
                for (i = 0, ilen = count; i < ilen; ++i) {
                    index = i + start;
                    item = data[index];
                    parsed[i] = {
                        x: xScale.parse(item[0], index),
                        y: yScale.parse(item[1], index)
                    };
                }
                return parsed;
            }
        }, {
            key: "parseObjectData",
            value: function parseObjectData(meta, data, start, count) {
                var xScale = meta.xScale,
                    yScale = meta.yScale;
                var _this$_parsing = this._parsing,
                    _this$_parsing$xAxisK = _this$_parsing.xAxisKey,
                    xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,
                    _this$_parsing$yAxisK = _this$_parsing.yAxisKey,
                    yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;
                var parsed = new Array(count);
                var i, ilen, index, item;
                for (i = 0, ilen = count; i < ilen; ++i) {
                    index = i + start;
                    item = data[index];
                    parsed[i] = {
                        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
                        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
                    };
                }
                return parsed;
            }
        }, {
            key: "getParsed",
            value: function getParsed(index) {
                return this._cachedMeta._parsed[index];
            }
        }, {
            key: "getDataElement",
            value: function getDataElement(index) {
                return this._cachedMeta.data[index];
            }
        }, {
            key: "applyStack",
            value: function applyStack(scale, parsed, mode) {
                var chart = this.chart;
                var meta = this._cachedMeta;
                var value = parsed[scale.axis];
                var stack = {
                    keys: getSortedDatasetIndices(chart, true),
                    values: parsed._stacks[scale.axis]._visualValues
                };
                return _applyStack(stack, value, meta.index, {
                    mode: mode
                });
            }
        }, {
            key: "updateRangeFromParsed",
            value: function updateRangeFromParsed(range, scale, parsed, stack) {
                var parsedValue = parsed[scale.axis];
                var value = parsedValue === null ? NaN : parsedValue;
                var values = stack && parsed._stacks[scale.axis];
                if (stack && values) {
                    stack.values = values;
                    value = _applyStack(stack, parsedValue, this._cachedMeta.index);
                }
                range.min = Math.min(range.min, value);
                range.max = Math.max(range.max, value);
            }
        }, {
            key: "getMinMax",
            value: function getMinMax(scale, canStack) {
                var meta = this._cachedMeta;
                var _parsed = meta._parsed;
                var sorted = meta._sorted && scale === meta.iScale;
                var ilen = _parsed.length;
                var otherScale = this._getOtherScale(scale);
                var stack = createStack(canStack, meta, this.chart);
                var range = {
                    min: Number.POSITIVE_INFINITY,
                    max: Number.NEGATIVE_INFINITY
                };
                var _getUserBounds = getUserBounds(otherScale),
                    otherMin = _getUserBounds.min,
                    otherMax = _getUserBounds.max;
                var i, parsed;
                function _skip() {
                    parsed = _parsed[i];
                    var otherValue = parsed[otherScale.axis];
                    return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
                }
                for (i = 0; i < ilen; ++i) {
                    if (_skip()) {
                        continue;
                    }
                    this.updateRangeFromParsed(range, scale, parsed, stack);
                    if (sorted) {
                        break;
                    }
                }
                if (sorted) {
                    for (i = ilen - 1; i >= 0; --i) {
                        if (_skip()) {
                            continue;
                        }
                        this.updateRangeFromParsed(range, scale, parsed, stack);
                        break;
                    }
                }
                return range;
            }
        }, {
            key: "getAllParsedValues",
            value: function getAllParsedValues(scale) {
                var parsed = this._cachedMeta._parsed;
                var values = [];
                var i, ilen, value;
                for (i = 0, ilen = parsed.length; i < ilen; ++i) {
                    value = parsed[i][scale.axis];
                    if (isNumberFinite(value)) {
                        values.push(value);
                    }
                }
                return values;
            }
        }, {
            key: "getMaxOverflow",
            value: function getMaxOverflow() {
                return false;
            }
        }, {
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var iScale = meta.iScale;
                var vScale = meta.vScale;
                var parsed = this.getParsed(index);
                return {
                    label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
                    value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
                };
            }
        }, {
            key: "_update",
            value: function _update(mode) {
                var meta = this._cachedMeta;
                this.update(mode || 'default');
                meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
            }
        }, {
            key: "update",
            value: function update(mode) {}
        }, {
            key: "draw",
            value: function draw() {
                var ctx = this._ctx;
                var chart = this.chart;
                var meta = this._cachedMeta;
                var elements = meta.data || [];
                var area = chart.chartArea;
                var active = [];
                var start = this._drawStart || 0;
                var count = this._drawCount || elements.length - start;
                var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
                var i;
                if (meta.dataset) {
                    meta.dataset.draw(ctx, area, start, count);
                }
                for (i = start; i < start + count; ++i) {
                    var element = elements[i];
                    if (element.hidden) {
                        continue;
                    }
                    if (element.active && drawActiveElementsOnTop) {
                        active.push(element);
                    } else {
                        element.draw(ctx, area);
                    }
                }
                for (i = 0; i < active.length; ++i) {
                    active[i].draw(ctx, area);
                }
            }
        }, {
            key: "getStyle",
            value: function getStyle(index, active) {
                var mode = active ? 'active' : 'default';
                return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
            }
        }, {
            key: "getContext",
            value: function getContext(index, active, mode) {
                var dataset = this.getDataset();
                var context;
                if (index >= 0 && index < this._cachedMeta.data.length) {
                    var element = this._cachedMeta.data[index];
                    context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
                    context.parsed = this.getParsed(index);
                    context.raw = dataset.data[index];
                    context.index = context.dataIndex = index;
                } else {
                    context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
                    context.dataset = dataset;
                    context.index = context.datasetIndex = this.index;
                }
                context.active = !!active;
                context.mode = mode;
                return context;
            }
        }, {
            key: "resolveDatasetElementOptions",
            value: function resolveDatasetElementOptions(mode) {
                return this._resolveElementOptions(this.datasetElementType.id, mode);
            }
        }, {
            key: "resolveDataElementOptions",
            value: function resolveDataElementOptions(index, mode) {
                return this._resolveElementOptions(this.dataElementType.id, mode, index);
            }
        }, {
            key: "_resolveElementOptions",
            value: function _resolveElementOptions(elementType) {
                var _this3 = this;
                var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
                var index = arguments.length > 2 ? arguments[2] : undefined;
                var active = mode === 'active';
                var cache = this._cachedDataOpts;
                var cacheKey = elementType + '-' + mode;
                var cached = cache[cacheKey];
                var sharing = this.enableOptionSharing && defined(index);
                if (cached) {
                    return cloneIfNotShared(cached, sharing);
                }
                var config = this.chart.config;
                var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
                var prefixes = active ? ["".concat(elementType, "Hover"), 'hover', elementType, ''] : [elementType, ''];
                var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
                var names = Object.keys(defaults.elements[elementType]);
                var context = function context() {
                    return _this3.getContext(index, active, mode);
                };
                var values = config.resolveNamedOptions(scopes, names, context, prefixes);
                if (values.$shared) {
                    values.$shared = sharing;
                    cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
                }
                return values;
            }
        }, {
            key: "_resolveAnimations",
            value: function _resolveAnimations(index, transition, active) {
                var chart = this.chart;
                var cache = this._cachedDataOpts;
                var cacheKey = "animation-".concat(transition);
                var cached = cache[cacheKey];
                if (cached) {
                    return cached;
                }
                var options;
                if (chart.options.animation !== false) {
                    var config = this.chart.config;
                    var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
                    var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
                    options = config.createResolver(scopes, this.getContext(index, active, transition));
                }
                var animations = new Animations(chart, options && options.animations);
                if (options && options._cacheable) {
                    cache[cacheKey] = Object.freeze(animations);
                }
                return animations;
            }
        }, {
            key: "getSharedOptions",
            value: function getSharedOptions(options) {
                if (!options.$shared) {
                    return;
                }
                return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
            }
        }, {
            key: "includeOptions",
            value: function includeOptions(mode, sharedOptions) {
                return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
            }
        }, {
            key: "_getSharedOptions",
            value: function _getSharedOptions(start, mode) {
                var firstOpts = this.resolveDataElementOptions(start, mode);
                var previouslySharedOptions = this._sharedOptions;
                var sharedOptions = this.getSharedOptions(firstOpts);
                var includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
                this.updateSharedOptions(sharedOptions, mode, firstOpts);
                return {
                    sharedOptions: sharedOptions,
                    includeOptions: includeOptions
                };
            }
        }, {
            key: "updateElement",
            value: function updateElement(element, index, properties, mode) {
                if (isDirectUpdateMode(mode)) {
                    Object.assign(element, properties);
                } else {
                    this._resolveAnimations(index, mode).update(element, properties);
                }
            }
        }, {
            key: "updateSharedOptions",
            value: function updateSharedOptions(sharedOptions, mode, newOptions) {
                if (sharedOptions && !isDirectUpdateMode(mode)) {
                    this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
                }
            }
        }, {
            key: "_setStyle",
            value: function _setStyle(element, index, mode, active) {
                element.active = active;
                var options = this.getStyle(index, active);
                this._resolveAnimations(index, mode, active).update(element, {
                    options: !active && this.getSharedOptions(options) || options
                });
            }
        }, {
            key: "removeHoverStyle",
            value: function removeHoverStyle(element, datasetIndex, index) {
                this._setStyle(element, index, 'active', false);
            }
        }, {
            key: "setHoverStyle",
            value: function setHoverStyle(element, datasetIndex, index) {
                this._setStyle(element, index, 'active', true);
            }
        }, {
            key: "_removeDatasetHoverStyle",
            value: function _removeDatasetHoverStyle() {
                var element = this._cachedMeta.dataset;
                if (element) {
                    this._setStyle(element, undefined, 'active', false);
                }
            }
        }, {
            key: "_setDatasetHoverStyle",
            value: function _setDatasetHoverStyle() {
                var element = this._cachedMeta.dataset;
                if (element) {
                    this._setStyle(element, undefined, 'active', true);
                }
            }
        }, {
            key: "_resyncElements",
            value: function _resyncElements(resetNewElements) {
                var data = this._data;
                var elements = this._cachedMeta.data;
                var _iterator3 = _createForOfIteratorHelper$1(this._syncList),
                    _step3;
                try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                        var _step3$value = _slicedToArray(_step3.value, 3),
                            method = _step3$value[0],
                            arg1 = _step3$value[1],
                            arg2 = _step3$value[2];
                        this[method](arg1, arg2);
                    }
                } catch (err) {
                    _iterator3.e(err);
                } finally {
                    _iterator3.f();
                }
                this._syncList = [];
                var numMeta = elements.length;
                var numData = data.length;
                var count = Math.min(numData, numMeta);
                if (count) {
                    this.parse(0, count);
                }
                if (numData > numMeta) {
                    this._insertElements(numMeta, numData - numMeta, resetNewElements);
                } else if (numData < numMeta) {
                    this._removeElements(numData, numMeta - numData);
                }
            }
        }, {
            key: "_insertElements",
            value: function _insertElements(start, count) {
                var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                var meta = this._cachedMeta;
                var data = meta.data;
                var end = start + count;
                var i;
                var move = function move(arr) {
                    arr.length += count;
                    for (i = arr.length - 1; i >= end; i--) {
                        arr[i] = arr[i - count];
                    }
                };
                move(data);
                for (i = start; i < end; ++i) {
                    data[i] = new this.dataElementType();
                }
                if (this._parsing) {
                    move(meta._parsed);
                }
                this.parse(start, count);
                if (resetNewElements) {
                    this.updateElements(data, start, count, 'reset');
                }
            }
        }, {
            key: "updateElements",
            value: function updateElements(element, start, count, mode) {}
        }, {
            key: "_removeElements",
            value: function _removeElements(start, count) {
                var meta = this._cachedMeta;
                if (this._parsing) {
                    var removed = meta._parsed.splice(start, count);
                    if (meta._stacked) {
                        clearStacks(meta, removed);
                    }
                }
                meta.data.splice(start, count);
            }
        }, {
            key: "_sync",
            value: function _sync(args) {
                if (this._parsing) {
                    this._syncList.push(args);
                } else {
                    var _args2 = _slicedToArray(args, 3),
                        method = _args2[0],
                        arg1 = _args2[1],
                        arg2 = _args2[2];
                    this[method](arg1, arg2);
                }
                this.chart._dataChanges.push([this.index].concat(_toConsumableArray(args)));
            }
        }, {
            key: "_onDataPush",
            value: function _onDataPush() {
                var count = arguments.length;
                this._sync(['_insertElements', this.getDataset().data.length - count, count]);
            }
        }, {
            key: "_onDataPop",
            value: function _onDataPop() {
                this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);
            }
        }, {
            key: "_onDataShift",
            value: function _onDataShift() {
                this._sync(['_removeElements', 0, 1]);
            }
        }, {
            key: "_onDataSplice",
            value: function _onDataSplice(start, count) {
                if (count) {
                    this._sync(['_removeElements', start, count]);
                }
                var newCount = arguments.length - 2;
                if (newCount) {
                    this._sync(['_insertElements', start, newCount]);
                }
            }
        }, {
            key: "_onDataUnshift",
            value: function _onDataUnshift() {
                this._sync(['_insertElements', 0, arguments.length]);
            }
        }]);
        return DatasetController;
    }();
    _defineProperty$w(DatasetController, "defaults", {});
    _defineProperty$w(DatasetController, "datasetElementType", null);
    _defineProperty$w(DatasetController, "dataElementType", null);
    function getAllScaleValues(scale, type) {
        if (!scale._cache.$bar) {
            var visibleMetas = scale.getMatchingVisibleMetas(type);
            var values = [];
            for (var i = 0, ilen = visibleMetas.length; i < ilen; i++) {
                values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
            }
            scale._cache.$bar = _arrayUnique(values.sort(function (a, b) {
                return a - b;
            }));
        }
        return scale._cache.$bar;
    }
    function computeMinSampleSize(meta) {
        var scale = meta.iScale;
        var values = getAllScaleValues(scale, meta.type);
        var min = scale._length;
        var i, ilen, curr, prev;
        var updateMinAndPrev = function updateMinAndPrev() {
            if (curr === 32767 || curr === -32768) {
                return;
            }
            if (defined(prev)) {
                min = Math.min(min, Math.abs(curr - prev) || min);
            }
            prev = curr;
        };
        for (i = 0, ilen = values.length; i < ilen; ++i) {
            curr = scale.getPixelForValue(values[i]);
            updateMinAndPrev();
        }
        prev = undefined;
        for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
            curr = scale.getPixelForTick(i);
            updateMinAndPrev();
        }
        return min;
    }
    function computeFitCategoryTraits(index, ruler, options, stackCount) {
        var thickness = options.barThickness;
        var size, ratio;
        if (isNullOrUndef(thickness)) {
            size = ruler.min * options.categoryPercentage;
            ratio = options.barPercentage;
        } else {
            size = thickness * stackCount;
            ratio = 1;
        }
        return {
            chunk: size / stackCount,
            ratio: ratio,
            start: ruler.pixels[index] - size / 2
        };
    }
    function computeFlexCategoryTraits(index, ruler, options, stackCount) {
        var pixels = ruler.pixels;
        var curr = pixels[index];
        var prev = index > 0 ? pixels[index - 1] : null;
        var next = index < pixels.length - 1 ? pixels[index + 1] : null;
        var percent = options.categoryPercentage;
        if (prev === null) {
            prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
        }
        if (next === null) {
            next = curr + curr - prev;
        }
        var start = curr - (curr - Math.min(prev, next)) / 2 * percent;
        var size = Math.abs(next - prev) / 2 * percent;
        return {
            chunk: size / stackCount,
            ratio: options.barPercentage,
            start: start
        };
    }
    function parseFloatBar(entry, item, vScale, i) {
        var startValue = vScale.parse(entry[0], i);
        var endValue = vScale.parse(entry[1], i);
        var min = Math.min(startValue, endValue);
        var max = Math.max(startValue, endValue);
        var barStart = min;
        var barEnd = max;
        if (Math.abs(min) > Math.abs(max)) {
            barStart = max;
            barEnd = min;
        }
        item[vScale.axis] = barEnd;
        item._custom = {
            barStart: barStart,
            barEnd: barEnd,
            start: startValue,
            end: endValue,
            min: min,
            max: max
        };
    }
    function parseValue(entry, item, vScale, i) {
        if (isArray(entry)) {
            parseFloatBar(entry, item, vScale, i);
        } else {
            item[vScale.axis] = vScale.parse(entry, i);
        }
        return item;
    }
    function parseArrayOrPrimitive(meta, data, start, count) {
        var iScale = meta.iScale;
        var vScale = meta.vScale;
        var labels = iScale.getLabels();
        var singleScale = iScale === vScale;
        var parsed = [];
        var i, ilen, item, entry;
        for (i = start, ilen = start + count; i < ilen; ++i) {
            entry = data[i];
            item = {};
            item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
            parsed.push(parseValue(entry, item, vScale, i));
        }
        return parsed;
    }
    function isFloatBar(custom) {
        return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
    }
    function barSign(size, vScale, actualBase) {
        if (size !== 0) {
            return sign(size);
        }
        return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
    }
    function borderProps(properties) {
        var reverse, start, end, top, bottom;
        if (properties.horizontal) {
            reverse = properties.base > properties.x;
            start = 'left';
            end = 'right';
        } else {
            reverse = properties.base < properties.y;
            start = 'bottom';
            end = 'top';
        }
        if (reverse) {
            top = 'end';
            bottom = 'start';
        } else {
            top = 'start';
            bottom = 'end';
        }
        return {
            start: start,
            end: end,
            reverse: reverse,
            top: top,
            bottom: bottom
        };
    }
    function setBorderSkipped(properties, options, stack, index) {
        var edge = options.borderSkipped;
        var res = {};
        if (!edge) {
            properties.borderSkipped = res;
            return;
        }
        if (edge === true) {
            properties.borderSkipped = {
                top: true,
                right: true,
                bottom: true,
                left: true
            };
            return;
        }
        var _borderProps = borderProps(properties),
            start = _borderProps.start,
            end = _borderProps.end,
            reverse = _borderProps.reverse,
            top = _borderProps.top,
            bottom = _borderProps.bottom;
        if (edge === 'middle' && stack) {
            properties.enableBorderRadius = true;
            if ((stack._top || 0) === index) {
                edge = top;
            } else if ((stack._bottom || 0) === index) {
                edge = bottom;
            } else {
                res[parseEdge(bottom, start, end, reverse)] = true;
                edge = top;
            }
        }
        res[parseEdge(edge, start, end, reverse)] = true;
        properties.borderSkipped = res;
    }
    function parseEdge(edge, a, b, reverse) {
        if (reverse) {
            edge = swap(edge, a, b);
            edge = startEnd(edge, b, a);
        } else {
            edge = startEnd(edge, a, b);
        }
        return edge;
    }
    function swap(orig, v1, v2) {
        return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }
    function startEnd(v, start, end) {
        return v === 'start' ? start : v === 'end' ? end : v;
    }
    function setInflateAmount(properties, _ref, ratio) {
        var inflateAmount = _ref.inflateAmount;
        properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;
    }
    var BarController = /*#__PURE__*/function (_DatasetController) {
        _inherits$w(BarController, _DatasetController);
        var _super = _createSuper$w(BarController);
        function BarController() {
            _classCallCheck$x(this, BarController);
            return _super.apply(this, arguments);
        }
        _createClass$x(BarController, [{
            key: "parsePrimitiveData",
            value: function parsePrimitiveData(meta, data, start, count) {
                return parseArrayOrPrimitive(meta, data, start, count);
            }
        }, {
            key: "parseArrayData",
            value: function parseArrayData(meta, data, start, count) {
                return parseArrayOrPrimitive(meta, data, start, count);
            }
        }, {
            key: "parseObjectData",
            value: function parseObjectData(meta, data, start, count) {
                var iScale = meta.iScale,
                    vScale = meta.vScale;
                var _this$_parsing2 = this._parsing,
                    _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,
                    xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,
                    _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,
                    yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;
                var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
                var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
                var parsed = [];
                var i, ilen, item, obj;
                for (i = start, ilen = start + count; i < ilen; ++i) {
                    obj = data[i];
                    item = {};
                    item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
                    parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
                }
                return parsed;
            }
        }, {
            key: "updateRangeFromParsed",
            value: function updateRangeFromParsed(range, scale, parsed, stack) {
                _get(_getPrototypeOf$w(BarController.prototype), "updateRangeFromParsed", this).call(this, range, scale, parsed, stack);
                var custom = parsed._custom;
                if (custom && scale === this._cachedMeta.vScale) {
                    range.min = Math.min(range.min, custom.min);
                    range.max = Math.max(range.max, custom.max);
                }
            }
        }, {
            key: "getMaxOverflow",
            value: function getMaxOverflow() {
                return 0;
            }
        }, {
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var iScale = meta.iScale,
                    vScale = meta.vScale;
                var parsed = this.getParsed(index);
                var custom = parsed._custom;
                var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
                return {
                    label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
                    value: value
                };
            }
        }, {
            key: "initialize",
            value: function initialize() {
                this.enableOptionSharing = true;
                _get(_getPrototypeOf$w(BarController.prototype), "initialize", this).call(this);
                var meta = this._cachedMeta;
                meta.stack = this.getDataset().stack;
            }
        }, {
            key: "update",
            value: function update(mode) {
                var meta = this._cachedMeta;
                this.updateElements(meta.data, 0, meta.data.length, mode);
            }
        }, {
            key: "updateElements",
            value: function updateElements(bars, start, count, mode) {
                var reset = mode === 'reset';
                var index = this.index,
                    vScale = this._cachedMeta.vScale;
                var base = vScale.getBasePixel();
                var horizontal = vScale.isHorizontal();
                var ruler = this._getRuler();
                var _this$_getSharedOptio = this._getSharedOptions(start, mode),
                    sharedOptions = _this$_getSharedOptio.sharedOptions,
                    includeOptions = _this$_getSharedOptio.includeOptions;
                for (var i = start; i < start + count; i++) {
                    var parsed = this.getParsed(i);
                    var vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
                        base: base,
                        head: base
                    } : this._calculateBarValuePixels(i);
                    var ipixels = this._calculateBarIndexPixels(i, ruler);
                    var stack = (parsed._stacks || {})[vScale.axis];
                    var properties = {
                        horizontal: horizontal,
                        base: vpixels.base,
                        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                        x: horizontal ? vpixels.head : ipixels.center,
                        y: horizontal ? ipixels.center : vpixels.head,
                        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
                    };
                    if (includeOptions) {
                        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
                    }
                    var options = properties.options || bars[i].options;
                    setBorderSkipped(properties, options, stack, index);
                    setInflateAmount(properties, options, ruler.ratio);
                    this.updateElement(bars[i], i, properties, mode);
                }
            }
        }, {
            key: "_getStacks",
            value: function _getStacks(last, dataIndex) {
                var iScale = this._cachedMeta.iScale;
                var metasets = iScale.getMatchingVisibleMetas(this._type).filter(function (meta) {
                    return meta.controller.options.grouped;
                });
                var stacked = iScale.options.stacked;
                var stacks = [];
                var skipNull = function skipNull(meta) {
                    var parsed = meta.controller.getParsed(dataIndex);
                    var val = parsed && parsed[meta.vScale.axis];
                    if (isNullOrUndef(val) || isNaN(val)) {
                        return true;
                    }
                };
                var _iterator4 = _createForOfIteratorHelper$1(metasets),
                    _step4;
                try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                        var meta = _step4.value;
                        if (dataIndex !== undefined && skipNull(meta)) {
                            continue;
                        }
                        if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {
                            stacks.push(meta.stack);
                        }
                        if (meta.index === last) {
                            break;
                        }
                    }
                } catch (err) {
                    _iterator4.e(err);
                } finally {
                    _iterator4.f();
                }
                if (!stacks.length) {
                    stacks.push(undefined);
                }
                return stacks;
            }
        }, {
            key: "_getStackCount",
            value: function _getStackCount(index) {
                return this._getStacks(undefined, index).length;
            }
        }, {
            key: "_getStackIndex",
            value: function _getStackIndex(datasetIndex, name, dataIndex) {
                var stacks = this._getStacks(datasetIndex, dataIndex);
                var index = name !== undefined ? stacks.indexOf(name) : -1;
                return index === -1 ? stacks.length - 1 : index;
            }
        }, {
            key: "_getRuler",
            value: function _getRuler() {
                var opts = this.options;
                var meta = this._cachedMeta;
                var iScale = meta.iScale;
                var pixels = [];
                var i, ilen;
                for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
                    pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
                }
                var barThickness = opts.barThickness;
                var min = barThickness || computeMinSampleSize(meta);
                return {
                    min: min,
                    pixels: pixels,
                    start: iScale._startPixel,
                    end: iScale._endPixel,
                    stackCount: this._getStackCount(),
                    scale: iScale,
                    grouped: opts.grouped,
                    ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
                };
            }
        }, {
            key: "_calculateBarValuePixels",
            value: function _calculateBarValuePixels(index) {
                var _this$_cachedMeta = this._cachedMeta,
                    vScale = _this$_cachedMeta.vScale,
                    _stacked = _this$_cachedMeta._stacked,
                    datasetIndex = _this$_cachedMeta.index,
                    _this$options = this.options,
                    baseValue = _this$options.base,
                    minBarLength = _this$options.minBarLength;
                var actualBase = baseValue || 0;
                var parsed = this.getParsed(index);
                var custom = parsed._custom;
                var floating = isFloatBar(custom);
                var value = parsed[vScale.axis];
                var start = 0;
                var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
                var head, size;
                if (length !== value) {
                    start = length - value;
                    length = value;
                }
                if (floating) {
                    value = custom.barStart;
                    length = custom.barEnd - custom.barStart;
                    if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
                        start = 0;
                    }
                    start += value;
                }
                var startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
                var base = vScale.getPixelForValue(startValue);
                if (this.chart.getDataVisibility(index)) {
                    head = vScale.getPixelForValue(start + length);
                } else {
                    head = base;
                }
                size = head - base;
                if (Math.abs(size) < minBarLength) {
                    size = barSign(size, vScale, actualBase) * minBarLength;
                    if (value === actualBase) {
                        base -= size / 2;
                    }
                    var startPixel = vScale.getPixelForDecimal(0);
                    var endPixel = vScale.getPixelForDecimal(1);
                    var min = Math.min(startPixel, endPixel);
                    var max = Math.max(startPixel, endPixel);
                    base = Math.max(Math.min(base, max), min);
                    head = base + size;
                    if (_stacked && !floating) {
                        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
                    }
                }
                if (base === vScale.getPixelForValue(actualBase)) {
                    var halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
                    base += halfGrid;
                    size -= halfGrid;
                }
                return {
                    size: size,
                    base: base,
                    head: head,
                    center: head + size / 2
                };
            }
        }, {
            key: "_calculateBarIndexPixels",
            value: function _calculateBarIndexPixels(index, ruler) {
                var scale = ruler.scale;
                var options = this.options;
                var skipNull = options.skipNull;
                var maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
                var center, size;
                if (ruler.grouped) {
                    var stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
                    var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
                    var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
                    center = range.start + range.chunk * stackIndex + range.chunk / 2;
                    size = Math.min(maxBarThickness, range.chunk * range.ratio);
                } else {
                    center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
                    size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
                }
                return {
                    base: center - size / 2,
                    head: center + size / 2,
                    center: center,
                    size: size
                };
            }
        }, {
            key: "draw",
            value: function draw() {
                var meta = this._cachedMeta;
                var vScale = meta.vScale;
                var rects = meta.data;
                var ilen = rects.length;
                var i = 0;
                for (; i < ilen; ++i) {
                    if (this.getParsed(i)[vScale.axis] !== null) {
                        rects[i].draw(this._ctx);
                    }
                }
            }
        }]);
        return BarController;
    }(DatasetController);
    _defineProperty$w(BarController, "id", 'bar');
    _defineProperty$w(BarController, "defaults", {
        datasetElementType: false,
        dataElementType: 'bar',
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: 'number',
                properties: ['x', 'y', 'base', 'width', 'height']
            }
        }
    });
    _defineProperty$w(BarController, "overrides", {
        scales: {
            _index_: {
                type: 'category',
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: 'linear',
                beginAtZero: true
            }
        }
    });
    var BubbleController = /*#__PURE__*/function (_DatasetController2) {
        _inherits$w(BubbleController, _DatasetController2);
        var _super2 = _createSuper$w(BubbleController);
        function BubbleController() {
            _classCallCheck$x(this, BubbleController);
            return _super2.apply(this, arguments);
        }
        _createClass$x(BubbleController, [{
            key: "initialize",
            value: function initialize() {
                this.enableOptionSharing = true;
                _get(_getPrototypeOf$w(BubbleController.prototype), "initialize", this).call(this);
            }
        }, {
            key: "parsePrimitiveData",
            value: function parsePrimitiveData(meta, data, start, count) {
                var parsed = _get(_getPrototypeOf$w(BubbleController.prototype), "parsePrimitiveData", this).call(this, meta, data, start, count);
                for (var i = 0; i < parsed.length; i++) {
                    parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
                }
                return parsed;
            }
        }, {
            key: "parseArrayData",
            value: function parseArrayData(meta, data, start, count) {
                var parsed = _get(_getPrototypeOf$w(BubbleController.prototype), "parseArrayData", this).call(this, meta, data, start, count);
                for (var i = 0; i < parsed.length; i++) {
                    var item = data[start + i];
                    parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);
                }
                return parsed;
            }
        }, {
            key: "parseObjectData",
            value: function parseObjectData(meta, data, start, count) {
                var parsed = _get(_getPrototypeOf$w(BubbleController.prototype), "parseObjectData", this).call(this, meta, data, start, count);
                for (var i = 0; i < parsed.length; i++) {
                    var item = data[start + i];
                    parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
                }
                return parsed;
            }
        }, {
            key: "getMaxOverflow",
            value: function getMaxOverflow() {
                var data = this._cachedMeta.data;
                var max = 0;
                for (var i = data.length - 1; i >= 0; --i) {
                    max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
                }
                return max > 0 && max;
            }
        }, {
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var labels = this.chart.data.labels || [];
                var xScale = meta.xScale,
                    yScale = meta.yScale;
                var parsed = this.getParsed(index);
                var x = xScale.getLabelForValue(parsed.x);
                var y = yScale.getLabelForValue(parsed.y);
                var r = parsed._custom;
                return {
                    label: labels[index] || '',
                    value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
                };
            }
        }, {
            key: "update",
            value: function update(mode) {
                var points = this._cachedMeta.data;
                this.updateElements(points, 0, points.length, mode);
            }
        }, {
            key: "updateElements",
            value: function updateElements(points, start, count, mode) {
                var reset = mode === 'reset';
                var _this$_cachedMeta2 = this._cachedMeta,
                    iScale = _this$_cachedMeta2.iScale,
                    vScale = _this$_cachedMeta2.vScale;
                var _this$_getSharedOptio2 = this._getSharedOptions(start, mode),
                    sharedOptions = _this$_getSharedOptio2.sharedOptions,
                    includeOptions = _this$_getSharedOptio2.includeOptions;
                var iAxis = iScale.axis;
                var vAxis = vScale.axis;
                for (var i = start; i < start + count; i++) {
                    var point = points[i];
                    var parsed = !reset && this.getParsed(i);
                    var properties = {};
                    var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
                    var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
                    properties.skip = isNaN(iPixel) || isNaN(vPixel);
                    if (includeOptions) {
                        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                        if (reset) {
                            properties.options.radius = 0;
                        }
                    }
                    this.updateElement(point, i, properties, mode);
                }
            }
        }, {
            key: "resolveDataElementOptions",
            value: function resolveDataElementOptions(index, mode) {
                var parsed = this.getParsed(index);
                var values = _get(_getPrototypeOf$w(BubbleController.prototype), "resolveDataElementOptions", this).call(this, index, mode);
                if (values.$shared) {
                    values = Object.assign({}, values, {
                        $shared: false
                    });
                }
                var radius = values.radius;
                if (mode !== 'active') {
                    values.radius = 0;
                }
                values.radius += valueOrDefault(parsed && parsed._custom, radius);
                return values;
            }
        }]);
        return BubbleController;
    }(DatasetController);
    _defineProperty$w(BubbleController, "id", 'bubble');
    _defineProperty$w(BubbleController, "defaults", {
        datasetElementType: false,
        dataElementType: 'point',
        animations: {
            numbers: {
                type: 'number',
                properties: ['x', 'y', 'borderWidth', 'radius']
            }
        }
    });
    _defineProperty$w(BubbleController, "overrides", {
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    });
    function getRatioAndOffset(rotation, circumference, cutout) {
        var ratioX = 1;
        var ratioY = 1;
        var offsetX = 0;
        var offsetY = 0;
        if (circumference < TAU) {
            var startAngle = rotation;
            var endAngle = startAngle + circumference;
            var startX = Math.cos(startAngle);
            var startY = Math.sin(startAngle);
            var endX = Math.cos(endAngle);
            var endY = Math.sin(endAngle);
            var calcMax = function calcMax(angle, a, b) {
                return _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
            };
            var calcMin = function calcMin(angle, a, b) {
                return _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
            };
            var maxX = calcMax(0, startX, endX);
            var maxY = calcMax(HALF_PI, startY, endY);
            var minX = calcMin(PI, startX, endX);
            var minY = calcMin(PI + HALF_PI, startY, endY);
            ratioX = (maxX - minX) / 2;
            ratioY = (maxY - minY) / 2;
            offsetX = -(maxX + minX) / 2;
            offsetY = -(maxY + minY) / 2;
        }
        return {
            ratioX: ratioX,
            ratioY: ratioY,
            offsetX: offsetX,
            offsetY: offsetY
        };
    }
    var DoughnutController = /*#__PURE__*/function (_DatasetController3) {
        _inherits$w(DoughnutController, _DatasetController3);
        var _super3 = _createSuper$w(DoughnutController);
        function DoughnutController(chart, datasetIndex) {
            var _this4;
            _classCallCheck$x(this, DoughnutController);
            _this4 = _super3.call(this, chart, datasetIndex);
            _this4.enableOptionSharing = true;
            _this4.innerRadius = undefined;
            _this4.outerRadius = undefined;
            _this4.offsetX = undefined;
            _this4.offsetY = undefined;
            return _this4;
        }
        _createClass$x(DoughnutController, [{
            key: "linkScales",
            value: function linkScales() {}
        }, {
            key: "parse",
            value: function parse(start, count) {
                var data = this.getDataset().data;
                var meta = this._cachedMeta;
                if (this._parsing === false) {
                    meta._parsed = data;
                } else {
                    var getter = function getter(i) {
                        return +data[i];
                    };
                    if (isObject(data[start])) {
                        var _this$_parsing$key = this._parsing.key,
                            key = _this$_parsing$key === void 0 ? 'value' : _this$_parsing$key;
                        getter = function getter(i) {
                            return +resolveObjectKey(data[i], key);
                        };
                    }
                    var i, ilen;
                    for (i = start, ilen = start + count; i < ilen; ++i) {
                        meta._parsed[i] = getter(i);
                    }
                }
            }
        }, {
            key: "_getRotation",
            value: function _getRotation() {
                return toRadians(this.options.rotation - 90);
            }
        }, {
            key: "_getCircumference",
            value: function _getCircumference() {
                return toRadians(this.options.circumference);
            }
        }, {
            key: "_getRotationExtents",
            value: function _getRotationExtents() {
                var min = TAU;
                var max = -TAU;
                for (var i = 0; i < this.chart.data.datasets.length; ++i) {
                    if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
                        var controller = this.chart.getDatasetMeta(i).controller;
                        var rotation = controller._getRotation();
                        var circumference = controller._getCircumference();
                        min = Math.min(min, rotation);
                        max = Math.max(max, rotation + circumference);
                    }
                }
                return {
                    rotation: min,
                    circumference: max - min
                };
            }
        }, {
            key: "update",
            value: function update(mode) {
                var chart = this.chart;
                var chartArea = chart.chartArea;
                var meta = this._cachedMeta;
                var arcs = meta.data;
                var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
                var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
                var cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
                var chartWeight = this._getRingWeight(this.index);
                var _this$_getRotationExt = this._getRotationExtents(),
                    circumference = _this$_getRotationExt.circumference,
                    rotation = _this$_getRotationExt.rotation;
                var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),
                    ratioX = _getRatioAndOffset.ratioX,
                    ratioY = _getRatioAndOffset.ratioY,
                    offsetX = _getRatioAndOffset.offsetX,
                    offsetY = _getRatioAndOffset.offsetY;
                var maxWidth = (chartArea.width - spacing) / ratioX;
                var maxHeight = (chartArea.height - spacing) / ratioY;
                var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
                var outerRadius = toDimension(this.options.radius, maxRadius);
                var innerRadius = Math.max(outerRadius * cutout, 0);
                var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
                this.offsetX = offsetX * outerRadius;
                this.offsetY = offsetY * outerRadius;
                meta.total = this.calculateTotal();
                this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
                this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
                this.updateElements(arcs, 0, arcs.length, mode);
            }
        }, {
            key: "_circumference",
            value: function _circumference(i, reset) {
                var opts = this.options;
                var meta = this._cachedMeta;
                var circumference = this._getCircumference();
                if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
                    return 0;
                }
                return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
            }
        }, {
            key: "updateElements",
            value: function updateElements(arcs, start, count, mode) {
                var reset = mode === 'reset';
                var chart = this.chart;
                var chartArea = chart.chartArea;
                var opts = chart.options;
                var animationOpts = opts.animation;
                var centerX = (chartArea.left + chartArea.right) / 2;
                var centerY = (chartArea.top + chartArea.bottom) / 2;
                var animateScale = reset && animationOpts.animateScale;
                var innerRadius = animateScale ? 0 : this.innerRadius;
                var outerRadius = animateScale ? 0 : this.outerRadius;
                var _this$_getSharedOptio3 = this._getSharedOptions(start, mode),
                    sharedOptions = _this$_getSharedOptio3.sharedOptions,
                    includeOptions = _this$_getSharedOptio3.includeOptions;
                var startAngle = this._getRotation();
                var i;
                for (i = 0; i < start; ++i) {
                    startAngle += this._circumference(i, reset);
                }
                for (i = start; i < start + count; ++i) {
                    var circumference = this._circumference(i, reset);
                    var arc = arcs[i];
                    var properties = {
                        x: centerX + this.offsetX,
                        y: centerY + this.offsetY,
                        startAngle: startAngle,
                        endAngle: startAngle + circumference,
                        circumference: circumference,
                        outerRadius: outerRadius,
                        innerRadius: innerRadius
                    };
                    if (includeOptions) {
                        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
                    }
                    startAngle += circumference;
                    this.updateElement(arc, i, properties, mode);
                }
            }
        }, {
            key: "calculateTotal",
            value: function calculateTotal() {
                var meta = this._cachedMeta;
                var metaData = meta.data;
                var total = 0;
                var i;
                for (i = 0; i < metaData.length; i++) {
                    var value = meta._parsed[i];
                    if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
                        total += Math.abs(value);
                    }
                }
                return total;
            }
        }, {
            key: "calculateCircumference",
            value: function calculateCircumference(value) {
                var total = this._cachedMeta.total;
                if (total > 0 && !isNaN(value)) {
                    return TAU * (Math.abs(value) / total);
                }
                return 0;
            }
        }, {
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var chart = this.chart;
                var labels = chart.data.labels || [];
                var value = formatNumber(meta._parsed[index], chart.options.locale);
                return {
                    label: labels[index] || '',
                    value: value
                };
            }
        }, {
            key: "getMaxBorderWidth",
            value: function getMaxBorderWidth(arcs) {
                var max = 0;
                var chart = this.chart;
                var i, ilen, meta, controller, options;
                if (!arcs) {
                    for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
                        if (chart.isDatasetVisible(i)) {
                            meta = chart.getDatasetMeta(i);
                            arcs = meta.data;
                            controller = meta.controller;
                            break;
                        }
                    }
                }
                if (!arcs) {
                    return 0;
                }
                for (i = 0, ilen = arcs.length; i < ilen; ++i) {
                    options = controller.resolveDataElementOptions(i);
                    if (options.borderAlign !== 'inner') {
                        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
                    }
                }
                return max;
            }
        }, {
            key: "getMaxOffset",
            value: function getMaxOffset(arcs) {
                var max = 0;
                for (var i = 0, ilen = arcs.length; i < ilen; ++i) {
                    var options = this.resolveDataElementOptions(i);
                    max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
                }
                return max;
            }
        }, {
            key: "_getRingWeightOffset",
            value: function _getRingWeightOffset(datasetIndex) {
                var ringWeightOffset = 0;
                for (var i = 0; i < datasetIndex; ++i) {
                    if (this.chart.isDatasetVisible(i)) {
                        ringWeightOffset += this._getRingWeight(i);
                    }
                }
                return ringWeightOffset;
            }
        }, {
            key: "_getRingWeight",
            value: function _getRingWeight(datasetIndex) {
                return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
            }
        }, {
            key: "_getVisibleDatasetWeightTotal",
            value: function _getVisibleDatasetWeightTotal() {
                return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
            }
        }]);
        return DoughnutController;
    }(DatasetController);
    _defineProperty$w(DoughnutController, "id", 'doughnut');
    _defineProperty$w(DoughnutController, "defaults", {
        datasetElementType: false,
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: 'number',
                properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']
            }
        },
        cutout: '50%',
        rotation: 0,
        circumference: 360,
        radius: '100%',
        spacing: 0,
        indexAxis: 'r'
    });
    _defineProperty$w(DoughnutController, "descriptors", {
        _scriptable: function _scriptable(name) {
            return name !== 'spacing';
        },
        _indexable: function _indexable(name) {
            return name !== 'spacing';
        }
    });
    _defineProperty$w(DoughnutController, "overrides", {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels: function generateLabels(chart) {
                        var data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            var _chart$legend$options2 = chart.legend.options.labels,
                                pointStyle = _chart$legend$options2.pointStyle,
                                color = _chart$legend$options2.color;
                            return data.labels.map(function (label, i) {
                                var meta = chart.getDatasetMeta(0);
                                var style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick: function onClick(e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        }
    });
    var LineController = /*#__PURE__*/function (_DatasetController4) {
        _inherits$w(LineController, _DatasetController4);
        var _super4 = _createSuper$w(LineController);
        function LineController() {
            _classCallCheck$x(this, LineController);
            return _super4.apply(this, arguments);
        }
        _createClass$x(LineController, [{
            key: "initialize",
            value: function initialize() {
                this.enableOptionSharing = true;
                this.supportsDecimation = true;
                _get(_getPrototypeOf$w(LineController.prototype), "initialize", this).call(this);
            }
        }, {
            key: "update",
            value: function update(mode) {
                var meta = this._cachedMeta;
                var line = meta.dataset,
                    _meta$data = meta.data,
                    points = _meta$data === void 0 ? [] : _meta$data,
                    _dataset = meta._dataset;
                var animationsDisabled = this.chart._animationsDisabled;
                var _getStartAndCountOfVi = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),
                    start = _getStartAndCountOfVi.start,
                    count = _getStartAndCountOfVi.count;
                this._drawStart = start;
                this._drawCount = count;
                if (_scaleRangesChanged(meta)) {
                    start = 0;
                    count = points.length;
                }
                line._chart = this.chart;
                line._datasetIndex = this.index;
                line._decimated = !!_dataset._decimated;
                line.points = points;
                var options = this.resolveDatasetElementOptions(mode);
                if (!this.options.showLine) {
                    options.borderWidth = 0;
                }
                options.segment = this.options.segment;
                this.updateElement(line, undefined, {
                    animated: !animationsDisabled,
                    options: options
                }, mode);
                this.updateElements(points, start, count, mode);
            }
        }, {
            key: "updateElements",
            value: function updateElements(points, start, count, mode) {
                var reset = mode === 'reset';
                var _this$_cachedMeta3 = this._cachedMeta,
                    iScale = _this$_cachedMeta3.iScale,
                    vScale = _this$_cachedMeta3.vScale,
                    _stacked = _this$_cachedMeta3._stacked,
                    _dataset = _this$_cachedMeta3._dataset;
                var _this$_getSharedOptio4 = this._getSharedOptions(start, mode),
                    sharedOptions = _this$_getSharedOptio4.sharedOptions,
                    includeOptions = _this$_getSharedOptio4.includeOptions;
                var iAxis = iScale.axis;
                var vAxis = vScale.axis;
                var _this$options2 = this.options,
                    spanGaps = _this$options2.spanGaps,
                    segment = _this$options2.segment;
                var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
                var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
                var end = start + count;
                var pointsCount = points.length;
                var prevParsed = start > 0 && this.getParsed(start - 1);
                for (var i = 0; i < pointsCount; ++i) {
                    var point = points[i];
                    var properties = directUpdate ? point : {};
                    if (i < start || i >= end) {
                        properties.skip = true;
                        continue;
                    }
                    var parsed = this.getParsed(i);
                    var nullData = isNullOrUndef(parsed[vAxis]);
                    var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
                    var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
                    properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
                    properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
                    if (segment) {
                        properties.parsed = parsed;
                        properties.raw = _dataset.data[i];
                    }
                    if (includeOptions) {
                        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                    }
                    if (!directUpdate) {
                        this.updateElement(point, i, properties, mode);
                    }
                    prevParsed = parsed;
                }
            }
        }, {
            key: "getMaxOverflow",
            value: function getMaxOverflow() {
                var meta = this._cachedMeta;
                var dataset = meta.dataset;
                var border = dataset.options && dataset.options.borderWidth || 0;
                var data = meta.data || [];
                if (!data.length) {
                    return border;
                }
                var firstPoint = data[0].size(this.resolveDataElementOptions(0));
                var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
                return Math.max(border, firstPoint, lastPoint) / 2;
            }
        }, {
            key: "draw",
            value: function draw() {
                var meta = this._cachedMeta;
                meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
                _get(_getPrototypeOf$w(LineController.prototype), "draw", this).call(this);
            }
        }]);
        return LineController;
    }(DatasetController);
    _defineProperty$w(LineController, "id", 'line');
    _defineProperty$w(LineController, "defaults", {
        datasetElementType: 'line',
        dataElementType: 'point',
        showLine: true,
        spanGaps: false
    });
    _defineProperty$w(LineController, "overrides", {
        scales: {
            _index_: {
                type: 'category'
            },
            _value_: {
                type: 'linear'
            }
        }
    });
    var PolarAreaController = /*#__PURE__*/function (_DatasetController5) {
        _inherits$w(PolarAreaController, _DatasetController5);
        var _super5 = _createSuper$w(PolarAreaController);
        function PolarAreaController(chart, datasetIndex) {
            var _this5;
            _classCallCheck$x(this, PolarAreaController);
            _this5 = _super5.call(this, chart, datasetIndex);
            _this5.innerRadius = undefined;
            _this5.outerRadius = undefined;
            return _this5;
        }
        _createClass$x(PolarAreaController, [{
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var chart = this.chart;
                var labels = chart.data.labels || [];
                var value = formatNumber(meta._parsed[index].r, chart.options.locale);
                return {
                    label: labels[index] || '',
                    value: value
                };
            }
        }, {
            key: "parseObjectData",
            value: function parseObjectData(meta, data, start, count) {
                return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
            }
        }, {
            key: "update",
            value: function update(mode) {
                var arcs = this._cachedMeta.data;
                this._updateRadius();
                this.updateElements(arcs, 0, arcs.length, mode);
            }
        }, {
            key: "getMinMax",
            value: function getMinMax() {
                var _this6 = this;
                var meta = this._cachedMeta;
                var range = {
                    min: Number.POSITIVE_INFINITY,
                    max: Number.NEGATIVE_INFINITY
                };
                meta.data.forEach(function (element, index) {
                    var parsed = _this6.getParsed(index).r;
                    if (!isNaN(parsed) && _this6.chart.getDataVisibility(index)) {
                        if (parsed < range.min) {
                            range.min = parsed;
                        }
                        if (parsed > range.max) {
                            range.max = parsed;
                        }
                    }
                });
                return range;
            }
        }, {
            key: "_updateRadius",
            value: function _updateRadius() {
                var chart = this.chart;
                var chartArea = chart.chartArea;
                var opts = chart.options;
                var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
                var outerRadius = Math.max(minSize / 2, 0);
                var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
                var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
                this.outerRadius = outerRadius - radiusLength * this.index;
                this.innerRadius = this.outerRadius - radiusLength;
            }
        }, {
            key: "updateElements",
            value: function updateElements(arcs, start, count, mode) {
                var reset = mode === 'reset';
                var chart = this.chart;
                var opts = chart.options;
                var animationOpts = opts.animation;
                var scale = this._cachedMeta.rScale;
                var centerX = scale.xCenter;
                var centerY = scale.yCenter;
                var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
                var angle = datasetStartAngle;
                var i;
                var defaultAngle = 360 / this.countVisibleElements();
                for (i = 0; i < start; ++i) {
                    angle += this._computeAngle(i, mode, defaultAngle);
                }
                for (i = start; i < start + count; i++) {
                    var arc = arcs[i];
                    var startAngle = angle;
                    var endAngle = angle + this._computeAngle(i, mode, defaultAngle);
                    var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
                    angle = endAngle;
                    if (reset) {
                        if (animationOpts.animateScale) {
                            outerRadius = 0;
                        }
                        if (animationOpts.animateRotate) {
                            startAngle = endAngle = datasetStartAngle;
                        }
                    }
                    var properties = {
                        x: centerX,
                        y: centerY,
                        innerRadius: 0,
                        outerRadius: outerRadius,
                        startAngle: startAngle,
                        endAngle: endAngle,
                        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
                    };
                    this.updateElement(arc, i, properties, mode);
                }
            }
        }, {
            key: "countVisibleElements",
            value: function countVisibleElements() {
                var _this7 = this;
                var meta = this._cachedMeta;
                var count = 0;
                meta.data.forEach(function (element, index) {
                    if (!isNaN(_this7.getParsed(index).r) && _this7.chart.getDataVisibility(index)) {
                        count++;
                    }
                });
                return count;
            }
        }, {
            key: "_computeAngle",
            value: function _computeAngle(index, mode, defaultAngle) {
                return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
            }
        }]);
        return PolarAreaController;
    }(DatasetController);
    _defineProperty$w(PolarAreaController, "id", 'polarArea');
    _defineProperty$w(PolarAreaController, "defaults", {
        dataElementType: 'arc',
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: 'number',
                properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
            }
        },
        indexAxis: 'r',
        startAngle: 0
    });
    _defineProperty$w(PolarAreaController, "overrides", {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels: function generateLabels(chart) {
                        var data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            var _chart$legend$options3 = chart.legend.options.labels,
                                pointStyle = _chart$legend$options3.pointStyle,
                                color = _chart$legend$options3.color;
                            return data.labels.map(function (label, i) {
                                var meta = chart.getDatasetMeta(0);
                                var style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick: function onClick(e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        },
        scales: {
            r: {
                type: 'radialLinear',
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    });
    var PieController = /*#__PURE__*/function (_DoughnutController) {
        _inherits$w(PieController, _DoughnutController);
        var _super6 = _createSuper$w(PieController);
        function PieController() {
            _classCallCheck$x(this, PieController);
            return _super6.apply(this, arguments);
        }
        return _createClass$x(PieController);
    }(DoughnutController);
    _defineProperty$w(PieController, "id", 'pie');
    _defineProperty$w(PieController, "defaults", {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: '100%'
    });
    var RadarController = /*#__PURE__*/function (_DatasetController6) {
        _inherits$w(RadarController, _DatasetController6);
        var _super7 = _createSuper$w(RadarController);
        function RadarController() {
            _classCallCheck$x(this, RadarController);
            return _super7.apply(this, arguments);
        }
        _createClass$x(RadarController, [{
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var vScale = this._cachedMeta.vScale;
                var parsed = this.getParsed(index);
                return {
                    label: vScale.getLabels()[index],
                    value: '' + vScale.getLabelForValue(parsed[vScale.axis])
                };
            }
        }, {
            key: "parseObjectData",
            value: function parseObjectData(meta, data, start, count) {
                return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
            }
        }, {
            key: "update",
            value: function update(mode) {
                var meta = this._cachedMeta;
                var line = meta.dataset;
                var points = meta.data || [];
                var labels = meta.iScale.getLabels();
                line.points = points;
                if (mode !== 'resize') {
                    var options = this.resolveDatasetElementOptions(mode);
                    if (!this.options.showLine) {
                        options.borderWidth = 0;
                    }
                    var properties = {
                        _loop: true,
                        _fullLoop: labels.length === points.length,
                        options: options
                    };
                    this.updateElement(line, undefined, properties, mode);
                }
                this.updateElements(points, 0, points.length, mode);
            }
        }, {
            key: "updateElements",
            value: function updateElements(points, start, count, mode) {
                var scale = this._cachedMeta.rScale;
                var reset = mode === 'reset';
                for (var i = start; i < start + count; i++) {
                    var point = points[i];
                    var options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                    var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
                    var x = reset ? scale.xCenter : pointPosition.x;
                    var y = reset ? scale.yCenter : pointPosition.y;
                    var properties = {
                        x: x,
                        y: y,
                        angle: pointPosition.angle,
                        skip: isNaN(x) || isNaN(y),
                        options: options
                    };
                    this.updateElement(point, i, properties, mode);
                }
            }
        }]);
        return RadarController;
    }(DatasetController);
    _defineProperty$w(RadarController, "id", 'radar');
    _defineProperty$w(RadarController, "defaults", {
        datasetElementType: 'line',
        dataElementType: 'point',
        indexAxis: 'r',
        showLine: true,
        elements: {
            line: {
                fill: 'start'
            }
        }
    });
    _defineProperty$w(RadarController, "overrides", {
        aspectRatio: 1,
        scales: {
            r: {
                type: 'radialLinear'
            }
        }
    });
    var ScatterController = /*#__PURE__*/function (_DatasetController7) {
        _inherits$w(ScatterController, _DatasetController7);
        var _super8 = _createSuper$w(ScatterController);
        function ScatterController() {
            _classCallCheck$x(this, ScatterController);
            return _super8.apply(this, arguments);
        }
        _createClass$x(ScatterController, [{
            key: "getLabelAndValue",
            value: function getLabelAndValue(index) {
                var meta = this._cachedMeta;
                var labels = this.chart.data.labels || [];
                var xScale = meta.xScale,
                    yScale = meta.yScale;
                var parsed = this.getParsed(index);
                var x = xScale.getLabelForValue(parsed.x);
                var y = yScale.getLabelForValue(parsed.y);
                return {
                    label: labels[index] || '',
                    value: '(' + x + ', ' + y + ')'
                };
            }
        }, {
            key: "update",
            value: function update(mode) {
                var meta = this._cachedMeta;
                var _meta$data2 = meta.data,
                    points = _meta$data2 === void 0 ? [] : _meta$data2;
                var animationsDisabled = this.chart._animationsDisabled;
                var _getStartAndCountOfVi2 = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),
                    start = _getStartAndCountOfVi2.start,
                    count = _getStartAndCountOfVi2.count;
                this._drawStart = start;
                this._drawCount = count;
                if (_scaleRangesChanged(meta)) {
                    start = 0;
                    count = points.length;
                }
                if (this.options.showLine) {
                    var line = meta.dataset,
                        _dataset = meta._dataset;
                    line._chart = this.chart;
                    line._datasetIndex = this.index;
                    line._decimated = !!_dataset._decimated;
                    line.points = points;
                    var options = this.resolveDatasetElementOptions(mode);
                    options.segment = this.options.segment;
                    this.updateElement(line, undefined, {
                        animated: !animationsDisabled,
                        options: options
                    }, mode);
                }
                this.updateElements(points, start, count, mode);
            }
        }, {
            key: "addElements",
            value: function addElements() {
                var showLine = this.options.showLine;
                if (!this.datasetElementType && showLine) {
                    this.datasetElementType = this.chart.registry.getElement('line');
                }
                _get(_getPrototypeOf$w(ScatterController.prototype), "addElements", this).call(this);
            }
        }, {
            key: "updateElements",
            value: function updateElements(points, start, count, mode) {
                var reset = mode === 'reset';
                var _this$_cachedMeta4 = this._cachedMeta,
                    iScale = _this$_cachedMeta4.iScale,
                    vScale = _this$_cachedMeta4.vScale,
                    _stacked = _this$_cachedMeta4._stacked,
                    _dataset = _this$_cachedMeta4._dataset;
                var firstOpts = this.resolveDataElementOptions(start, mode);
                var sharedOptions = this.getSharedOptions(firstOpts);
                var includeOptions = this.includeOptions(mode, sharedOptions);
                var iAxis = iScale.axis;
                var vAxis = vScale.axis;
                var _this$options3 = this.options,
                    spanGaps = _this$options3.spanGaps,
                    segment = _this$options3.segment;
                var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
                var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
                var prevParsed = start > 0 && this.getParsed(start - 1);
                for (var i = start; i < start + count; ++i) {
                    var point = points[i];
                    var parsed = this.getParsed(i);
                    var properties = directUpdate ? point : {};
                    var nullData = isNullOrUndef(parsed[vAxis]);
                    var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
                    var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
                    properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
                    properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
                    if (segment) {
                        properties.parsed = parsed;
                        properties.raw = _dataset.data[i];
                    }
                    if (includeOptions) {
                        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                    }
                    if (!directUpdate) {
                        this.updateElement(point, i, properties, mode);
                    }
                    prevParsed = parsed;
                }
                this.updateSharedOptions(sharedOptions, mode, firstOpts);
            }
        }, {
            key: "getMaxOverflow",
            value: function getMaxOverflow() {
                var meta = this._cachedMeta;
                var data = meta.data || [];
                if (!this.options.showLine) {
                    var max = 0;
                    for (var i = data.length - 1; i >= 0; --i) {
                        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
                    }
                    return max > 0 && max;
                }
                var dataset = meta.dataset;
                var border = dataset.options && dataset.options.borderWidth || 0;
                if (!data.length) {
                    return border;
                }
                var firstPoint = data[0].size(this.resolveDataElementOptions(0));
                var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
                return Math.max(border, firstPoint, lastPoint) / 2;
            }
        }]);
        return ScatterController;
    }(DatasetController);
    _defineProperty$w(ScatterController, "id", 'scatter');
    _defineProperty$w(ScatterController, "defaults", {
        datasetElementType: false,
        dataElementType: 'point',
        showLine: false,
        fill: false
    });
    _defineProperty$w(ScatterController, "overrides", {
        interaction: {
            mode: 'point'
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    });
    var controllers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BarController: BarController,
        BubbleController: BubbleController,
        DoughnutController: DoughnutController,
        LineController: LineController,
        PolarAreaController: PolarAreaController,
        PieController: PieController,
        RadarController: RadarController,
        ScatterController: ScatterController
    });

    /**
     * @namespace Chart._adapters
     * @since 2.8.0
     * @private
     */
    function _abstract() {
        throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
    }
    /**
     * Date adapter (current used by the time scale)
     * @namespace Chart._adapters._date
     * @memberof Chart._adapters
     * @private
     */
    var DateAdapterBase = /*#__PURE__*/function () {
        function DateAdapterBase(options) {
            _classCallCheck$x(this, DateAdapterBase);
            this.options = options || {};
        }
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        _createClass$x(DateAdapterBase, [{
            key: "init",
            value: function init() {}
        }, {
            key: "formats",
            value: function formats() {
                return _abstract();
            }
        }, {
            key: "parse",
            value: function parse() {
                return _abstract();
            }
        }, {
            key: "format",
            value: function format() {
                return _abstract();
            }
        }, {
            key: "add",
            value: function add() {
                return _abstract();
            }
        }, {
            key: "diff",
            value: function diff() {
                return _abstract();
            }
        }, {
            key: "startOf",
            value: function startOf() {
                return _abstract();
            }
        }, {
            key: "endOf",
            value: function endOf() {
                return _abstract();
            }
        }], [{
            key: "override",
            value:
                /**
                 * Override default date adapter methods.
                 * Accepts type parameter to define options type.
                 * @example
                 * Chart._adapters._date.override<{myAdapterOption: string}>({
                 *   init() {
                 *     console.log(this.options.myAdapterOption);
                 *   }
                 * })
                 */
                function override(members) {
                    Object.assign(DateAdapterBase.prototype, members);
                }
        }]);
        return DateAdapterBase;
    }();
    var adapters = {
        _date: DateAdapterBase
    };
    function binarySearch(metaset, axis, value, intersect) {
        var controller = metaset.controller,
            data = metaset.data,
            _sorted = metaset._sorted;
        var iScale = controller._cachedMeta.iScale;
        if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
            var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
            if (!intersect) {
                return lookupMethod(data, axis, value);
            } else if (controller._sharedOptions) {
                var el = data[0];
                var range = typeof el.getRange === 'function' && el.getRange(axis);
                if (range) {
                    var start = lookupMethod(data, axis, value - range);
                    var end = lookupMethod(data, axis, value + range);
                    return {
                        lo: start.lo,
                        hi: end.hi
                    };
                }
            }
        }
        return {
            lo: 0,
            hi: data.length - 1
        };
    }
    function evaluateInteractionItems(chart, axis, position, handler, intersect) {
        var metasets = chart.getSortedVisibleDatasetMetas();
        var value = position[axis];
        for (var i = 0, ilen = metasets.length; i < ilen; ++i) {
            var _metasets$i = metasets[i],
                _index2 = _metasets$i.index,
                data = _metasets$i.data;
            var _binarySearch = binarySearch(metasets[i], axis, value, intersect),
                lo = _binarySearch.lo,
                hi = _binarySearch.hi;
            for (var j = lo; j <= hi; ++j) {
                var element = data[j];
                if (!element.skip) {
                    handler(element, _index2, j);
                }
            }
        }
    }
    function getDistanceMetricForAxis(axis) {
        var useX = axis.indexOf('x') !== -1;
        var useY = axis.indexOf('y') !== -1;
        return function (pt1, pt2) {
            var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
            var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
            return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        };
    }
    function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
        var items = [];
        if (!includeInvisible && !chart.isPointInArea(position)) {
            return items;
        }
        var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {
            if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
                return;
            }
            if (element.inRange(position.x, position.y, useFinalPosition)) {
                items.push({
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index
                });
            }
        };
        evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
        return items;
    }
    function getNearestRadialItems(chart, position, axis, useFinalPosition) {
        var items = [];
        function evaluationFunc(element, datasetIndex, index) {
            var _element$getProps = element.getProps(['startAngle', 'endAngle'], useFinalPosition),
                startAngle = _element$getProps.startAngle,
                endAngle = _element$getProps.endAngle;
            var _getAngleFromPoint = getAngleFromPoint(element, {
                    x: position.x,
                    y: position.y
                }),
                angle = _getAngleFromPoint.angle;
            if (_angleBetween(angle, startAngle, endAngle)) {
                items.push({
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index
                });
            }
        }
        evaluateInteractionItems(chart, axis, position, evaluationFunc);
        return items;
    }
    function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
        var items = [];
        var distanceMetric = getDistanceMetricForAxis(axis);
        var minDistance = Number.POSITIVE_INFINITY;
        function evaluationFunc(element, datasetIndex, index) {
            var inRange = element.inRange(position.x, position.y, useFinalPosition);
            if (intersect && !inRange) {
                return;
            }
            var center = element.getCenterPoint(useFinalPosition);
            var pointInArea = !!includeInvisible || chart.isPointInArea(center);
            if (!pointInArea && !inRange) {
                return;
            }
            var distance = distanceMetric(position, center);
            if (distance < minDistance) {
                items = [{
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index
                }];
                minDistance = distance;
            } else if (distance === minDistance) {
                items.push({
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index
                });
            }
        }
        evaluateInteractionItems(chart, axis, position, evaluationFunc);
        return items;
    }
    function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
        if (!includeInvisible && !chart.isPointInArea(position)) {
            return [];
        }
        return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
    }
    function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
        var items = [];
        var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
        var intersectsItem = false;
        evaluateInteractionItems(chart, axis, position, function (element, datasetIndex, index) {
            if (element[rangeMethod](position[axis], useFinalPosition)) {
                items.push({
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index
                });
                intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
            }
        });
        if (intersect && !intersectsItem) {
            return [];
        }
        return items;
    }
    var Interaction = {
        evaluateInteractionItems: evaluateInteractionItems,
        modes: {
            index: function index(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                var axis = options.axis || 'x';
                var includeInvisible = options.includeInvisible || false;
                var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
                var elements = [];
                if (!items.length) {
                    return [];
                }
                chart.getSortedVisibleDatasetMetas().forEach(function (meta) {
                    var index = items[0].index;
                    var element = meta.data[index];
                    if (element && !element.skip) {
                        elements.push({
                            element: element,
                            datasetIndex: meta.index,
                            index: index
                        });
                    }
                });
                return elements;
            },
            dataset: function dataset(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                var axis = options.axis || 'xy';
                var includeInvisible = options.includeInvisible || false;
                var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
                if (items.length > 0) {
                    var datasetIndex = items[0].datasetIndex;
                    var data = chart.getDatasetMeta(datasetIndex).data;
                    items = [];
                    for (var i = 0; i < data.length; ++i) {
                        items.push({
                            element: data[i],
                            datasetIndex: datasetIndex,
                            index: i
                        });
                    }
                }
                return items;
            },
            point: function point(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                var axis = options.axis || 'xy';
                var includeInvisible = options.includeInvisible || false;
                return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
            },
            nearest: function nearest(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                var axis = options.axis || 'xy';
                var includeInvisible = options.includeInvisible || false;
                return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
            },
            x: function x(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
            },
            y: function y(chart, e, options, useFinalPosition) {
                var position = getRelativePosition(e, chart);
                return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
            }
        }
    };
    var STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
    function filterByPosition(array, position) {
        return array.filter(function (v) {
            return v.pos === position;
        });
    }
    function filterDynamicPositionByAxis(array, axis) {
        return array.filter(function (v) {
            return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;
        });
    }
    function sortByWeight(array, reverse) {
        return array.sort(function (a, b) {
            var v0 = reverse ? b : a;
            var v1 = reverse ? a : b;
            return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
        });
    }
    function wrapBoxes(boxes) {
        var layoutBoxes = [];
        var i, ilen, box, pos, stack, stackWeight;
        for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
            box = boxes[i];
            var _box = box;
            pos = _box.position;
            var _box$options = _box.options;
            stack = _box$options.stack;
            var _box$options$stackWei = _box$options.stackWeight;
            stackWeight = _box$options$stackWei === void 0 ? 1 : _box$options$stackWei;
            layoutBoxes.push({
                index: i,
                box: box,
                pos: pos,
                horizontal: box.isHorizontal(),
                weight: box.weight,
                stack: stack && pos + stack,
                stackWeight: stackWeight
            });
        }
        return layoutBoxes;
    }
    function buildStacks(layouts) {
        var stacks = {};
        var _iterator5 = _createForOfIteratorHelper$1(layouts),
            _step5;
        try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var wrap = _step5.value;
                var stack = wrap.stack,
                    pos = wrap.pos,
                    stackWeight = wrap.stackWeight;
                if (!stack || !STATIC_POSITIONS.includes(pos)) {
                    continue;
                }
                var _stack = stacks[stack] || (stacks[stack] = {
                    count: 0,
                    placed: 0,
                    weight: 0,
                    size: 0
                });
                _stack.count++;
                _stack.weight += stackWeight;
            }
        } catch (err) {
            _iterator5.e(err);
        } finally {
            _iterator5.f();
        }
        return stacks;
    }
    function setLayoutDims(layouts, params) {
        var stacks = buildStacks(layouts);
        var vBoxMaxWidth = params.vBoxMaxWidth,
            hBoxMaxHeight = params.hBoxMaxHeight;
        var i, ilen, layout;
        for (i = 0, ilen = layouts.length; i < ilen; ++i) {
            layout = layouts[i];
            var fullSize = layout.box.fullSize;
            var stack = stacks[layout.stack];
            var factor = stack && layout.stackWeight / stack.weight;
            if (layout.horizontal) {
                layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
                layout.height = hBoxMaxHeight;
            } else {
                layout.width = vBoxMaxWidth;
                layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
            }
        }
        return stacks;
    }
    function buildLayoutBoxes(boxes) {
        var layoutBoxes = wrapBoxes(boxes);
        var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {
            return wrap.box.fullSize;
        }), true);
        var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
        var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
        var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
        var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
        var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
        var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
        return {
            fullSize: fullSize,
            leftAndTop: left.concat(top),
            rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
            chartArea: filterByPosition(layoutBoxes, 'chartArea'),
            vertical: left.concat(right).concat(centerVertical),
            horizontal: top.concat(bottom).concat(centerHorizontal)
        };
    }
    function getCombinedMax(maxPadding, chartArea, a, b) {
        return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }
    function updateMaxPadding(maxPadding, boxPadding) {
        maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
        maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
        maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
        maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    }
    function updateDims(chartArea, params, layout, stacks) {
        var pos = layout.pos,
            box = layout.box;
        var maxPadding = chartArea.maxPadding;
        if (!isObject(pos)) {
            if (layout.size) {
                chartArea[pos] -= layout.size;
            }
            var stack = stacks[layout.stack] || {
                size: 0,
                count: 1
            };
            stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
            layout.size = stack.size / stack.count;
            chartArea[pos] += layout.size;
        }
        if (box.getPadding) {
            updateMaxPadding(maxPadding, box.getPadding());
        }
        var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
        var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
        var widthChanged = newWidth !== chartArea.w;
        var heightChanged = newHeight !== chartArea.h;
        chartArea.w = newWidth;
        chartArea.h = newHeight;
        return layout.horizontal ? {
            same: widthChanged,
            other: heightChanged
        } : {
            same: heightChanged,
            other: widthChanged
        };
    }
    function handleMaxPadding(chartArea) {
        var maxPadding = chartArea.maxPadding;
        function updatePos(pos) {
            var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
            chartArea[pos] += change;
            return change;
        }
        chartArea.y += updatePos('top');
        chartArea.x += updatePos('left');
        updatePos('right');
        updatePos('bottom');
    }
    function getMargins(horizontal, chartArea) {
        var maxPadding = chartArea.maxPadding;
        function marginForPositions(positions) {
            var margin = {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            };
            positions.forEach(function (pos) {
                margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
            });
            return margin;
        }
        return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);
    }
    function fitBoxes(boxes, chartArea, params, stacks) {
        var refitBoxes = [];
        var i, ilen, layout, box, refit, changed;
        for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
            layout = boxes[i];
            box = layout.box;
            box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
            var _updateDims = updateDims(chartArea, params, layout, stacks),
                same = _updateDims.same,
                other = _updateDims.other;
            refit |= same && refitBoxes.length;
            changed = changed || other;
            if (!box.fullSize) {
                refitBoxes.push(layout);
            }
        }
        return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
    }
    function setBoxDims(box, left, top, width, height) {
        box.top = top;
        box.left = left;
        box.right = left + width;
        box.bottom = top + height;
        box.width = width;
        box.height = height;
    }
    function placeBoxes(boxes, chartArea, params, stacks) {
        var userPadding = params.padding;
        var x = chartArea.x,
            y = chartArea.y;
        var _iterator6 = _createForOfIteratorHelper$1(boxes),
            _step6;
        try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var layout = _step6.value;
                var box = layout.box;
                var stack = stacks[layout.stack] || {
                    count: 1,
                    placed: 0,
                    weight: 1
                };
                var weight = layout.stackWeight / stack.weight || 1;
                if (layout.horizontal) {
                    var width = chartArea.w * weight;
                    var height = stack.size || box.height;
                    if (defined(stack.start)) {
                        y = stack.start;
                    }
                    if (box.fullSize) {
                        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
                    } else {
                        setBoxDims(box, chartArea.left + stack.placed, y, width, height);
                    }
                    stack.start = y;
                    stack.placed += width;
                    y = box.bottom;
                } else {
                    var height1 = chartArea.h * weight;
                    var width1 = stack.size || box.width;
                    if (defined(stack.start)) {
                        x = stack.start;
                    }
                    if (box.fullSize) {
                        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);
                    } else {
                        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);
                    }
                    stack.start = x;
                    stack.placed += height1;
                    x = box.right;
                }
            }
        } catch (err) {
            _iterator6.e(err);
        } finally {
            _iterator6.f();
        }
        chartArea.x = x;
        chartArea.y = y;
    }
    var layouts = {
        addBox: function addBox(chart, item) {
            if (!chart.boxes) {
                chart.boxes = [];
            }
            item.fullSize = item.fullSize || false;
            item.position = item.position || 'top';
            item.weight = item.weight || 0;
            item._layers = item._layers || function () {
                return [{
                    z: 0,
                    draw: function draw(chartArea) {
                        item.draw(chartArea);
                    }
                }];
            };
            chart.boxes.push(item);
        },
        removeBox: function removeBox(chart, layoutItem) {
            var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
            if (index !== -1) {
                chart.boxes.splice(index, 1);
            }
        },
        configure: function configure(chart, item, options) {
            item.fullSize = options.fullSize;
            item.position = options.position;
            item.weight = options.weight;
        },
        update: function update(chart, width, height, minPadding) {
            if (!chart) {
                return;
            }
            var padding = toPadding(chart.options.layout.padding);
            var availableWidth = Math.max(width - padding.width, 0);
            var availableHeight = Math.max(height - padding.height, 0);
            var boxes = buildLayoutBoxes(chart.boxes);
            var verticalBoxes = boxes.vertical;
            var horizontalBoxes = boxes.horizontal;
            each(chart.boxes, function (box) {
                if (typeof box.beforeLayout === 'function') {
                    box.beforeLayout();
                }
            });
            var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {
                return wrap.box.options && wrap.box.options.display === false ? total : total + 1;
            }, 0) || 1;
            var params = Object.freeze({
                outerWidth: width,
                outerHeight: height,
                padding: padding,
                availableWidth: availableWidth,
                availableHeight: availableHeight,
                vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
                hBoxMaxHeight: availableHeight / 2
            });
            var maxPadding = Object.assign({}, padding);
            updateMaxPadding(maxPadding, toPadding(minPadding));
            var chartArea = Object.assign({
                maxPadding: maxPadding,
                w: availableWidth,
                h: availableHeight,
                x: padding.left,
                y: padding.top
            }, padding);
            var stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
            fitBoxes(boxes.fullSize, chartArea, params, stacks);
            fitBoxes(verticalBoxes, chartArea, params, stacks);
            if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
                fitBoxes(verticalBoxes, chartArea, params, stacks);
            }
            handleMaxPadding(chartArea);
            placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
            chartArea.x += chartArea.w;
            chartArea.y += chartArea.h;
            placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
            chart.chartArea = {
                left: chartArea.left,
                top: chartArea.top,
                right: chartArea.left + chartArea.w,
                bottom: chartArea.top + chartArea.h,
                height: chartArea.h,
                width: chartArea.w
            };
            each(boxes.chartArea, function (layout) {
                var box = layout.box;
                Object.assign(box, chart.chartArea);
                box.update(chartArea.w, chartArea.h, {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0
                });
            });
        }
    };
    var BasePlatform = /*#__PURE__*/function () {
        function BasePlatform() {
            _classCallCheck$x(this, BasePlatform);
        }
        _createClass$x(BasePlatform, [{
            key: "acquireContext",
            value: function acquireContext(canvas, aspectRatio) {}
        }, {
            key: "releaseContext",
            value: function releaseContext(context) {
                return false;
            }
        }, {
            key: "addEventListener",
            value: function addEventListener(chart, type, listener) {}
        }, {
            key: "removeEventListener",
            value: function removeEventListener(chart, type, listener) {}
        }, {
            key: "getDevicePixelRatio",
            value: function getDevicePixelRatio() {
                return 1;
            }
        }, {
            key: "getMaximumSize",
            value: function getMaximumSize(element, width, height, aspectRatio) {
                width = Math.max(0, width || element.width);
                height = height || element.height;
                return {
                    width: width,
                    height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
                };
            }
        }, {
            key: "isAttached",
            value: function isAttached(canvas) {
                return true;
            }
        }, {
            key: "updateConfig",
            value: function updateConfig(config) {}
        }]);
        return BasePlatform;
    }();
    var BasicPlatform = /*#__PURE__*/function (_BasePlatform) {
        _inherits$w(BasicPlatform, _BasePlatform);
        var _super9 = _createSuper$w(BasicPlatform);
        function BasicPlatform() {
            _classCallCheck$x(this, BasicPlatform);
            return _super9.apply(this, arguments);
        }
        _createClass$x(BasicPlatform, [{
            key: "acquireContext",
            value: function acquireContext(item) {
                return item && item.getContext && item.getContext('2d') || null;
            }
        }, {
            key: "updateConfig",
            value: function updateConfig(config) {
                config.options.animation = false;
            }
        }]);
        return BasicPlatform;
    }(BasePlatform);
    var EXPANDO_KEY = '$chartjs';
    var EVENT_TYPES = {
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup',
        pointerenter: 'mouseenter',
        pointerdown: 'mousedown',
        pointermove: 'mousemove',
        pointerup: 'mouseup',
        pointerleave: 'mouseout',
        pointerout: 'mouseout'
    };
    var isNullOrEmpty = function isNullOrEmpty(value) {
        return value === null || value === '';
    };
    function initCanvas(canvas, aspectRatio) {
        var style = canvas.style;
        var renderHeight = canvas.getAttribute('height');
        var renderWidth = canvas.getAttribute('width');
        canvas[EXPANDO_KEY] = {
            initial: {
                height: renderHeight,
                width: renderWidth,
                style: {
                    display: style.display,
                    height: style.height,
                    width: style.width
                }
            }
        };
        style.display = style.display || 'block';
        style.boxSizing = style.boxSizing || 'border-box';
        if (isNullOrEmpty(renderWidth)) {
            var displayWidth = readUsedSize(canvas, 'width');
            if (displayWidth !== undefined) {
                canvas.width = displayWidth;
            }
        }
        if (isNullOrEmpty(renderHeight)) {
            if (canvas.style.height === '') {
                canvas.height = canvas.width / (aspectRatio || 2);
            } else {
                var displayHeight = readUsedSize(canvas, 'height');
                if (displayHeight !== undefined) {
                    canvas.height = displayHeight;
                }
            }
        }
        return canvas;
    }
    var eventListenerOptions = supportsEventListenerOptions ? {
        passive: true
    } : false;
    function addListener(node, type, listener) {
        node.addEventListener(type, listener, eventListenerOptions);
    }
    function removeListener(chart, type, listener) {
        chart.canvas.removeEventListener(type, listener, eventListenerOptions);
    }
    function fromNativeEvent(event, chart) {
        var type = EVENT_TYPES[event.type] || event.type;
        var _getRelativePosition = getRelativePosition(event, chart),
            x = _getRelativePosition.x,
            y = _getRelativePosition.y;
        return {
            type: type,
            chart: chart,
            "native": event,
            x: x !== undefined ? x : null,
            y: y !== undefined ? y : null
        };
    }
    function nodeListContains(nodeList, canvas) {
        var _iterator7 = _createForOfIteratorHelper$1(nodeList),
            _step7;
        try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var node = _step7.value;
                if (node === canvas || node.contains(canvas)) {
                    return true;
                }
            }
        } catch (err) {
            _iterator7.e(err);
        } finally {
            _iterator7.f();
        }
    }
    function createAttachObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var observer = new MutationObserver(function (entries) {
            var trigger = false;
            var _iterator8 = _createForOfIteratorHelper$1(entries),
                _step8;
            try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var entry = _step8.value;
                    trigger = trigger || nodeListContains(entry.addedNodes, canvas);
                    trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
                }
            } catch (err) {
                _iterator8.e(err);
            } finally {
                _iterator8.f();
            }
            if (trigger) {
                listener();
            }
        });
        observer.observe(document, {
            childList: true,
            subtree: true
        });
        return observer;
    }
    function createDetachObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var observer = new MutationObserver(function (entries) {
            var trigger = false;
            var _iterator9 = _createForOfIteratorHelper$1(entries),
                _step9;
            try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                    var entry = _step9.value;
                    trigger = trigger || nodeListContains(entry.removedNodes, canvas);
                    trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
                }
            } catch (err) {
                _iterator9.e(err);
            } finally {
                _iterator9.f();
            }
            if (trigger) {
                listener();
            }
        });
        observer.observe(document, {
            childList: true,
            subtree: true
        });
        return observer;
    }
    var drpListeningCharts = new Map();
    var oldDevicePixelRatio = 0;
    function onWindowResize() {
        var dpr = window.devicePixelRatio;
        if (dpr === oldDevicePixelRatio) {
            return;
        }
        oldDevicePixelRatio = dpr;
        drpListeningCharts.forEach(function (resize, chart) {
            if (chart.currentDevicePixelRatio !== dpr) {
                resize();
            }
        });
    }
    function listenDevicePixelRatioChanges(chart, resize) {
        if (!drpListeningCharts.size) {
            window.addEventListener('resize', onWindowResize);
        }
        drpListeningCharts.set(chart, resize);
    }
    function unlistenDevicePixelRatioChanges(chart) {
        drpListeningCharts["delete"](chart);
        if (!drpListeningCharts.size) {
            window.removeEventListener('resize', onWindowResize);
        }
    }
    function createResizeObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var container = canvas && _getParentNode(canvas);
        if (!container) {
            return;
        }
        var resize = throttled(function (width, height) {
            var w = container.clientWidth;
            listener(width, height);
            if (w < container.clientWidth) {
                listener();
            }
        }, window);
        var observer = new ResizeObserver(function (entries) {
            var entry = entries[0];
            var width = entry.contentRect.width;
            var height = entry.contentRect.height;
            if (width === 0 && height === 0) {
                return;
            }
            resize(width, height);
        });
        observer.observe(container);
        listenDevicePixelRatioChanges(chart, resize);
        return observer;
    }
    function releaseObserver(chart, type, observer) {
        if (observer) {
            observer.disconnect();
        }
        if (type === 'resize') {
            unlistenDevicePixelRatioChanges(chart);
        }
    }
    function createProxyAndListen(chart, type, listener) {
        var canvas = chart.canvas;
        var proxy = throttled(function (event) {
            if (chart.ctx !== null) {
                listener(fromNativeEvent(event, chart));
            }
        }, chart);
        addListener(canvas, type, proxy);
        return proxy;
    }
    var DomPlatform = /*#__PURE__*/function (_BasePlatform2) {
        _inherits$w(DomPlatform, _BasePlatform2);
        var _super10 = _createSuper$w(DomPlatform);
        function DomPlatform() {
            _classCallCheck$x(this, DomPlatform);
            return _super10.apply(this, arguments);
        }
        _createClass$x(DomPlatform, [{
            key: "acquireContext",
            value: function acquireContext(canvas, aspectRatio) {
                var context = canvas && canvas.getContext && canvas.getContext('2d');
                if (context && context.canvas === canvas) {
                    initCanvas(canvas, aspectRatio);
                    return context;
                }
                return null;
            }
        }, {
            key: "releaseContext",
            value: function releaseContext(context) {
                var canvas = context.canvas;
                if (!canvas[EXPANDO_KEY]) {
                    return false;
                }
                var initial = canvas[EXPANDO_KEY].initial;
                ['height', 'width'].forEach(function (prop) {
                    var value = initial[prop];
                    if (isNullOrUndef(value)) {
                        canvas.removeAttribute(prop);
                    } else {
                        canvas.setAttribute(prop, value);
                    }
                });
                var style = initial.style || {};
                Object.keys(style).forEach(function (key) {
                    canvas.style[key] = style[key];
                });
                canvas.width = canvas.width;
                delete canvas[EXPANDO_KEY];
                return true;
            }
        }, {
            key: "addEventListener",
            value: function addEventListener(chart, type, listener) {
                this.removeEventListener(chart, type);
                var proxies = chart.$proxies || (chart.$proxies = {});
                var handlers = {
                    attach: createAttachObserver,
                    detach: createDetachObserver,
                    resize: createResizeObserver
                };
                var handler = handlers[type] || createProxyAndListen;
                proxies[type] = handler(chart, type, listener);
            }
        }, {
            key: "removeEventListener",
            value: function removeEventListener(chart, type) {
                var proxies = chart.$proxies || (chart.$proxies = {});
                var proxy = proxies[type];
                if (!proxy) {
                    return;
                }
                var handlers = {
                    attach: releaseObserver,
                    detach: releaseObserver,
                    resize: releaseObserver
                };
                var handler = handlers[type] || removeListener;
                handler(chart, type, proxy);
                proxies[type] = undefined;
            }
        }, {
            key: "getDevicePixelRatio",
            value: function getDevicePixelRatio() {
                return window.devicePixelRatio;
            }
        }, {
            key: "getMaximumSize",
            value: function getMaximumSize$1(canvas, width, height, aspectRatio) {
                return getMaximumSize(canvas, width, height, aspectRatio);
            }
        }, {
            key: "isAttached",
            value: function isAttached(canvas) {
                var container = _getParentNode(canvas);
                return !!(container && container.isConnected);
            }
        }]);
        return DomPlatform;
    }(BasePlatform);
    function _detectPlatform(canvas) {
        if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
            return BasicPlatform;
        }
        return DomPlatform;
    }
    var Element = /*#__PURE__*/function () {
        function Element() {
            _classCallCheck$x(this, Element);
            _defineProperty$w(this, "active", false);
        }
        _createClass$x(Element, [{
            key: "tooltipPosition",
            value: function tooltipPosition(useFinalPosition) {
                var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),
                    x = _this$getProps.x,
                    y = _this$getProps.y;
                return {
                    x: x,
                    y: y
                };
            }
        }, {
            key: "hasValue",
            value: function hasValue() {
                return isNumber(this.x) && isNumber(this.y);
            }
        }, {
            key: "getProps",
            value: function getProps(props, _final) {
                var _this8 = this;
                var anims = this.$animations;
                if (!_final || !anims) {
                    // let's not create an object, if not needed
                    return this;
                }
                var ret = {};
                props.forEach(function (prop) {
                    ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this8[prop];
                });
                return ret;
            }
        }]);
        return Element;
    }();
    _defineProperty$w(Element, "defaults", {});
    _defineProperty$w(Element, "defaultRoutes", undefined);
    function autoSkip(scale, ticks) {
        var tickOpts = scale.options.ticks;
        var determinedMaxTicks = determineMaxTicks(scale);
        var ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
        var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
        var numMajorIndices = majorIndices.length;
        var first = majorIndices[0];
        var last = majorIndices[numMajorIndices - 1];
        var newTicks = [];
        if (numMajorIndices > ticksLimit) {
            skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
            return newTicks;
        }
        var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
        if (numMajorIndices > 0) {
            var i, ilen;
            var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
            skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
            for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
                skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
            }
            skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
            return newTicks;
        }
        skip(ticks, newTicks, spacing);
        return newTicks;
    }
    function determineMaxTicks(scale) {
        var offset = scale.options.offset;
        var tickLength = scale._tickSize();
        var maxScale = scale._length / tickLength + (offset ? 0 : 1);
        var maxChart = scale._maxLength / tickLength;
        return Math.floor(Math.min(maxScale, maxChart));
    }
    function calculateSpacing(majorIndices, ticks, ticksLimit) {
        var evenMajorSpacing = getEvenSpacing(majorIndices);
        var spacing = ticks.length / ticksLimit;
        if (!evenMajorSpacing) {
            return Math.max(spacing, 1);
        }
        var factors = _factorize(evenMajorSpacing);
        for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {
            var factor = factors[i];
            if (factor > spacing) {
                return factor;
            }
        }
        return Math.max(spacing, 1);
    }
    function getMajorIndices(ticks) {
        var result = [];
        var i, ilen;
        for (i = 0, ilen = ticks.length; i < ilen; i++) {
            if (ticks[i].major) {
                result.push(i);
            }
        }
        return result;
    }
    function skipMajors(ticks, newTicks, majorIndices, spacing) {
        var count = 0;
        var next = majorIndices[0];
        var i;
        spacing = Math.ceil(spacing);
        for (i = 0; i < ticks.length; i++) {
            if (i === next) {
                newTicks.push(ticks[i]);
                count++;
                next = majorIndices[count * spacing];
            }
        }
    }
    function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
        var start = valueOrDefault(majorStart, 0);
        var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
        var count = 0;
        var length, i, next;
        spacing = Math.ceil(spacing);
        if (majorEnd) {
            length = majorEnd - majorStart;
            spacing = length / Math.floor(length / spacing);
        }
        next = start;
        while (next < 0) {
            count++;
            next = Math.round(start + count * spacing);
        }
        for (i = Math.max(start, 0); i < end; i++) {
            if (i === next) {
                newTicks.push(ticks[i]);
                count++;
                next = Math.round(start + count * spacing);
            }
        }
    }
    function getEvenSpacing(arr) {
        var len = arr.length;
        var i, diff;
        if (len < 2) {
            return false;
        }
        for (diff = arr[0], i = 1; i < len; ++i) {
            if (arr[i] - arr[i - 1] !== diff) {
                return false;
            }
        }
        return diff;
    }
    var reverseAlign = function reverseAlign(align) {
        return align === 'left' ? 'right' : align === 'right' ? 'left' : align;
    };
    var offsetFromEdge = function offsetFromEdge(scale, edge, offset) {
        return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
    };
    function sample(arr, numItems) {
        var result = [];
        var increment = arr.length / numItems;
        var len = arr.length;
        var i = 0;
        for (; i < len; i += increment) {
            result.push(arr[Math.floor(i)]);
        }
        return result;
    }
    function getPixelForGridLine(scale, index, offsetGridLines) {
        var length = scale.ticks.length;
        var validIndex = Math.min(index, length - 1);
        var start = scale._startPixel;
        var end = scale._endPixel;
        var epsilon = 1e-6;
        var lineValue = scale.getPixelForTick(validIndex);
        var offset;
        if (offsetGridLines) {
            if (length === 1) {
                offset = Math.max(lineValue - start, end - lineValue);
            } else if (index === 0) {
                offset = (scale.getPixelForTick(1) - lineValue) / 2;
            } else {
                offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
            }
            lineValue += validIndex < index ? offset : -offset;
            if (lineValue < start - epsilon || lineValue > end + epsilon) {
                return;
            }
        }
        return lineValue;
    }
    function garbageCollect(caches, length) {
        each(caches, function (cache) {
            var gc = cache.gc;
            var gcLen = gc.length / 2;
            var i;
            if (gcLen > length) {
                for (i = 0; i < gcLen; ++i) {
                    delete cache.data[gc[i]];
                }
                gc.splice(0, gcLen);
            }
        });
    }
    function getTickMarkLength(options) {
        return options.drawTicks ? options.tickLength : 0;
    }
    function getTitleHeight(options, fallback) {
        if (!options.display) {
            return 0;
        }
        var font = toFont(options.font, fallback);
        var padding = toPadding(options.padding);
        var lines = isArray(options.text) ? options.text.length : 1;
        return lines * font.lineHeight + padding.height;
    }
    function createScaleContext(parent, scale) {
        return createContext(parent, {
            scale: scale,
            type: 'scale'
        });
    }
    function createTickContext(parent, index, tick) {
        return createContext(parent, {
            tick: tick,
            index: index,
            type: 'tick'
        });
    }
    function titleAlign(align, position, reverse) {
        var ret = _toLeftRightCenter(align);
        if (reverse && position !== 'right' || !reverse && position === 'right') {
            ret = reverseAlign(ret);
        }
        return ret;
    }
    function titleArgs(scale, offset, position, align) {
        var top = scale.top,
            left = scale.left,
            bottom = scale.bottom,
            right = scale.right,
            chart = scale.chart;
        var chartArea = chart.chartArea,
            scales = chart.scales;
        var rotation = 0;
        var maxWidth, titleX, titleY;
        var height = bottom - top;
        var width = right - left;
        if (scale.isHorizontal()) {
            titleX = _alignStartEnd(align, left, right);
            if (isObject(position)) {
                var positionAxisID = Object.keys(position)[0];
                var value = position[positionAxisID];
                titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
            } else if (position === 'center') {
                titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
            } else {
                titleY = offsetFromEdge(scale, position, offset);
            }
            maxWidth = right - left;
        } else {
            if (isObject(position)) {
                var positionAxisID1 = Object.keys(position)[0];
                var value1 = position[positionAxisID1];
                titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;
            } else if (position === 'center') {
                titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
            } else {
                titleX = offsetFromEdge(scale, position, offset);
            }
            titleY = _alignStartEnd(align, bottom, top);
            rotation = position === 'left' ? -HALF_PI : HALF_PI;
        }
        return {
            titleX: titleX,
            titleY: titleY,
            maxWidth: maxWidth,
            rotation: rotation
        };
    }
    var Scale = /*#__PURE__*/function (_Element) {
        _inherits$w(Scale, _Element);
        var _super11 = _createSuper$w(Scale);
        function Scale(cfg) {
            var _this9;
            _classCallCheck$x(this, Scale);
            _this9 = _super11.call(this);
            _this9.id = cfg.id;
            _this9.type = cfg.type;
            _this9.options = undefined;
            _this9.ctx = cfg.ctx;
            _this9.chart = cfg.chart;
            _this9.top = undefined;
            _this9.bottom = undefined;
            _this9.left = undefined;
            _this9.right = undefined;
            _this9.width = undefined;
            _this9.height = undefined;
            _this9._margins = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            };
            _this9.maxWidth = undefined;
            _this9.maxHeight = undefined;
            _this9.paddingTop = undefined;
            _this9.paddingBottom = undefined;
            _this9.paddingLeft = undefined;
            _this9.paddingRight = undefined;
            _this9.axis = undefined;
            _this9.labelRotation = undefined;
            _this9.min = undefined;
            _this9.max = undefined;
            _this9._range = undefined;
            _this9.ticks = [];
            _this9._gridLineItems = null;
            _this9._labelItems = null;
            _this9._labelSizes = null;
            _this9._length = 0;
            _this9._maxLength = 0;
            _this9._longestTextCache = {};
            _this9._startPixel = undefined;
            _this9._endPixel = undefined;
            _this9._reversePixels = false;
            _this9._userMax = undefined;
            _this9._userMin = undefined;
            _this9._suggestedMax = undefined;
            _this9._suggestedMin = undefined;
            _this9._ticksLength = 0;
            _this9._borderValue = 0;
            _this9._cache = {};
            _this9._dataLimitsCached = false;
            _this9.$context = undefined;
            return _this9;
        }
        _createClass$x(Scale, [{
            key: "init",
            value: function init(options) {
                this.options = options.setContext(this.getContext());
                this.axis = options.axis;
                this._userMin = this.parse(options.min);
                this._userMax = this.parse(options.max);
                this._suggestedMin = this.parse(options.suggestedMin);
                this._suggestedMax = this.parse(options.suggestedMax);
            }
        }, {
            key: "parse",
            value: function parse(raw, index) {
                return raw;
            }
        }, {
            key: "getUserBounds",
            value: function getUserBounds() {
                var _userMin = this._userMin,
                    _userMax = this._userMax,
                    _suggestedMin = this._suggestedMin,
                    _suggestedMax = this._suggestedMax;
                _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
                _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
                _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
                _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
                return {
                    min: finiteOrDefault(_userMin, _suggestedMin),
                    max: finiteOrDefault(_userMax, _suggestedMax),
                    minDefined: isNumberFinite(_userMin),
                    maxDefined: isNumberFinite(_userMax)
                };
            }
        }, {
            key: "getMinMax",
            value: function getMinMax(canStack) {
                var _this$getUserBounds = this.getUserBounds(),
                    min = _this$getUserBounds.min,
                    max = _this$getUserBounds.max,
                    minDefined = _this$getUserBounds.minDefined,
                    maxDefined = _this$getUserBounds.maxDefined;
                var range;
                if (minDefined && maxDefined) {
                    return {
                        min: min,
                        max: max
                    };
                }
                var metas = this.getMatchingVisibleMetas();
                for (var i = 0, ilen = metas.length; i < ilen; ++i) {
                    range = metas[i].controller.getMinMax(this, canStack);
                    if (!minDefined) {
                        min = Math.min(min, range.min);
                    }
                    if (!maxDefined) {
                        max = Math.max(max, range.max);
                    }
                }
                min = maxDefined && min > max ? max : min;
                max = minDefined && min > max ? min : max;
                return {
                    min: finiteOrDefault(min, finiteOrDefault(max, min)),
                    max: finiteOrDefault(max, finiteOrDefault(min, max))
                };
            }
        }, {
            key: "getPadding",
            value: function getPadding() {
                return {
                    left: this.paddingLeft || 0,
                    top: this.paddingTop || 0,
                    right: this.paddingRight || 0,
                    bottom: this.paddingBottom || 0
                };
            }
        }, {
            key: "getTicks",
            value: function getTicks() {
                return this.ticks;
            }
        }, {
            key: "getLabels",
            value: function getLabels() {
                var data = this.chart.data;
                return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
            }
        }, {
            key: "getLabelItems",
            value: function getLabelItems() {
                var chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;
                var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
                return items;
            }
        }, {
            key: "beforeLayout",
            value: function beforeLayout() {
                this._cache = {};
                this._dataLimitsCached = false;
            }
        }, {
            key: "beforeUpdate",
            value: function beforeUpdate() {
                callback(this.options.beforeUpdate, [this]);
            }
        }, {
            key: "update",
            value: function update(maxWidth, maxHeight, margins) {
                var _this$options4 = this.options,
                    beginAtZero = _this$options4.beginAtZero,
                    grace = _this$options4.grace,
                    tickOpts = _this$options4.ticks;
                var sampleSize = tickOpts.sampleSize;
                this.beforeUpdate();
                this.maxWidth = maxWidth;
                this.maxHeight = maxHeight;
                this._margins = margins = Object.assign({
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }, margins);
                this.ticks = null;
                this._labelSizes = null;
                this._gridLineItems = null;
                this._labelItems = null;
                this.beforeSetDimensions();
                this.setDimensions();
                this.afterSetDimensions();
                this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
                if (!this._dataLimitsCached) {
                    this.beforeDataLimits();
                    this.determineDataLimits();
                    this.afterDataLimits();
                    this._range = _addGrace(this, grace, beginAtZero);
                    this._dataLimitsCached = true;
                }
                this.beforeBuildTicks();
                this.ticks = this.buildTicks() || [];
                this.afterBuildTicks();
                var samplingEnabled = sampleSize < this.ticks.length;
                this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
                this.configure();
                this.beforeCalculateLabelRotation();
                this.calculateLabelRotation();
                this.afterCalculateLabelRotation();
                if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
                    this.ticks = autoSkip(this, this.ticks);
                    this._labelSizes = null;
                    this.afterAutoSkip();
                }
                if (samplingEnabled) {
                    this._convertTicksToLabels(this.ticks);
                }
                this.beforeFit();
                this.fit();
                this.afterFit();
                this.afterUpdate();
            }
        }, {
            key: "configure",
            value: function configure() {
                var reversePixels = this.options.reverse;
                var startPixel, endPixel;
                if (this.isHorizontal()) {
                    startPixel = this.left;
                    endPixel = this.right;
                } else {
                    startPixel = this.top;
                    endPixel = this.bottom;
                    reversePixels = !reversePixels;
                }
                this._startPixel = startPixel;
                this._endPixel = endPixel;
                this._reversePixels = reversePixels;
                this._length = endPixel - startPixel;
                this._alignToPixels = this.options.alignToPixels;
            }
        }, {
            key: "afterUpdate",
            value: function afterUpdate() {
                callback(this.options.afterUpdate, [this]);
            }
        }, {
            key: "beforeSetDimensions",
            value: function beforeSetDimensions() {
                callback(this.options.beforeSetDimensions, [this]);
            }
        }, {
            key: "setDimensions",
            value: function setDimensions() {
                if (this.isHorizontal()) {
                    this.width = this.maxWidth;
                    this.left = 0;
                    this.right = this.width;
                } else {
                    this.height = this.maxHeight;
                    this.top = 0;
                    this.bottom = this.height;
                }
                this.paddingLeft = 0;
                this.paddingTop = 0;
                this.paddingRight = 0;
                this.paddingBottom = 0;
            }
        }, {
            key: "afterSetDimensions",
            value: function afterSetDimensions() {
                callback(this.options.afterSetDimensions, [this]);
            }
        }, {
            key: "_callHooks",
            value: function _callHooks(name) {
                this.chart.notifyPlugins(name, this.getContext());
                callback(this.options[name], [this]);
            }
        }, {
            key: "beforeDataLimits",
            value: function beforeDataLimits() {
                this._callHooks('beforeDataLimits');
            }
        }, {
            key: "determineDataLimits",
            value: function determineDataLimits() {}
        }, {
            key: "afterDataLimits",
            value: function afterDataLimits() {
                this._callHooks('afterDataLimits');
            }
        }, {
            key: "beforeBuildTicks",
            value: function beforeBuildTicks() {
                this._callHooks('beforeBuildTicks');
            }
        }, {
            key: "buildTicks",
            value: function buildTicks() {
                return [];
            }
        }, {
            key: "afterBuildTicks",
            value: function afterBuildTicks() {
                this._callHooks('afterBuildTicks');
            }
        }, {
            key: "beforeTickToLabelConversion",
            value: function beforeTickToLabelConversion() {
                callback(this.options.beforeTickToLabelConversion, [this]);
            }
        }, {
            key: "generateTickLabels",
            value: function generateTickLabels(ticks) {
                var tickOpts = this.options.ticks;
                var i, ilen, tick;
                for (i = 0, ilen = ticks.length; i < ilen; i++) {
                    tick = ticks[i];
                    tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);
                }
            }
        }, {
            key: "afterTickToLabelConversion",
            value: function afterTickToLabelConversion() {
                callback(this.options.afterTickToLabelConversion, [this]);
            }
        }, {
            key: "beforeCalculateLabelRotation",
            value: function beforeCalculateLabelRotation() {
                callback(this.options.beforeCalculateLabelRotation, [this]);
            }
        }, {
            key: "calculateLabelRotation",
            value: function calculateLabelRotation() {
                var options = this.options;
                var tickOpts = options.ticks;
                var numTicks = this.ticks.length;
                var minRotation = tickOpts.minRotation || 0;
                var maxRotation = tickOpts.maxRotation;
                var labelRotation = minRotation;
                var tickWidth, maxHeight, maxLabelDiagonal;
                if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
                    this.labelRotation = minRotation;
                    return;
                }
                var labelSizes = this._getLabelSizes();
                var maxLabelWidth = labelSizes.widest.width;
                var maxLabelHeight = labelSizes.highest.height;
                var maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
                tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
                if (maxLabelWidth + 6 > tickWidth) {
                    tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
                    maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
                    maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
                    labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
                    labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
                }
                this.labelRotation = labelRotation;
            }
        }, {
            key: "afterCalculateLabelRotation",
            value: function afterCalculateLabelRotation() {
                callback(this.options.afterCalculateLabelRotation, [this]);
            }
        }, {
            key: "afterAutoSkip",
            value: function afterAutoSkip() {}
        }, {
            key: "beforeFit",
            value: function beforeFit() {
                callback(this.options.beforeFit, [this]);
            }
        }, {
            key: "fit",
            value: function fit() {
                var minSize = {
                    width: 0,
                    height: 0
                };
                var chart = this.chart,
                    _this$options5 = this.options,
                    tickOpts = _this$options5.ticks,
                    titleOpts = _this$options5.title,
                    gridOpts = _this$options5.grid;
                var display = this._isVisible();
                var isHorizontal = this.isHorizontal();
                if (display) {
                    var titleHeight = getTitleHeight(titleOpts, chart.options.font);
                    if (isHorizontal) {
                        minSize.width = this.maxWidth;
                        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
                    } else {
                        minSize.height = this.maxHeight;
                        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
                    }
                    if (tickOpts.display && this.ticks.length) {
                        var _this$_getLabelSizes = this._getLabelSizes(),
                            first = _this$_getLabelSizes.first,
                            last = _this$_getLabelSizes.last,
                            widest = _this$_getLabelSizes.widest,
                            highest = _this$_getLabelSizes.highest;
                        var tickPadding = tickOpts.padding * 2;
                        var angleRadians = toRadians(this.labelRotation);
                        var cos = Math.cos(angleRadians);
                        var sin = Math.sin(angleRadians);
                        if (isHorizontal) {
                            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                        } else {
                            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                        }
                        this._calculatePadding(first, last, sin, cos);
                    }
                }
                this._handleMargins();
                if (isHorizontal) {
                    this.width = this._length = chart.width - this._margins.left - this._margins.right;
                    this.height = minSize.height;
                } else {
                    this.width = minSize.width;
                    this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
                }
            }
        }, {
            key: "_calculatePadding",
            value: function _calculatePadding(first, last, sin, cos) {
                var _this$options6 = this.options,
                    _this$options6$ticks = _this$options6.ticks,
                    align = _this$options6$ticks.align,
                    padding = _this$options6$ticks.padding,
                    position = _this$options6.position;
                var isRotated = this.labelRotation !== 0;
                var labelsBelowTicks = position !== 'top' && this.axis === 'x';
                if (this.isHorizontal()) {
                    var offsetLeft = this.getPixelForTick(0) - this.left;
                    var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
                    var paddingLeft = 0;
                    var paddingRight = 0;
                    if (isRotated) {
                        if (labelsBelowTicks) {
                            paddingLeft = cos * first.width;
                            paddingRight = sin * last.height;
                        } else {
                            paddingLeft = sin * first.height;
                            paddingRight = cos * last.width;
                        }
                    } else if (align === 'start') {
                        paddingRight = last.width;
                    } else if (align === 'end') {
                        paddingLeft = first.width;
                    } else if (align !== 'inner') {
                        paddingLeft = first.width / 2;
                        paddingRight = last.width / 2;
                    }
                    this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
                    this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
                } else {
                    var paddingTop = last.height / 2;
                    var paddingBottom = first.height / 2;
                    if (align === 'start') {
                        paddingTop = 0;
                        paddingBottom = first.height;
                    } else if (align === 'end') {
                        paddingTop = last.height;
                        paddingBottom = 0;
                    }
                    this.paddingTop = paddingTop + padding;
                    this.paddingBottom = paddingBottom + padding;
                }
            }
        }, {
            key: "_handleMargins",
            value: function _handleMargins() {
                if (this._margins) {
                    this._margins.left = Math.max(this.paddingLeft, this._margins.left);
                    this._margins.top = Math.max(this.paddingTop, this._margins.top);
                    this._margins.right = Math.max(this.paddingRight, this._margins.right);
                    this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
                }
            }
        }, {
            key: "afterFit",
            value: function afterFit() {
                callback(this.options.afterFit, [this]);
            }
        }, {
            key: "isHorizontal",
            value: function isHorizontal() {
                var _this$options7 = this.options,
                    axis = _this$options7.axis,
                    position = _this$options7.position;
                return position === 'top' || position === 'bottom' || axis === 'x';
            }
        }, {
            key: "isFullSize",
            value: function isFullSize() {
                return this.options.fullSize;
            }
        }, {
            key: "_convertTicksToLabels",
            value: function _convertTicksToLabels(ticks) {
                this.beforeTickToLabelConversion();
                this.generateTickLabels(ticks);
                var i, ilen;
                for (i = 0, ilen = ticks.length; i < ilen; i++) {
                    if (isNullOrUndef(ticks[i].label)) {
                        ticks.splice(i, 1);
                        ilen--;
                        i--;
                    }
                }
                this.afterTickToLabelConversion();
            }
        }, {
            key: "_getLabelSizes",
            value: function _getLabelSizes() {
                var labelSizes = this._labelSizes;
                if (!labelSizes) {
                    var sampleSize = this.options.ticks.sampleSize;
                    var ticks = this.ticks;
                    if (sampleSize < ticks.length) {
                        ticks = sample(ticks, sampleSize);
                    }
                    this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
                }
                return labelSizes;
            }
        }, {
            key: "_computeLabelSizes",
            value: function _computeLabelSizes(ticks, length) {
                var ctx = this.ctx,
                    caches = this._longestTextCache;
                var widths = [];
                var heights = [];
                var widestLabelSize = 0;
                var highestLabelSize = 0;
                var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
                for (i = 0; i < length; ++i) {
                    label = ticks[i].label;
                    tickFont = this._resolveTickFontOptions(i);
                    ctx.font = fontString = tickFont.string;
                    cache = caches[fontString] = caches[fontString] || {
                        data: {},
                        gc: []
                    };
                    lineHeight = tickFont.lineHeight;
                    width = height = 0;
                    if (!isNullOrUndef(label) && !isArray(label)) {
                        width = _measureText(ctx, cache.data, cache.gc, width, label);
                        height = lineHeight;
                    } else if (isArray(label)) {
                        for (j = 0, jlen = label.length; j < jlen; ++j) {
                            nestedLabel = label[j];
                            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                                width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                                height += lineHeight;
                            }
                        }
                    }
                    widths.push(width);
                    heights.push(height);
                    widestLabelSize = Math.max(width, widestLabelSize);
                    highestLabelSize = Math.max(height, highestLabelSize);
                }
                garbageCollect(caches, length);
                var widest = widths.indexOf(widestLabelSize);
                var highest = heights.indexOf(highestLabelSize);
                var valueAt = function valueAt(idx) {
                    return {
                        width: widths[idx] || 0,
                        height: heights[idx] || 0
                    };
                };
                return {
                    first: valueAt(0),
                    last: valueAt(length - 1),
                    widest: valueAt(widest),
                    highest: valueAt(highest),
                    widths: widths,
                    heights: heights
                };
            }
        }, {
            key: "getLabelForValue",
            value: function getLabelForValue(value) {
                return value;
            }
        }, {
            key: "getPixelForValue",
            value: function getPixelForValue(value, index) {
                return NaN;
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {}
        }, {
            key: "getPixelForTick",
            value: function getPixelForTick(index) {
                var ticks = this.ticks;
                if (index < 0 || index > ticks.length - 1) {
                    return null;
                }
                return this.getPixelForValue(ticks[index].value);
            }
        }, {
            key: "getPixelForDecimal",
            value: function getPixelForDecimal(decimal) {
                if (this._reversePixels) {
                    decimal = 1 - decimal;
                }
                var pixel = this._startPixel + decimal * this._length;
                return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
            }
        }, {
            key: "getDecimalForPixel",
            value: function getDecimalForPixel(pixel) {
                var decimal = (pixel - this._startPixel) / this._length;
                return this._reversePixels ? 1 - decimal : decimal;
            }
        }, {
            key: "getBasePixel",
            value: function getBasePixel() {
                return this.getPixelForValue(this.getBaseValue());
            }
        }, {
            key: "getBaseValue",
            value: function getBaseValue() {
                var min = this.min,
                    max = this.max;
                return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
            }
        }, {
            key: "getContext",
            value: function getContext(index) {
                var ticks = this.ticks || [];
                if (index >= 0 && index < ticks.length) {
                    var tick = ticks[index];
                    return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
                }
                return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
            }
        }, {
            key: "_tickSize",
            value: function _tickSize() {
                var optionTicks = this.options.ticks;
                var rot = toRadians(this.labelRotation);
                var cos = Math.abs(Math.cos(rot));
                var sin = Math.abs(Math.sin(rot));
                var labelSizes = this._getLabelSizes();
                var padding = optionTicks.autoSkipPadding || 0;
                var w = labelSizes ? labelSizes.widest.width + padding : 0;
                var h = labelSizes ? labelSizes.highest.height + padding : 0;
                return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
            }
        }, {
            key: "_isVisible",
            value: function _isVisible() {
                var display = this.options.display;
                if (display !== 'auto') {
                    return !!display;
                }
                return this.getMatchingVisibleMetas().length > 0;
            }
        }, {
            key: "_computeGridLineItems",
            value: function _computeGridLineItems(chartArea) {
                var axis = this.axis;
                var chart = this.chart;
                var options = this.options;
                var grid = options.grid,
                    position = options.position,
                    border = options.border;
                var offset = grid.offset;
                var isHorizontal = this.isHorizontal();
                var ticks = this.ticks;
                var ticksLength = ticks.length + (offset ? 1 : 0);
                var tl = getTickMarkLength(grid);
                var items = [];
                var borderOpts = border.setContext(this.getContext());
                var axisWidth = borderOpts.display ? borderOpts.width : 0;
                var axisHalfWidth = axisWidth / 2;
                var alignBorderValue = function alignBorderValue(pixel) {
                    return _alignPixel(chart, pixel, axisWidth);
                };
                var borderValue, i, lineValue, alignedLineValue;
                var tx1, ty1, tx2, ty2, x1, y1, x2, y2;
                if (position === 'top') {
                    borderValue = alignBorderValue(this.bottom);
                    ty1 = this.bottom - tl;
                    ty2 = borderValue - axisHalfWidth;
                    y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
                    y2 = chartArea.bottom;
                } else if (position === 'bottom') {
                    borderValue = alignBorderValue(this.top);
                    y1 = chartArea.top;
                    y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
                    ty1 = borderValue + axisHalfWidth;
                    ty2 = this.top + tl;
                } else if (position === 'left') {
                    borderValue = alignBorderValue(this.right);
                    tx1 = this.right - tl;
                    tx2 = borderValue - axisHalfWidth;
                    x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
                    x2 = chartArea.right;
                } else if (position === 'right') {
                    borderValue = alignBorderValue(this.left);
                    x1 = chartArea.left;
                    x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
                    tx1 = borderValue + axisHalfWidth;
                    tx2 = this.left + tl;
                } else if (axis === 'x') {
                    if (position === 'center') {
                        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
                    } else if (isObject(position)) {
                        var positionAxisID = Object.keys(position)[0];
                        var value = position[positionAxisID];
                        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
                    }
                    y1 = chartArea.top;
                    y2 = chartArea.bottom;
                    ty1 = borderValue + axisHalfWidth;
                    ty2 = ty1 + tl;
                } else if (axis === 'y') {
                    if (position === 'center') {
                        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
                    } else if (isObject(position)) {
                        var positionAxisID1 = Object.keys(position)[0];
                        var value1 = position[positionAxisID1];
                        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));
                    }
                    tx1 = borderValue - axisHalfWidth;
                    tx2 = tx1 - tl;
                    x1 = chartArea.left;
                    x2 = chartArea.right;
                }
                var limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
                var step = Math.max(1, Math.ceil(ticksLength / limit));
                for (i = 0; i < ticksLength; i += step) {
                    var context = this.getContext(i);
                    var optsAtIndex = grid.setContext(context);
                    var optsAtIndexBorder = border.setContext(context);
                    var lineWidth = optsAtIndex.lineWidth;
                    var lineColor = optsAtIndex.color;
                    var borderDash = optsAtIndexBorder.dash || [];
                    var borderDashOffset = optsAtIndexBorder.dashOffset;
                    var tickWidth = optsAtIndex.tickWidth;
                    var tickColor = optsAtIndex.tickColor;
                    var tickBorderDash = optsAtIndex.tickBorderDash || [];
                    var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
                    lineValue = getPixelForGridLine(this, i, offset);
                    if (lineValue === undefined) {
                        continue;
                    }
                    alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
                    if (isHorizontal) {
                        tx1 = tx2 = x1 = x2 = alignedLineValue;
                    } else {
                        ty1 = ty2 = y1 = y2 = alignedLineValue;
                    }
                    items.push({
                        tx1: tx1,
                        ty1: ty1,
                        tx2: tx2,
                        ty2: ty2,
                        x1: x1,
                        y1: y1,
                        x2: x2,
                        y2: y2,
                        width: lineWidth,
                        color: lineColor,
                        borderDash: borderDash,
                        borderDashOffset: borderDashOffset,
                        tickWidth: tickWidth,
                        tickColor: tickColor,
                        tickBorderDash: tickBorderDash,
                        tickBorderDashOffset: tickBorderDashOffset
                    });
                }
                this._ticksLength = ticksLength;
                this._borderValue = borderValue;
                return items;
            }
        }, {
            key: "_computeLabelItems",
            value: function _computeLabelItems(chartArea) {
                var axis = this.axis;
                var options = this.options;
                var position = options.position,
                    optionTicks = options.ticks;
                var isHorizontal = this.isHorizontal();
                var ticks = this.ticks;
                var align = optionTicks.align,
                    crossAlign = optionTicks.crossAlign,
                    padding = optionTicks.padding,
                    mirror = optionTicks.mirror;
                var tl = getTickMarkLength(options.grid);
                var tickAndPadding = tl + padding;
                var hTickAndPadding = mirror ? -padding : tickAndPadding;
                var rotation = -toRadians(this.labelRotation);
                var items = [];
                var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
                var textBaseline = 'middle';
                if (position === 'top') {
                    y = this.bottom - hTickAndPadding;
                    textAlign = this._getXAxisLabelAlignment();
                } else if (position === 'bottom') {
                    y = this.top + hTickAndPadding;
                    textAlign = this._getXAxisLabelAlignment();
                } else if (position === 'left') {
                    var ret = this._getYAxisLabelAlignment(tl);
                    textAlign = ret.textAlign;
                    x = ret.x;
                } else if (position === 'right') {
                    var ret1 = this._getYAxisLabelAlignment(tl);
                    textAlign = ret1.textAlign;
                    x = ret1.x;
                } else if (axis === 'x') {
                    if (position === 'center') {
                        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
                    } else if (isObject(position)) {
                        var positionAxisID = Object.keys(position)[0];
                        var value = position[positionAxisID];
                        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
                    }
                    textAlign = this._getXAxisLabelAlignment();
                } else if (axis === 'y') {
                    if (position === 'center') {
                        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
                    } else if (isObject(position)) {
                        var positionAxisID1 = Object.keys(position)[0];
                        var value1 = position[positionAxisID1];
                        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);
                    }
                    textAlign = this._getYAxisLabelAlignment(tl).textAlign;
                }
                if (axis === 'y') {
                    if (align === 'start') {
                        textBaseline = 'top';
                    } else if (align === 'end') {
                        textBaseline = 'bottom';
                    }
                }
                var labelSizes = this._getLabelSizes();
                for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                    tick = ticks[i];
                    label = tick.label;
                    var optsAtIndex = optionTicks.setContext(this.getContext(i));
                    pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
                    font = this._resolveTickFontOptions(i);
                    lineHeight = font.lineHeight;
                    lineCount = isArray(label) ? label.length : 1;
                    var halfCount = lineCount / 2;
                    var color = optsAtIndex.color;
                    var strokeColor = optsAtIndex.textStrokeColor;
                    var strokeWidth = optsAtIndex.textStrokeWidth;
                    var tickTextAlign = textAlign;
                    if (isHorizontal) {
                        x = pixel;
                        if (textAlign === 'inner') {
                            if (i === ilen - 1) {
                                tickTextAlign = !this.options.reverse ? 'right' : 'left';
                            } else if (i === 0) {
                                tickTextAlign = !this.options.reverse ? 'left' : 'right';
                            } else {
                                tickTextAlign = 'center';
                            }
                        }
                        if (position === 'top') {
                            if (crossAlign === 'near' || rotation !== 0) {
                                textOffset = -lineCount * lineHeight + lineHeight / 2;
                            } else if (crossAlign === 'center') {
                                textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                            } else {
                                textOffset = -labelSizes.highest.height + lineHeight / 2;
                            }
                        } else {
                            if (crossAlign === 'near' || rotation !== 0) {
                                textOffset = lineHeight / 2;
                            } else if (crossAlign === 'center') {
                                textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                            } else {
                                textOffset = labelSizes.highest.height - lineCount * lineHeight;
                            }
                        }
                        if (mirror) {
                            textOffset *= -1;
                        }
                        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
                            x += lineHeight / 2 * Math.sin(rotation);
                        }
                    } else {
                        y = pixel;
                        textOffset = (1 - lineCount) * lineHeight / 2;
                    }
                    var backdrop = void 0;
                    if (optsAtIndex.showLabelBackdrop) {
                        var labelPadding = toPadding(optsAtIndex.backdropPadding);
                        var height = labelSizes.heights[i];
                        var width = labelSizes.widths[i];
                        var top = textOffset - labelPadding.top;
                        var left = 0 - labelPadding.left;
                        switch (textBaseline) {
                            case 'middle':
                                top -= height / 2;
                                break;
                            case 'bottom':
                                top -= height;
                                break;
                        }
                        switch (textAlign) {
                            case 'center':
                                left -= width / 2;
                                break;
                            case 'right':
                                left -= width;
                                break;
                        }
                        backdrop = {
                            left: left,
                            top: top,
                            width: width + labelPadding.width,
                            height: height + labelPadding.height,
                            color: optsAtIndex.backdropColor
                        };
                    }
                    items.push({
                        label: label,
                        font: font,
                        textOffset: textOffset,
                        options: {
                            rotation: rotation,
                            color: color,
                            strokeColor: strokeColor,
                            strokeWidth: strokeWidth,
                            textAlign: tickTextAlign,
                            textBaseline: textBaseline,
                            translation: [x, y],
                            backdrop: backdrop
                        }
                    });
                }
                return items;
            }
        }, {
            key: "_getXAxisLabelAlignment",
            value: function _getXAxisLabelAlignment() {
                var _this$options8 = this.options,
                    position = _this$options8.position,
                    ticks = _this$options8.ticks;
                var rotation = -toRadians(this.labelRotation);
                if (rotation) {
                    return position === 'top' ? 'left' : 'right';
                }
                var align = 'center';
                if (ticks.align === 'start') {
                    align = 'left';
                } else if (ticks.align === 'end') {
                    align = 'right';
                } else if (ticks.align === 'inner') {
                    align = 'inner';
                }
                return align;
            }
        }, {
            key: "_getYAxisLabelAlignment",
            value: function _getYAxisLabelAlignment(tl) {
                var _this$options9 = this.options,
                    position = _this$options9.position,
                    _this$options9$ticks = _this$options9.ticks,
                    crossAlign = _this$options9$ticks.crossAlign,
                    mirror = _this$options9$ticks.mirror,
                    padding = _this$options9$ticks.padding;
                var labelSizes = this._getLabelSizes();
                var tickAndPadding = tl + padding;
                var widest = labelSizes.widest.width;
                var textAlign;
                var x;
                if (position === 'left') {
                    if (mirror) {
                        x = this.right + padding;
                        if (crossAlign === 'near') {
                            textAlign = 'left';
                        } else if (crossAlign === 'center') {
                            textAlign = 'center';
                            x += widest / 2;
                        } else {
                            textAlign = 'right';
                            x += widest;
                        }
                    } else {
                        x = this.right - tickAndPadding;
                        if (crossAlign === 'near') {
                            textAlign = 'right';
                        } else if (crossAlign === 'center') {
                            textAlign = 'center';
                            x -= widest / 2;
                        } else {
                            textAlign = 'left';
                            x = this.left;
                        }
                    }
                } else if (position === 'right') {
                    if (mirror) {
                        x = this.left + padding;
                        if (crossAlign === 'near') {
                            textAlign = 'right';
                        } else if (crossAlign === 'center') {
                            textAlign = 'center';
                            x -= widest / 2;
                        } else {
                            textAlign = 'left';
                            x -= widest;
                        }
                    } else {
                        x = this.left + tickAndPadding;
                        if (crossAlign === 'near') {
                            textAlign = 'left';
                        } else if (crossAlign === 'center') {
                            textAlign = 'center';
                            x += widest / 2;
                        } else {
                            textAlign = 'right';
                            x = this.right;
                        }
                    }
                } else {
                    textAlign = 'right';
                }
                return {
                    textAlign: textAlign,
                    x: x
                };
            }
        }, {
            key: "_computeLabelArea",
            value: function _computeLabelArea() {
                if (this.options.ticks.mirror) {
                    return;
                }
                var chart = this.chart;
                var position = this.options.position;
                if (position === 'left' || position === 'right') {
                    return {
                        top: 0,
                        left: this.left,
                        bottom: chart.height,
                        right: this.right
                    };
                }
                if (position === 'top' || position === 'bottom') {
                    return {
                        top: this.top,
                        left: 0,
                        bottom: this.bottom,
                        right: chart.width
                    };
                }
            }
        }, {
            key: "drawBackground",
            value: function drawBackground() {
                var ctx = this.ctx,
                    backgroundColor = this.options.backgroundColor,
                    left = this.left,
                    top = this.top,
                    width = this.width,
                    height = this.height;
                if (backgroundColor) {
                    ctx.save();
                    ctx.fillStyle = backgroundColor;
                    ctx.fillRect(left, top, width, height);
                    ctx.restore();
                }
            }
        }, {
            key: "getLineWidthForValue",
            value: function getLineWidthForValue(value) {
                var grid = this.options.grid;
                if (!this._isVisible() || !grid.display) {
                    return 0;
                }
                var ticks = this.ticks;
                var index = ticks.findIndex(function (t) {
                    return t.value === value;
                });
                if (index >= 0) {
                    var opts = grid.setContext(this.getContext(index));
                    return opts.lineWidth;
                }
                return 0;
            }
        }, {
            key: "drawGrid",
            value: function drawGrid(chartArea) {
                var grid = this.options.grid;
                var ctx = this.ctx;
                var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
                var i, ilen;
                var drawLine = function drawLine(p1, p2, style) {
                    if (!style.width || !style.color) {
                        return;
                    }
                    ctx.save();
                    ctx.lineWidth = style.width;
                    ctx.strokeStyle = style.color;
                    ctx.setLineDash(style.borderDash || []);
                    ctx.lineDashOffset = style.borderDashOffset;
                    ctx.beginPath();
                    ctx.moveTo(p1.x, p1.y);
                    ctx.lineTo(p2.x, p2.y);
                    ctx.stroke();
                    ctx.restore();
                };
                if (grid.display) {
                    for (i = 0, ilen = items.length; i < ilen; ++i) {
                        var item = items[i];
                        if (grid.drawOnChartArea) {
                            drawLine({
                                x: item.x1,
                                y: item.y1
                            }, {
                                x: item.x2,
                                y: item.y2
                            }, item);
                        }
                        if (grid.drawTicks) {
                            drawLine({
                                x: item.tx1,
                                y: item.ty1
                            }, {
                                x: item.tx2,
                                y: item.ty2
                            }, {
                                color: item.tickColor,
                                width: item.tickWidth,
                                borderDash: item.tickBorderDash,
                                borderDashOffset: item.tickBorderDashOffset
                            });
                        }
                    }
                }
            }
        }, {
            key: "drawBorder",
            value: function drawBorder() {
                var chart = this.chart,
                    ctx = this.ctx,
                    _this$options10 = this.options,
                    border = _this$options10.border,
                    grid = _this$options10.grid;
                var borderOpts = border.setContext(this.getContext());
                var axisWidth = border.display ? borderOpts.width : 0;
                if (!axisWidth) {
                    return;
                }
                var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
                var borderValue = this._borderValue;
                var x1, x2, y1, y2;
                if (this.isHorizontal()) {
                    x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
                    x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
                    y1 = y2 = borderValue;
                } else {
                    y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
                    y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
                    x1 = x2 = borderValue;
                }
                ctx.save();
                ctx.lineWidth = borderOpts.width;
                ctx.strokeStyle = borderOpts.color;
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
                ctx.restore();
            }
        }, {
            key: "drawLabels",
            value: function drawLabels(chartArea) {
                var optionTicks = this.options.ticks;
                if (!optionTicks.display) {
                    return;
                }
                var ctx = this.ctx;
                var area = this._computeLabelArea();
                if (area) {
                    clipArea(ctx, area);
                }
                var items = this.getLabelItems(chartArea);
                var _iterator10 = _createForOfIteratorHelper$1(items),
                    _step10;
                try {
                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                        var item = _step10.value;
                        var renderTextOptions = item.options;
                        var tickFont = item.font;
                        var label = item.label;
                        var y = item.textOffset;
                        renderText(ctx, label, 0, y, tickFont, renderTextOptions);
                    }
                } catch (err) {
                    _iterator10.e(err);
                } finally {
                    _iterator10.f();
                }
                if (area) {
                    unclipArea(ctx);
                }
            }
        }, {
            key: "drawTitle",
            value: function drawTitle() {
                var ctx = this.ctx,
                    _this$options11 = this.options,
                    position = _this$options11.position,
                    title = _this$options11.title,
                    reverse = _this$options11.reverse;
                if (!title.display) {
                    return;
                }
                var font = toFont(title.font);
                var padding = toPadding(title.padding);
                var align = title.align;
                var offset = font.lineHeight / 2;
                if (position === 'bottom' || position === 'center' || isObject(position)) {
                    offset += padding.bottom;
                    if (isArray(title.text)) {
                        offset += font.lineHeight * (title.text.length - 1);
                    }
                } else {
                    offset += padding.top;
                }
                var _titleArgs = titleArgs(this, offset, position, align),
                    titleX = _titleArgs.titleX,
                    titleY = _titleArgs.titleY,
                    maxWidth = _titleArgs.maxWidth,
                    rotation = _titleArgs.rotation;
                renderText(ctx, title.text, 0, 0, font, {
                    color: title.color,
                    maxWidth: maxWidth,
                    rotation: rotation,
                    textAlign: titleAlign(align, position, reverse),
                    textBaseline: 'middle',
                    translation: [titleX, titleY]
                });
            }
        }, {
            key: "draw",
            value: function draw(chartArea) {
                if (!this._isVisible()) {
                    return;
                }
                this.drawBackground();
                this.drawGrid(chartArea);
                this.drawBorder();
                this.drawTitle();
                this.drawLabels(chartArea);
            }
        }, {
            key: "_layers",
            value: function _layers() {
                var _this10 = this;
                var opts = this.options;
                var tz = opts.ticks && opts.ticks.z || 0;
                var gz = valueOrDefault(opts.grid && opts.grid.z, -1);
                var bz = valueOrDefault(opts.border && opts.border.z, 0);
                if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
                    return [{
                        z: tz,
                        draw: function draw(chartArea) {
                            _this10.draw(chartArea);
                        }
                    }];
                }
                return [{
                    z: gz,
                    draw: function draw(chartArea) {
                        _this10.drawBackground();
                        _this10.drawGrid(chartArea);
                        _this10.drawTitle();
                    }
                }, {
                    z: bz,
                    draw: function draw() {
                        _this10.drawBorder();
                    }
                }, {
                    z: tz,
                    draw: function draw(chartArea) {
                        _this10.drawLabels(chartArea);
                    }
                }];
            }
        }, {
            key: "getMatchingVisibleMetas",
            value: function getMatchingVisibleMetas(type) {
                var metas = this.chart.getSortedVisibleDatasetMetas();
                var axisID = this.axis + 'AxisID';
                var result = [];
                var i, ilen;
                for (i = 0, ilen = metas.length; i < ilen; ++i) {
                    var meta = metas[i];
                    if (meta[axisID] === this.id && (!type || meta.type === type)) {
                        result.push(meta);
                    }
                }
                return result;
            }
        }, {
            key: "_resolveTickFontOptions",
            value: function _resolveTickFontOptions(index) {
                var opts = this.options.ticks.setContext(this.getContext(index));
                return toFont(opts.font);
            }
        }, {
            key: "_maxDigits",
            value: function _maxDigits() {
                var fontSize = this._resolveTickFontOptions(0).lineHeight;
                return (this.isHorizontal() ? this.width : this.height) / fontSize;
            }
        }]);
        return Scale;
    }(Element);
    var TypedRegistry = /*#__PURE__*/function () {
        function TypedRegistry(type, scope, override) {
            _classCallCheck$x(this, TypedRegistry);
            this.type = type;
            this.scope = scope;
            this.override = override;
            this.items = Object.create(null);
        }
        _createClass$x(TypedRegistry, [{
            key: "isForType",
            value: function isForType(type) {
                return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
            }
        }, {
            key: "register",
            value: function register(item) {
                var proto = Object.getPrototypeOf(item);
                var parentScope;
                if (isIChartComponent(proto)) {
                    parentScope = this.register(proto);
                }
                var items = this.items;
                var id = item.id;
                var scope = this.scope + '.' + id;
                if (!id) {
                    throw new Error('class does not have id: ' + item);
                }
                if (id in items) {
                    return scope;
                }
                items[id] = item;
                registerDefaults(item, scope, parentScope);
                if (this.override) {
                    defaults.override(item.id, item.overrides);
                }
                return scope;
            }
        }, {
            key: "get",
            value: function get(id) {
                return this.items[id];
            }
        }, {
            key: "unregister",
            value: function unregister(item) {
                var items = this.items;
                var id = item.id;
                var scope = this.scope;
                if (id in items) {
                    delete items[id];
                }
                if (scope && id in defaults[scope]) {
                    delete defaults[scope][id];
                    if (this.override) {
                        delete overrides[id];
                    }
                }
            }
        }]);
        return TypedRegistry;
    }();
    function registerDefaults(item, scope, parentScope) {
        var itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);
        defaults.set(scope, itemDefaults);
        if (item.defaultRoutes) {
            routeDefaults(scope, item.defaultRoutes);
        }
        if (item.descriptors) {
            defaults.describe(scope, item.descriptors);
        }
    }
    function routeDefaults(scope, routes) {
        Object.keys(routes).forEach(function (property) {
            var propertyParts = property.split('.');
            var sourceName = propertyParts.pop();
            var sourceScope = [scope].concat(propertyParts).join('.');
            var parts = routes[property].split('.');
            var targetName = parts.pop();
            var targetScope = parts.join('.');
            defaults.route(sourceScope, sourceName, targetScope, targetName);
        });
    }
    function isIChartComponent(proto) {
        return 'id' in proto && 'defaults' in proto;
    }
    var Registry = /*#__PURE__*/function () {
        function Registry() {
            _classCallCheck$x(this, Registry);
            this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
            this.elements = new TypedRegistry(Element, 'elements');
            this.plugins = new TypedRegistry(Object, 'plugins');
            this.scales = new TypedRegistry(Scale, 'scales');
            this._typedRegistries = [this.controllers, this.scales, this.elements];
        }
        _createClass$x(Registry, [{
            key: "add",
            value: function add() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                this._each('register', args);
            }
        }, {
            key: "remove",
            value: function remove() {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }
                this._each('unregister', args);
            }
        }, {
            key: "addControllers",
            value: function addControllers() {
                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = arguments[_key3];
                }
                this._each('register', args, this.controllers);
            }
        }, {
            key: "addElements",
            value: function addElements() {
                for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = arguments[_key4];
                }
                this._each('register', args, this.elements);
            }
        }, {
            key: "addPlugins",
            value: function addPlugins() {
                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = arguments[_key5];
                }
                this._each('register', args, this.plugins);
            }
        }, {
            key: "addScales",
            value: function addScales() {
                for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = arguments[_key6];
                }
                this._each('register', args, this.scales);
            }
        }, {
            key: "getController",
            value: function getController(id) {
                return this._get(id, this.controllers, 'controller');
            }
        }, {
            key: "getElement",
            value: function getElement(id) {
                return this._get(id, this.elements, 'element');
            }
        }, {
            key: "getPlugin",
            value: function getPlugin(id) {
                return this._get(id, this.plugins, 'plugin');
            }
        }, {
            key: "getScale",
            value: function getScale(id) {
                return this._get(id, this.scales, 'scale');
            }
        }, {
            key: "removeControllers",
            value: function removeControllers() {
                for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = arguments[_key7];
                }
                this._each('unregister', args, this.controllers);
            }
        }, {
            key: "removeElements",
            value: function removeElements() {
                for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                    args[_key8] = arguments[_key8];
                }
                this._each('unregister', args, this.elements);
            }
        }, {
            key: "removePlugins",
            value: function removePlugins() {
                for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                    args[_key9] = arguments[_key9];
                }
                this._each('unregister', args, this.plugins);
            }
        }, {
            key: "removeScales",
            value: function removeScales() {
                for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
                    args[_key10] = arguments[_key10];
                }
                this._each('unregister', args, this.scales);
            }
        }, {
            key: "_each",
            value: function _each(method, args, typedRegistry) {
                var _this11 = this;
                _toConsumableArray(args).forEach(function (arg) {
                    var reg = typedRegistry || _this11._getRegistryForType(arg);
                    if (typedRegistry || reg.isForType(arg) || reg === _this11.plugins && arg.id) {
                        _this11._exec(method, reg, arg);
                    } else {
                        each(arg, function (item) {
                            var itemReg = typedRegistry || _this11._getRegistryForType(item);
                            _this11._exec(method, itemReg, item);
                        });
                    }
                });
            }
        }, {
            key: "_exec",
            value: function _exec(method, registry, component) {
                var camelMethod = _capitalize(method);
                callback(component['before' + camelMethod], [], component);
                registry[method](component);
                callback(component['after' + camelMethod], [], component);
            }
        }, {
            key: "_getRegistryForType",
            value: function _getRegistryForType(type) {
                for (var i = 0; i < this._typedRegistries.length; i++) {
                    var reg = this._typedRegistries[i];
                    if (reg.isForType(type)) {
                        return reg;
                    }
                }
                return this.plugins;
            }
        }, {
            key: "_get",
            value: function _get(id, typedRegistry, type) {
                var item = typedRegistry.get(id);
                if (item === undefined) {
                    throw new Error('"' + id + '" is not a registered ' + type + '.');
                }
                return item;
            }
        }]);
        return Registry;
    }();
    var registry = /* #__PURE__ */new Registry();
    var PluginService = /*#__PURE__*/function () {
        function PluginService() {
            _classCallCheck$x(this, PluginService);
            this._init = [];
        }
        _createClass$x(PluginService, [{
            key: "notify",
            value: function notify(chart, hook, args, filter) {
                if (hook === 'beforeInit') {
                    this._init = this._createDescriptors(chart, true);
                    this._notify(this._init, chart, 'install');
                }
                var descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
                var result = this._notify(descriptors, chart, hook, args);
                if (hook === 'afterDestroy') {
                    this._notify(descriptors, chart, 'stop');
                    this._notify(this._init, chart, 'uninstall');
                }
                return result;
            }
        }, {
            key: "_notify",
            value: function _notify(descriptors, chart, hook, args) {
                args = args || {};
                var _iterator11 = _createForOfIteratorHelper$1(descriptors),
                    _step11;
                try {
                    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                        var descriptor = _step11.value;
                        var plugin = descriptor.plugin;
                        var method = plugin[hook];
                        var params = [chart, args, descriptor.options];
                        if (callback(method, params, plugin) === false && args.cancelable) {
                            return false;
                        }
                    }
                } catch (err) {
                    _iterator11.e(err);
                } finally {
                    _iterator11.f();
                }
                return true;
            }
        }, {
            key: "invalidate",
            value: function invalidate() {
                if (!isNullOrUndef(this._cache)) {
                    this._oldCache = this._cache;
                    this._cache = undefined;
                }
            }
        }, {
            key: "_descriptors",
            value: function _descriptors(chart) {
                if (this._cache) {
                    return this._cache;
                }
                var descriptors = this._cache = this._createDescriptors(chart);
                this._notifyStateChanges(chart);
                return descriptors;
            }
        }, {
            key: "_createDescriptors",
            value: function _createDescriptors(chart, all) {
                var config = chart && chart.config;
                var options = valueOrDefault(config.options && config.options.plugins, {});
                var plugins = allPlugins(config);
                return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
            }
        }, {
            key: "_notifyStateChanges",
            value: function _notifyStateChanges(chart) {
                var previousDescriptors = this._oldCache || [];
                var descriptors = this._cache;
                var diff = function diff(a, b) {
                    return a.filter(function (x) {
                        return !b.some(function (y) {
                            return x.plugin.id === y.plugin.id;
                        });
                    });
                };
                this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
                this._notify(diff(descriptors, previousDescriptors), chart, 'start');
            }
        }]);
        return PluginService;
    }();
    function allPlugins(config) {
        var localIds = {};
        var plugins = [];
        var keys = Object.keys(registry.plugins.items);
        for (var i = 0; i < keys.length; i++) {
            plugins.push(registry.getPlugin(keys[i]));
        }
        var local = config.plugins || [];
        for (var i1 = 0; i1 < local.length; i1++) {
            var plugin = local[i1];
            if (plugins.indexOf(plugin) === -1) {
                plugins.push(plugin);
                localIds[plugin.id] = true;
            }
        }
        return {
            plugins: plugins,
            localIds: localIds
        };
    }
    function getOpts(options, all) {
        if (!all && options === false) {
            return null;
        }
        if (options === true) {
            return {};
        }
        return options;
    }
    function createDescriptors(chart, _ref2, options, all) {
        var plugins = _ref2.plugins,
            localIds = _ref2.localIds;
        var result = [];
        var context = chart.getContext();
        var _iterator12 = _createForOfIteratorHelper$1(plugins),
            _step12;
        try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                var plugin = _step12.value;
                var id = plugin.id;
                var opts = getOpts(options[id], all);
                if (opts === null) {
                    continue;
                }
                result.push({
                    plugin: plugin,
                    options: pluginOpts(chart.config, {
                        plugin: plugin,
                        local: localIds[id]
                    }, opts, context)
                });
            }
        } catch (err) {
            _iterator12.e(err);
        } finally {
            _iterator12.f();
        }
        return result;
    }
    function pluginOpts(config, _ref3, opts, context) {
        var plugin = _ref3.plugin,
            local = _ref3.local;
        var keys = config.pluginScopeKeys(plugin);
        var scopes = config.getOptionScopes(opts, keys);
        if (local && plugin.defaults) {
            scopes.push(plugin.defaults);
        }
        return config.createResolver(scopes, context, [''], {
            scriptable: false,
            indexable: false,
            allKeys: true
        });
    }
    function getIndexAxis(type, options) {
        var datasetDefaults = defaults.datasets[type] || {};
        var datasetOptions = (options.datasets || {})[type] || {};
        return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
    }
    function getAxisFromDefaultScaleID(id, indexAxis) {
        var axis = id;
        if (id === '_index_') {
            axis = indexAxis;
        } else if (id === '_value_') {
            axis = indexAxis === 'x' ? 'y' : 'x';
        }
        return axis;
    }
    function getDefaultScaleIDFromAxis(axis, indexAxis) {
        return axis === indexAxis ? '_index_' : '_value_';
    }
    function axisFromPosition(position) {
        if (position === 'top' || position === 'bottom') {
            return 'x';
        }
        if (position === 'left' || position === 'right') {
            return 'y';
        }
    }
    function determineAxis(id, scaleOptions) {
        if (id === 'x' || id === 'y' || id === 'r') {
            return id;
        }
        id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);
        if (id) {
            return id;
        }
        throw new Error("Cannot determine type of '".concat(name, "' axis. Please provide 'axis' or 'position' option."));
    }
    function mergeScaleConfig(config, options) {
        var chartDefaults = overrides[config.type] || {
            scales: {}
        };
        var configScales = options.scales || {};
        var chartIndexAxis = getIndexAxis(config.type, options);
        var scales = Object.create(null);
        Object.keys(configScales).forEach(function (id) {
            var scaleConf = configScales[id];
            if (!isObject(scaleConf)) {
                return console.error("Invalid scale configuration for scale: ".concat(id));
            }
            if (scaleConf._proxy) {
                return console.warn("Ignoring resolver passed as options for scale: ".concat(id));
            }
            var axis = determineAxis(id, scaleConf);
            var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
            var defaultScaleOptions = chartDefaults.scales || {};
            scales[id] = mergeIf(Object.create(null), [{
                axis: axis
            }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
        });
        config.data.datasets.forEach(function (dataset) {
            var type = dataset.type || config.type;
            var indexAxis = dataset.indexAxis || getIndexAxis(type, options);
            var datasetDefaults = overrides[type] || {};
            var defaultScaleOptions = datasetDefaults.scales || {};
            Object.keys(defaultScaleOptions).forEach(function (defaultID) {
                var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
                var id = dataset[axis + 'AxisID'] || axis;
                scales[id] = scales[id] || Object.create(null);
                mergeIf(scales[id], [{
                    axis: axis
                }, configScales[id], defaultScaleOptions[defaultID]]);
            });
        });
        Object.keys(scales).forEach(function (key) {
            var scale = scales[key];
            mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);
        });
        return scales;
    }
    function initOptions(config) {
        var options = config.options || (config.options = {});
        options.plugins = valueOrDefault(options.plugins, {});
        options.scales = mergeScaleConfig(config, options);
    }
    function initData(data) {
        data = data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        return data;
    }
    function initConfig(config) {
        config = config || {};
        config.data = initData(config.data);
        initOptions(config);
        return config;
    }
    var keyCache = new Map();
    var keysCached = new Set();
    function cachedKeys(cacheKey, generate) {
        var keys = keyCache.get(cacheKey);
        if (!keys) {
            keys = generate();
            keyCache.set(cacheKey, keys);
            keysCached.add(keys);
        }
        return keys;
    }
    var addIfFound = function addIfFound(set, obj, key) {
        var opts = resolveObjectKey(obj, key);
        if (opts !== undefined) {
            set.add(opts);
        }
    };
    var Config = /*#__PURE__*/function () {
        function Config(config) {
            _classCallCheck$x(this, Config);
            this._config = initConfig(config);
            this._scopeCache = new Map();
            this._resolverCache = new Map();
        }
        _createClass$x(Config, [{
            key: "platform",
            get: function get() {
                return this._config.platform;
            }
        }, {
            key: "type",
            get: function get() {
                return this._config.type;
            },
            set: function set(type) {
                this._config.type = type;
            }
        }, {
            key: "data",
            get: function get() {
                return this._config.data;
            },
            set: function set(data) {
                this._config.data = initData(data);
            }
        }, {
            key: "options",
            get: function get() {
                return this._config.options;
            },
            set: function set(options) {
                this._config.options = options;
            }
        }, {
            key: "plugins",
            get: function get() {
                return this._config.plugins;
            }
        }, {
            key: "update",
            value: function update() {
                var config = this._config;
                this.clearCache();
                initOptions(config);
            }
        }, {
            key: "clearCache",
            value: function clearCache() {
                this._scopeCache.clear();
                this._resolverCache.clear();
            }
        }, {
            key: "datasetScopeKeys",
            value: function datasetScopeKeys(datasetType) {
                return cachedKeys(datasetType, function () {
                    return [["datasets.".concat(datasetType), '']];
                });
            }
        }, {
            key: "datasetAnimationScopeKeys",
            value: function datasetAnimationScopeKeys(datasetType, transition) {
                return cachedKeys("".concat(datasetType, ".transition.").concat(transition), function () {
                    return [["datasets.".concat(datasetType, ".transitions.").concat(transition), "transitions.".concat(transition)], ["datasets.".concat(datasetType), '']];
                });
            }
        }, {
            key: "datasetElementScopeKeys",
            value: function datasetElementScopeKeys(datasetType, elementType) {
                return cachedKeys("".concat(datasetType, "-").concat(elementType), function () {
                    return [["datasets.".concat(datasetType, ".elements.").concat(elementType), "datasets.".concat(datasetType), "elements.".concat(elementType), '']];
                });
            }
        }, {
            key: "pluginScopeKeys",
            value: function pluginScopeKeys(plugin) {
                var id = plugin.id;
                var type = this.type;
                return cachedKeys("".concat(type, "-plugin-").concat(id), function () {
                    return [["plugins.".concat(id)].concat(_toConsumableArray(plugin.additionalOptionScopes || []))];
                });
            }
        }, {
            key: "_cachedScopes",
            value: function _cachedScopes(mainScope, resetCache) {
                var _scopeCache = this._scopeCache;
                var cache = _scopeCache.get(mainScope);
                if (!cache || resetCache) {
                    cache = new Map();
                    _scopeCache.set(mainScope, cache);
                }
                return cache;
            }
        }, {
            key: "getOptionScopes",
            value: function getOptionScopes(mainScope, keyLists, resetCache) {
                var options = this.options,
                    type = this.type;
                var cache = this._cachedScopes(mainScope, resetCache);
                var cached = cache.get(keyLists);
                if (cached) {
                    return cached;
                }
                var scopes = new Set();
                keyLists.forEach(function (keys) {
                    if (mainScope) {
                        scopes.add(mainScope);
                        keys.forEach(function (key) {
                            return addIfFound(scopes, mainScope, key);
                        });
                    }
                    keys.forEach(function (key) {
                        return addIfFound(scopes, options, key);
                    });
                    keys.forEach(function (key) {
                        return addIfFound(scopes, overrides[type] || {}, key);
                    });
                    keys.forEach(function (key) {
                        return addIfFound(scopes, defaults, key);
                    });
                    keys.forEach(function (key) {
                        return addIfFound(scopes, descriptors, key);
                    });
                });
                var array = Array.from(scopes);
                if (array.length === 0) {
                    array.push(Object.create(null));
                }
                if (keysCached.has(keyLists)) {
                    cache.set(keyLists, array);
                }
                return array;
            }
        }, {
            key: "chartOptionScopes",
            value: function chartOptionScopes() {
                var options = this.options,
                    type = this.type;
                return [options, overrides[type] || {}, defaults.datasets[type] || {}, {
                    type: type
                }, defaults, descriptors];
            }
        }, {
            key: "resolveNamedOptions",
            value: function resolveNamedOptions(scopes, names, context) {
                var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];
                var result = {
                    $shared: true
                };
                var _getResolver = getResolver(this._resolverCache, scopes, prefixes),
                    resolver = _getResolver.resolver,
                    subPrefixes = _getResolver.subPrefixes;
                var options = resolver;
                if (needContext(resolver, names)) {
                    result.$shared = false;
                    context = isFunction(context) ? context() : context;
                    var subResolver = this.createResolver(scopes, context, subPrefixes);
                    options = _attachContext(resolver, context, subResolver);
                }
                var _iterator13 = _createForOfIteratorHelper$1(names),
                    _step13;
                try {
                    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                        var prop = _step13.value;
                        result[prop] = options[prop];
                    }
                } catch (err) {
                    _iterator13.e(err);
                } finally {
                    _iterator13.f();
                }
                return result;
            }
        }, {
            key: "createResolver",
            value: function createResolver(scopes, context) {
                var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];
                var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;
                var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),
                    resolver = _getResolver2.resolver;
                return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;
            }
        }]);
        return Config;
    }();
    function getResolver(resolverCache, scopes, prefixes) {
        var cache = resolverCache.get(scopes);
        if (!cache) {
            cache = new Map();
            resolverCache.set(scopes, cache);
        }
        var cacheKey = prefixes.join();
        var cached = cache.get(cacheKey);
        if (!cached) {
            var resolver = _createResolver(scopes, prefixes);
            cached = {
                resolver: resolver,
                subPrefixes: prefixes.filter(function (p) {
                    return !p.toLowerCase().includes('hover');
                })
            };
            cache.set(cacheKey, cached);
        }
        return cached;
    }
    var hasFunction = function hasFunction(value) {
        return isObject(value) && Object.getOwnPropertyNames(value).reduce(function (acc, key) {
            return acc || isFunction(value[key]);
        }, false);
    };
    function needContext(proxy, names) {
        var _descriptors2 = _descriptors(proxy),
            isScriptable = _descriptors2.isScriptable,
            isIndexable = _descriptors2.isIndexable;
        var _iterator14 = _createForOfIteratorHelper$1(names),
            _step14;
        try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var prop = _step14.value;
                var scriptable = isScriptable(prop);
                var indexable = isIndexable(prop);
                var value = (indexable || scriptable) && proxy[prop];
                if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
                    return true;
                }
            }
        } catch (err) {
            _iterator14.e(err);
        } finally {
            _iterator14.f();
        }
        return false;
    }
    var version = "4.2.0";
    var KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];
    function positionIsHorizontal(position, axis) {
        return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
    }
    function compare2Level(l1, l2) {
        return function (a, b) {
            return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
        };
    }
    function onAnimationsComplete(context) {
        var chart = context.chart;
        var animationOptions = chart.options.animation;
        chart.notifyPlugins('afterRender');
        callback(animationOptions && animationOptions.onComplete, [context], chart);
    }
    function onAnimationProgress(context) {
        var chart = context.chart;
        var animationOptions = chart.options.animation;
        callback(animationOptions && animationOptions.onProgress, [context], chart);
    }
    function getCanvas(item) {
        if (_isDomSupported() && typeof item === 'string') {
            item = document.getElementById(item);
        } else if (item && item.length) {
            item = item[0];
        }
        if (item && item.canvas) {
            item = item.canvas;
        }
        return item;
    }
    var instances = {};
    var getChart = function getChart(key) {
        var canvas = getCanvas(key);
        return Object.values(instances).filter(function (c) {
            return c.canvas === canvas;
        }).pop();
    };
    function moveNumericKeys(obj, start, move) {
        var keys = Object.keys(obj);
        for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {
            var key = _keys[_i2];
            var intKey = +key;
            if (intKey >= start) {
                var value = obj[key];
                delete obj[key];
                if (move > 0 || intKey > start) {
                    obj[intKey + move] = value;
                }
            }
        }
    }
    function determineLastEvent(e, lastEvent, inChartArea, isClick) {
        if (!inChartArea || e.type === 'mouseout') {
            return null;
        }
        if (isClick) {
            return lastEvent;
        }
        return e;
    }
    function getDatasetArea(meta) {
        var xScale = meta.xScale,
            yScale = meta.yScale;
        if (xScale && yScale) {
            return {
                left: xScale.left,
                right: xScale.right,
                top: yScale.top,
                bottom: yScale.bottom
            };
        }
    }
    var Chart$1 = /*#__PURE__*/function () {
        function Chart(item, userConfig) {
            var _this12 = this;
            _classCallCheck$x(this, Chart);
            var config = this.config = new Config(userConfig);
            var initialCanvas = getCanvas(item);
            var existingChart = getChart(initialCanvas);
            if (existingChart) {
                throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
            }
            var options = config.createResolver(config.chartOptionScopes(), this.getContext());
            this.platform = new (config.platform || _detectPlatform(initialCanvas))();
            this.platform.updateConfig(config);
            var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
            var canvas = context && context.canvas;
            var height = canvas && canvas.height;
            var width = canvas && canvas.width;
            this.id = uid();
            this.ctx = context;
            this.canvas = canvas;
            this.width = width;
            this.height = height;
            this._options = options;
            this._aspectRatio = this.aspectRatio;
            this._layers = [];
            this._metasets = [];
            this._stacks = undefined;
            this.boxes = [];
            this.currentDevicePixelRatio = undefined;
            this.chartArea = undefined;
            this._active = [];
            this._lastEvent = undefined;
            this._listeners = {};
            this._responsiveListeners = undefined;
            this._sortedMetasets = [];
            this.scales = {};
            this._plugins = new PluginService();
            this.$proxies = {};
            this._hiddenIndices = {};
            this.attached = false;
            this._animationsDisabled = undefined;
            this.$context = undefined;
            this._doResize = debounce(function (mode) {
                return _this12.update(mode);
            }, options.resizeDelay || 0);
            this._dataChanges = [];
            instances[this.id] = this;
            if (!context || !canvas) {
                console.error("Failed to create chart: can't acquire context from the given item");
                return;
            }
            animator.listen(this, 'complete', onAnimationsComplete);
            animator.listen(this, 'progress', onAnimationProgress);
            this._initialize();
            if (this.attached) {
                this.update();
            }
        }
        _createClass$x(Chart, [{
            key: "aspectRatio",
            get: function get() {
                var _this$options12 = this.options,
                    aspectRatio = _this$options12.aspectRatio,
                    maintainAspectRatio = _this$options12.maintainAspectRatio,
                    width = this.width,
                    height = this.height,
                    _aspectRatio = this._aspectRatio;
                if (!isNullOrUndef(aspectRatio)) {
                    return aspectRatio;
                }
                if (maintainAspectRatio && _aspectRatio) {
                    return _aspectRatio;
                }
                return height ? width / height : null;
            }
        }, {
            key: "data",
            get: function get() {
                return this.config.data;
            },
            set: function set(data) {
                this.config.data = data;
            }
        }, {
            key: "options",
            get: function get() {
                return this._options;
            },
            set: function set(options) {
                this.config.options = options;
            }
        }, {
            key: "registry",
            get: function get() {
                return registry;
            }
        }, {
            key: "_initialize",
            value: function _initialize() {
                this.notifyPlugins('beforeInit');
                if (this.options.responsive) {
                    this.resize();
                } else {
                    retinaScale(this, this.options.devicePixelRatio);
                }
                this.bindEvents();
                this.notifyPlugins('afterInit');
                return this;
            }
        }, {
            key: "clear",
            value: function clear() {
                clearCanvas(this.canvas, this.ctx);
                return this;
            }
        }, {
            key: "stop",
            value: function stop() {
                animator.stop(this);
                return this;
            }
        }, {
            key: "resize",
            value: function resize(width, height) {
                if (!animator.running(this)) {
                    this._resize(width, height);
                } else {
                    this._resizeBeforeDraw = {
                        width: width,
                        height: height
                    };
                }
            }
        }, {
            key: "_resize",
            value: function _resize(width, height) {
                var options = this.options;
                var canvas = this.canvas;
                var aspectRatio = options.maintainAspectRatio && this.aspectRatio;
                var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
                var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
                var mode = this.width ? 'resize' : 'attach';
                this.width = newSize.width;
                this.height = newSize.height;
                this._aspectRatio = this.aspectRatio;
                if (!retinaScale(this, newRatio, true)) {
                    return;
                }
                this.notifyPlugins('resize', {
                    size: newSize
                });
                callback(options.onResize, [this, newSize], this);
                if (this.attached) {
                    if (this._doResize(mode)) {
                        this.render();
                    }
                }
            }
        }, {
            key: "ensureScalesHaveIDs",
            value: function ensureScalesHaveIDs() {
                var options = this.options;
                var scalesOptions = options.scales || {};
                each(scalesOptions, function (axisOptions, axisID) {
                    axisOptions.id = axisID;
                });
            }
        }, {
            key: "buildOrUpdateScales",
            value: function buildOrUpdateScales() {
                var _this13 = this;
                var options = this.options;
                var scaleOpts = options.scales;
                var scales = this.scales;
                var updated = Object.keys(scales).reduce(function (obj, id) {
                    obj[id] = false;
                    return obj;
                }, {});
                var items = [];
                if (scaleOpts) {
                    items = items.concat(Object.keys(scaleOpts).map(function (id) {
                        var scaleOptions = scaleOpts[id];
                        var axis = determineAxis(id, scaleOptions);
                        var isRadial = axis === 'r';
                        var isHorizontal = axis === 'x';
                        return {
                            options: scaleOptions,
                            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
                        };
                    }));
                }
                each(items, function (item) {
                    var scaleOptions = item.options;
                    var id = scaleOptions.id;
                    var axis = determineAxis(id, scaleOptions);
                    var scaleType = valueOrDefault(scaleOptions.type, item.dtype);
                    if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
                        scaleOptions.position = item.dposition;
                    }
                    updated[id] = true;
                    var scale = null;
                    if (id in scales && scales[id].type === scaleType) {
                        scale = scales[id];
                    } else {
                        var scaleClass = registry.getScale(scaleType);
                        scale = new scaleClass({
                            id: id,
                            type: scaleType,
                            ctx: _this13.ctx,
                            chart: _this13
                        });
                        scales[scale.id] = scale;
                    }
                    scale.init(scaleOptions, options);
                });
                each(updated, function (hasUpdated, id) {
                    if (!hasUpdated) {
                        delete scales[id];
                    }
                });
                each(scales, function (scale) {
                    layouts.configure(_this13, scale, scale.options);
                    layouts.addBox(_this13, scale);
                });
            }
        }, {
            key: "_updateMetasets",
            value: function _updateMetasets() {
                var metasets = this._metasets;
                var numData = this.data.datasets.length;
                var numMeta = metasets.length;
                metasets.sort(function (a, b) {
                    return a.index - b.index;
                });
                if (numMeta > numData) {
                    for (var i = numData; i < numMeta; ++i) {
                        this._destroyDatasetMeta(i);
                    }
                    metasets.splice(numData, numMeta - numData);
                }
                this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
            }
        }, {
            key: "_removeUnreferencedMetasets",
            value: function _removeUnreferencedMetasets() {
                var _this14 = this;
                var metasets = this._metasets,
                    datasets = this.data.datasets;
                if (metasets.length > datasets.length) {
                    delete this._stacks;
                }
                metasets.forEach(function (meta, index) {
                    if (datasets.filter(function (x) {
                        return x === meta._dataset;
                    }).length === 0) {
                        _this14._destroyDatasetMeta(index);
                    }
                });
            }
        }, {
            key: "buildOrUpdateControllers",
            value: function buildOrUpdateControllers() {
                var newControllers = [];
                var datasets = this.data.datasets;
                var i, ilen;
                this._removeUnreferencedMetasets();
                for (i = 0, ilen = datasets.length; i < ilen; i++) {
                    var dataset = datasets[i];
                    var meta = this.getDatasetMeta(i);
                    var type = dataset.type || this.config.type;
                    if (meta.type && meta.type !== type) {
                        this._destroyDatasetMeta(i);
                        meta = this.getDatasetMeta(i);
                    }
                    meta.type = type;
                    meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
                    meta.order = dataset.order || 0;
                    meta.index = i;
                    meta.label = '' + dataset.label;
                    meta.visible = this.isDatasetVisible(i);
                    if (meta.controller) {
                        meta.controller.updateIndex(i);
                        meta.controller.linkScales();
                    } else {
                        var ControllerClass = registry.getController(type);
                        var _defaults$datasets$ty = defaults.datasets[type],
                            datasetElementType = _defaults$datasets$ty.datasetElementType,
                            dataElementType = _defaults$datasets$ty.dataElementType;
                        Object.assign(ControllerClass, {
                            dataElementType: registry.getElement(dataElementType),
                            datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                        });
                        meta.controller = new ControllerClass(this, i);
                        newControllers.push(meta.controller);
                    }
                }
                this._updateMetasets();
                return newControllers;
            }
        }, {
            key: "_resetElements",
            value: function _resetElements() {
                var _this15 = this;
                each(this.data.datasets, function (dataset, datasetIndex) {
                    _this15.getDatasetMeta(datasetIndex).controller.reset();
                }, this);
            }
        }, {
            key: "reset",
            value: function reset() {
                this._resetElements();
                this.notifyPlugins('reset');
            }
        }, {
            key: "update",
            value: function update(mode) {
                var config = this.config;
                config.update();
                var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
                var animsDisabled = this._animationsDisabled = !options.animation;
                this._updateScales();
                this._checkEventBindings();
                this._updateHiddenIndices();
                this._plugins.invalidate();
                if (this.notifyPlugins('beforeUpdate', {
                    mode: mode,
                    cancelable: true
                }) === false) {
                    return;
                }
                var newControllers = this.buildOrUpdateControllers();
                this.notifyPlugins('beforeElementsUpdate');
                var minPadding = 0;
                for (var i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
                    var _this$getDatasetMeta = this.getDatasetMeta(i),
                        controller = _this$getDatasetMeta.controller;
                    var reset = !animsDisabled && newControllers.indexOf(controller) === -1;
                    controller.buildOrUpdateElements(reset);
                    minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
                }
                minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
                this._updateLayout(minPadding);
                if (!animsDisabled) {
                    each(newControllers, function (controller) {
                        controller.reset();
                    });
                }
                this._updateDatasets(mode);
                this.notifyPlugins('afterUpdate', {
                    mode: mode
                });
                this._layers.sort(compare2Level('z', '_idx'));
                var _active = this._active,
                    _lastEvent = this._lastEvent;
                if (_lastEvent) {
                    this._eventHandler(_lastEvent, true);
                } else if (_active.length) {
                    this._updateHoverStyles(_active, _active, true);
                }
                this.render();
            }
        }, {
            key: "_updateScales",
            value: function _updateScales() {
                var _this16 = this;
                each(this.scales, function (scale) {
                    layouts.removeBox(_this16, scale);
                });
                this.ensureScalesHaveIDs();
                this.buildOrUpdateScales();
            }
        }, {
            key: "_checkEventBindings",
            value: function _checkEventBindings() {
                var options = this.options;
                var existingEvents = new Set(Object.keys(this._listeners));
                var newEvents = new Set(options.events);
                if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
                    this.unbindEvents();
                    this.bindEvents();
                }
            }
        }, {
            key: "_updateHiddenIndices",
            value: function _updateHiddenIndices() {
                var _hiddenIndices = this._hiddenIndices;
                var changes = this._getUniformDataChanges() || [];
                var _iterator15 = _createForOfIteratorHelper$1(changes),
                    _step15;
                try {
                    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                        var _step15$value = _step15.value,
                            method = _step15$value.method,
                            start = _step15$value.start,
                            count = _step15$value.count;
                        var move = method === '_removeElements' ? -count : count;
                        moveNumericKeys(_hiddenIndices, start, move);
                    }
                } catch (err) {
                    _iterator15.e(err);
                } finally {
                    _iterator15.f();
                }
            }
        }, {
            key: "_getUniformDataChanges",
            value: function _getUniformDataChanges() {
                var _dataChanges = this._dataChanges;
                if (!_dataChanges || !_dataChanges.length) {
                    return;
                }
                this._dataChanges = [];
                var datasetCount = this.data.datasets.length;
                var makeSet = function makeSet(idx) {
                    return new Set(_dataChanges.filter(function (c) {
                        return c[0] === idx;
                    }).map(function (c, i) {
                        return i + ',' + c.splice(1).join(',');
                    }));
                };
                var changeSet = makeSet(0);
                for (var i = 1; i < datasetCount; i++) {
                    if (!setsEqual(changeSet, makeSet(i))) {
                        return;
                    }
                }
                return Array.from(changeSet).map(function (c) {
                    return c.split(',');
                }).map(function (a) {
                    return {
                        method: a[1],
                        start: +a[2],
                        count: +a[3]
                    };
                });
            }
        }, {
            key: "_updateLayout",
            value: function _updateLayout(minPadding) {
                var _this17 = this;
                if (this.notifyPlugins('beforeLayout', {
                    cancelable: true
                }) === false) {
                    return;
                }
                layouts.update(this, this.width, this.height, minPadding);
                var area = this.chartArea;
                var noArea = area.width <= 0 || area.height <= 0;
                this._layers = [];
                each(this.boxes, function (box) {
                    var _this17$_layers;
                    if (noArea && box.position === 'chartArea') {
                        return;
                    }
                    if (box.configure) {
                        box.configure();
                    }
                    (_this17$_layers = _this17._layers).push.apply(_this17$_layers, _toConsumableArray(box._layers()));
                }, this);
                this._layers.forEach(function (item, index) {
                    item._idx = index;
                });
                this.notifyPlugins('afterLayout');
            }
        }, {
            key: "_updateDatasets",
            value: function _updateDatasets(mode) {
                if (this.notifyPlugins('beforeDatasetsUpdate', {
                    mode: mode,
                    cancelable: true
                }) === false) {
                    return;
                }
                for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                    this.getDatasetMeta(i).controller.configure();
                }
                for (var i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {
                    this._updateDataset(i1, isFunction(mode) ? mode({
                        datasetIndex: i1
                    }) : mode);
                }
                this.notifyPlugins('afterDatasetsUpdate', {
                    mode: mode
                });
            }
        }, {
            key: "_updateDataset",
            value: function _updateDataset(index, mode) {
                var meta = this.getDatasetMeta(index);
                var args = {
                    meta: meta,
                    index: index,
                    mode: mode,
                    cancelable: true
                };
                if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
                    return;
                }
                meta.controller._update(mode);
                args.cancelable = false;
                this.notifyPlugins('afterDatasetUpdate', args);
            }
        }, {
            key: "render",
            value: function render() {
                if (this.notifyPlugins('beforeRender', {
                    cancelable: true
                }) === false) {
                    return;
                }
                if (animator.has(this)) {
                    if (this.attached && !animator.running(this)) {
                        animator.start(this);
                    }
                } else {
                    this.draw();
                    onAnimationsComplete({
                        chart: this
                    });
                }
            }
        }, {
            key: "draw",
            value: function draw() {
                var i;
                if (this._resizeBeforeDraw) {
                    var _this$_resizeBeforeDr = this._resizeBeforeDraw,
                        width = _this$_resizeBeforeDr.width,
                        height = _this$_resizeBeforeDr.height;
                    this._resize(width, height);
                    this._resizeBeforeDraw = null;
                }
                this.clear();
                if (this.width <= 0 || this.height <= 0) {
                    return;
                }
                if (this.notifyPlugins('beforeDraw', {
                    cancelable: true
                }) === false) {
                    return;
                }
                var layers = this._layers;
                for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
                    layers[i].draw(this.chartArea);
                }
                this._drawDatasets();
                for (; i < layers.length; ++i) {
                    layers[i].draw(this.chartArea);
                }
                this.notifyPlugins('afterDraw');
            }
        }, {
            key: "_getSortedDatasetMetas",
            value: function _getSortedDatasetMetas(filterVisible) {
                var metasets = this._sortedMetasets;
                var result = [];
                var i, ilen;
                for (i = 0, ilen = metasets.length; i < ilen; ++i) {
                    var meta = metasets[i];
                    if (!filterVisible || meta.visible) {
                        result.push(meta);
                    }
                }
                return result;
            }
        }, {
            key: "getSortedVisibleDatasetMetas",
            value: function getSortedVisibleDatasetMetas() {
                return this._getSortedDatasetMetas(true);
            }
        }, {
            key: "_drawDatasets",
            value: function _drawDatasets() {
                if (this.notifyPlugins('beforeDatasetsDraw', {
                    cancelable: true
                }) === false) {
                    return;
                }
                var metasets = this.getSortedVisibleDatasetMetas();
                for (var i = metasets.length - 1; i >= 0; --i) {
                    this._drawDataset(metasets[i]);
                }
                this.notifyPlugins('afterDatasetsDraw');
            }
        }, {
            key: "_drawDataset",
            value: function _drawDataset(meta) {
                var ctx = this.ctx;
                var clip = meta._clip;
                var useClip = !clip.disabled;
                var area = getDatasetArea(meta) || this.chartArea;
                var args = {
                    meta: meta,
                    index: meta.index,
                    cancelable: true
                };
                if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
                    return;
                }
                if (useClip) {
                    clipArea(ctx, {
                        left: clip.left === false ? 0 : area.left - clip.left,
                        right: clip.right === false ? this.width : area.right + clip.right,
                        top: clip.top === false ? 0 : area.top - clip.top,
                        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
                    });
                }
                meta.controller.draw();
                if (useClip) {
                    unclipArea(ctx);
                }
                args.cancelable = false;
                this.notifyPlugins('afterDatasetDraw', args);
            }
        }, {
            key: "isPointInArea",
            value: function isPointInArea(point) {
                return _isPointInArea(point, this.chartArea, this._minPadding);
            }
        }, {
            key: "getElementsAtEventForMode",
            value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {
                var method = Interaction.modes[mode];
                if (typeof method === 'function') {
                    return method(this, e, options, useFinalPosition);
                }
                return [];
            }
        }, {
            key: "getDatasetMeta",
            value: function getDatasetMeta(datasetIndex) {
                var dataset = this.data.datasets[datasetIndex];
                var metasets = this._metasets;
                var meta = metasets.filter(function (x) {
                    return x && x._dataset === dataset;
                }).pop();
                if (!meta) {
                    meta = {
                        type: null,
                        data: [],
                        dataset: null,
                        controller: null,
                        hidden: null,
                        xAxisID: null,
                        yAxisID: null,
                        order: dataset && dataset.order || 0,
                        index: datasetIndex,
                        _dataset: dataset,
                        _parsed: [],
                        _sorted: false
                    };
                    metasets.push(meta);
                }
                return meta;
            }
        }, {
            key: "getContext",
            value: function getContext() {
                return this.$context || (this.$context = createContext(null, {
                    chart: this,
                    type: 'chart'
                }));
            }
        }, {
            key: "getVisibleDatasetCount",
            value: function getVisibleDatasetCount() {
                return this.getSortedVisibleDatasetMetas().length;
            }
        }, {
            key: "isDatasetVisible",
            value: function isDatasetVisible(datasetIndex) {
                var dataset = this.data.datasets[datasetIndex];
                if (!dataset) {
                    return false;
                }
                var meta = this.getDatasetMeta(datasetIndex);
                return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
            }
        }, {
            key: "setDatasetVisibility",
            value: function setDatasetVisibility(datasetIndex, visible) {
                var meta = this.getDatasetMeta(datasetIndex);
                meta.hidden = !visible;
            }
        }, {
            key: "toggleDataVisibility",
            value: function toggleDataVisibility(index) {
                this._hiddenIndices[index] = !this._hiddenIndices[index];
            }
        }, {
            key: "getDataVisibility",
            value: function getDataVisibility(index) {
                return !this._hiddenIndices[index];
            }
        }, {
            key: "_updateVisibility",
            value: function _updateVisibility(datasetIndex, dataIndex, visible) {
                var mode = visible ? 'show' : 'hide';
                var meta = this.getDatasetMeta(datasetIndex);
                var anims = meta.controller._resolveAnimations(undefined, mode);
                if (defined(dataIndex)) {
                    meta.data[dataIndex].hidden = !visible;
                    this.update();
                } else {
                    this.setDatasetVisibility(datasetIndex, visible);
                    anims.update(meta, {
                        visible: visible
                    });
                    this.update(function (ctx) {
                        return ctx.datasetIndex === datasetIndex ? mode : undefined;
                    });
                }
            }
        }, {
            key: "hide",
            value: function hide(datasetIndex, dataIndex) {
                this._updateVisibility(datasetIndex, dataIndex, false);
            }
        }, {
            key: "show",
            value: function show(datasetIndex, dataIndex) {
                this._updateVisibility(datasetIndex, dataIndex, true);
            }
        }, {
            key: "_destroyDatasetMeta",
            value: function _destroyDatasetMeta(datasetIndex) {
                var meta = this._metasets[datasetIndex];
                if (meta && meta.controller) {
                    meta.controller._destroy();
                }
                delete this._metasets[datasetIndex];
            }
        }, {
            key: "_stop",
            value: function _stop() {
                var i, ilen;
                this.stop();
                animator.remove(this);
                for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                    this._destroyDatasetMeta(i);
                }
            }
        }, {
            key: "destroy",
            value: function destroy() {
                this.notifyPlugins('beforeDestroy');
                var canvas = this.canvas,
                    ctx = this.ctx;
                this._stop();
                this.config.clearCache();
                if (canvas) {
                    this.unbindEvents();
                    clearCanvas(canvas, ctx);
                    this.platform.releaseContext(ctx);
                    this.canvas = null;
                    this.ctx = null;
                }
                delete instances[this.id];
                this.notifyPlugins('afterDestroy');
            }
        }, {
            key: "toBase64Image",
            value: function toBase64Image() {
                var _this$canvas;
                return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);
            }
        }, {
            key: "bindEvents",
            value: function bindEvents() {
                this.bindUserEvents();
                if (this.options.responsive) {
                    this.bindResponsiveEvents();
                } else {
                    this.attached = true;
                }
            }
        }, {
            key: "bindUserEvents",
            value: function bindUserEvents() {
                var _this18 = this;
                var listeners = this._listeners;
                var platform = this.platform;
                var _add = function _add(type, listener) {
                    platform.addEventListener(_this18, type, listener);
                    listeners[type] = listener;
                };
                var listener = function listener(e, x, y) {
                    e.offsetX = x;
                    e.offsetY = y;
                    _this18._eventHandler(e);
                };
                each(this.options.events, function (type) {
                    return _add(type, listener);
                });
            }
        }, {
            key: "bindResponsiveEvents",
            value: function bindResponsiveEvents() {
                var _this19 = this;
                if (!this._responsiveListeners) {
                    this._responsiveListeners = {};
                }
                var listeners = this._responsiveListeners;
                var platform = this.platform;
                var _add = function _add(type, listener) {
                    platform.addEventListener(_this19, type, listener);
                    listeners[type] = listener;
                };
                var _remove = function _remove(type, listener) {
                    if (listeners[type]) {
                        platform.removeEventListener(_this19, type, listener);
                        delete listeners[type];
                    }
                };
                var listener = function listener(width, height) {
                    if (_this19.canvas) {
                        _this19.resize(width, height);
                    }
                };
                var detached;
                var attached = function attached() {
                    _remove('attach', attached);
                    _this19.attached = true;
                    _this19.resize();
                    _add('resize', listener);
                    _add('detach', detached);
                };
                detached = function detached() {
                    _this19.attached = false;
                    _remove('resize', listener);
                    _this19._stop();
                    _this19._resize(0, 0);
                    _add('attach', attached);
                };
                if (platform.isAttached(this.canvas)) {
                    attached();
                } else {
                    detached();
                }
            }
        }, {
            key: "unbindEvents",
            value: function unbindEvents() {
                var _this20 = this;
                each(this._listeners, function (listener, type) {
                    _this20.platform.removeEventListener(_this20, type, listener);
                });
                this._listeners = {};
                each(this._responsiveListeners, function (listener, type) {
                    _this20.platform.removeEventListener(_this20, type, listener);
                });
                this._responsiveListeners = undefined;
            }
        }, {
            key: "updateHoverStyle",
            value: function updateHoverStyle(items, mode, enabled) {
                var prefix = enabled ? 'set' : 'remove';
                var meta, item, i, ilen;
                if (mode === 'dataset') {
                    meta = this.getDatasetMeta(items[0].datasetIndex);
                    meta.controller['_' + prefix + 'DatasetHoverStyle']();
                }
                for (i = 0, ilen = items.length; i < ilen; ++i) {
                    item = items[i];
                    var controller = item && this.getDatasetMeta(item.datasetIndex).controller;
                    if (controller) {
                        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
                    }
                }
            }
        }, {
            key: "getActiveElements",
            value: function getActiveElements() {
                return this._active || [];
            }
        }, {
            key: "setActiveElements",
            value: function setActiveElements(activeElements) {
                var _this21 = this;
                var lastActive = this._active || [];
                var active = activeElements.map(function (_ref4) {
                    var datasetIndex = _ref4.datasetIndex,
                        index = _ref4.index;
                    var meta = _this21.getDatasetMeta(datasetIndex);
                    if (!meta) {
                        throw new Error('No dataset found at index ' + datasetIndex);
                    }
                    return {
                        datasetIndex: datasetIndex,
                        element: meta.data[index],
                        index: index
                    };
                });
                var changed = !_elementsEqual(active, lastActive);
                if (changed) {
                    this._active = active;
                    this._lastEvent = null;
                    this._updateHoverStyles(active, lastActive);
                }
            }
        }, {
            key: "notifyPlugins",
            value: function notifyPlugins(hook, args, filter) {
                return this._plugins.notify(this, hook, args, filter);
            }
        }, {
            key: "isPluginEnabled",
            value: function isPluginEnabled(pluginId) {
                return this._plugins._cache.filter(function (p) {
                    return p.plugin.id === pluginId;
                }).length === 1;
            }
        }, {
            key: "_updateHoverStyles",
            value: function _updateHoverStyles(active, lastActive, replay) {
                var hoverOptions = this.options.hover;
                var diff = function diff(a, b) {
                    return a.filter(function (x) {
                        return !b.some(function (y) {
                            return x.datasetIndex === y.datasetIndex && x.index === y.index;
                        });
                    });
                };
                var deactivated = diff(lastActive, active);
                var activated = replay ? active : diff(active, lastActive);
                if (deactivated.length) {
                    this.updateHoverStyle(deactivated, hoverOptions.mode, false);
                }
                if (activated.length && hoverOptions.mode) {
                    this.updateHoverStyle(activated, hoverOptions.mode, true);
                }
            }
        }, {
            key: "_eventHandler",
            value: function _eventHandler(e, replay) {
                var _this22 = this;
                var args = {
                    event: e,
                    replay: replay,
                    cancelable: true,
                    inChartArea: this.isPointInArea(e)
                };
                var eventFilter = function eventFilter(plugin) {
                    return (plugin.options.events || _this22.options.events).includes(e["native"].type);
                };
                if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
                    return;
                }
                var changed = this._handleEvent(e, replay, args.inChartArea);
                args.cancelable = false;
                this.notifyPlugins('afterEvent', args, eventFilter);
                if (changed || args.changed) {
                    this.render();
                }
                return this;
            }
        }, {
            key: "_handleEvent",
            value: function _handleEvent(e, replay, inChartArea) {
                var _this$_active = this._active,
                    lastActive = _this$_active === void 0 ? [] : _this$_active,
                    options = this.options;
                var useFinalPosition = replay;
                var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
                var isClick = _isClickEvent(e);
                var lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
                if (inChartArea) {
                    this._lastEvent = null;
                    callback(options.onHover, [e, active, this], this);
                    if (isClick) {
                        callback(options.onClick, [e, active, this], this);
                    }
                }
                var changed = !_elementsEqual(active, lastActive);
                if (changed || replay) {
                    this._active = active;
                    this._updateHoverStyles(active, lastActive, replay);
                }
                this._lastEvent = lastEvent;
                return changed;
            }
        }, {
            key: "_getActiveElements",
            value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
                if (e.type === 'mouseout') {
                    return [];
                }
                if (!inChartArea) {
                    return lastActive;
                }
                var hoverOptions = this.options.hover;
                return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
            }
        }], [{
            key: "register",
            value: function register() {
                registry.add.apply(registry, arguments);
                invalidatePlugins();
            }
        }, {
            key: "unregister",
            value: function unregister() {
                registry.remove.apply(registry, arguments);
                invalidatePlugins();
            }
        }]);
        return Chart;
    }();
    _defineProperty$w(Chart$1, "defaults", defaults);
    _defineProperty$w(Chart$1, "instances", instances);
    _defineProperty$w(Chart$1, "overrides", overrides);
    _defineProperty$w(Chart$1, "registry", registry);
    _defineProperty$w(Chart$1, "version", version);
    _defineProperty$w(Chart$1, "getChart", getChart);
    function invalidatePlugins() {
        return each(Chart$1.instances, function (chart) {
            return chart._plugins.invalidate();
        });
    }
    function clipArc(ctx, element, endAngle) {
        var startAngle = element.startAngle,
            pixelMargin = element.pixelMargin,
            x = element.x,
            y = element.y,
            outerRadius = element.outerRadius,
            innerRadius = element.innerRadius;
        var angleMargin = pixelMargin / outerRadius;
        // Draw an inner border by clipping the arc and drawing a double-width border
        // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
        ctx.beginPath();
        ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
        if (innerRadius > pixelMargin) {
            angleMargin = pixelMargin / innerRadius;
            ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
        } else {
            ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
        }
        ctx.closePath();
        ctx.clip();
    }
    function toRadiusCorners(value) {
        return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
    }
    /**
     * Parse border radius from the provided options
     */
    function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
        var o = toRadiusCorners(arc.options.borderRadius);
        var halfThickness = (outerRadius - innerRadius) / 2;
        var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
        // Outer limits are complicated. We want to compute the available angular distance at
        // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
        // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
        //
        // If the borderRadius is large, that value can become negative.
        // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
        // we know that the thickness term will dominate and compute the limits at that point
        var computeOuterLimit = function computeOuterLimit(val) {
            var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
            return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
        };
        return {
            outerStart: computeOuterLimit(o.outerStart),
            outerEnd: computeOuterLimit(o.outerEnd),
            innerStart: _limitValue(o.innerStart, 0, innerLimit),
            innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
        };
    }
    /**
     * Convert (r, 𝜃) to (x, y)
     */
    function rThetaToXY(r, theta, x, y) {
        return {
            x: x + r * Math.cos(theta),
            y: y + r * Math.sin(theta)
        };
    }
    /**
     * Path the arc, respecting border radius by separating into left and right halves.
     *
     *   Start      End
     *
     *    1--->a--->2    Outer
     *   /           \
     *   8           3
     *   |           |
     *   |           |
     *   7           4
     *   \           /
     *    6<---b<---5    Inner
     */
    function pathArc(ctx, element, offset, spacing, end, circular) {
        var x = element.x,
            y = element.y,
            start = element.startAngle,
            pixelMargin = element.pixelMargin,
            innerR = element.innerRadius;
        var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
        var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
        var spacingOffset = 0;
        var alpha = end - start;
        if (spacing) {
            // When spacing is present, it is the same for all items
            // So we adjust the start and end angle of the arc such that
            // the distance is the same as it would be without the spacing
            var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
            var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
            var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
            var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
            spacingOffset = (alpha - adjustedAngle) / 2;
        }
        var beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;
        var angleOffset = (alpha - beta) / 2;
        var startAngle = start + angleOffset + spacingOffset;
        var endAngle = end - angleOffset - spacingOffset;
        var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),
            outerStart = _parseBorderRadius$.outerStart,
            outerEnd = _parseBorderRadius$.outerEnd,
            innerStart = _parseBorderRadius$.innerStart,
            innerEnd = _parseBorderRadius$.innerEnd;
        var outerStartAdjustedRadius = outerRadius - outerStart;
        var outerEndAdjustedRadius = outerRadius - outerEnd;
        var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
        var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
        var innerStartAdjustedRadius = innerRadius + innerStart;
        var innerEndAdjustedRadius = innerRadius + innerEnd;
        var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
        var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
        ctx.beginPath();
        if (circular) {
            // The first arc segments from point 1 to point a to point 2
            var outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
            ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
            ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
            // The corner segment from point 2 to point 3
            if (outerEnd > 0) {
                var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
                ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
            }
            // The line from point 3 to point 4
            var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
            ctx.lineTo(p4.x, p4.y);
            // The corner segment from point 4 to point 5
            if (innerEnd > 0) {
                var pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
                ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
            }
            // The inner arc from point 5 to point b to point 6
            var innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
            ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
            ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
            // The corner segment from point 6 to point 7
            if (innerStart > 0) {
                var pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
                ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
            }
            // The line from point 7 to point 8
            var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
            ctx.lineTo(p8.x, p8.y);
            // The corner segment from point 8 to point 1
            if (outerStart > 0) {
                var pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
                ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
            }
        } else {
            ctx.moveTo(x, y);
            var outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
            var outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
            ctx.lineTo(outerStartX, outerStartY);
            var outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
            var outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
            ctx.lineTo(outerEndX, outerEndY);
        }
        ctx.closePath();
    }
    function drawArc(ctx, element, offset, spacing, circular) {
        var fullCircles = element.fullCircles,
            startAngle = element.startAngle,
            circumference = element.circumference;
        var endAngle = element.endAngle;
        if (fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            for (var i = 0; i < fullCircles; ++i) {
                ctx.fill();
            }
            if (!isNaN(circumference)) {
                endAngle = startAngle + (circumference % TAU || TAU);
            }
        }
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.fill();
        return endAngle;
    }
    function drawBorder(ctx, element, offset, spacing, circular) {
        var fullCircles = element.fullCircles,
            startAngle = element.startAngle,
            circumference = element.circumference,
            options = element.options;
        var borderWidth = options.borderWidth,
            borderJoinStyle = options.borderJoinStyle;
        var inner = options.borderAlign === 'inner';
        if (!borderWidth) {
            return;
        }
        if (inner) {
            ctx.lineWidth = borderWidth * 2;
            ctx.lineJoin = borderJoinStyle || 'round';
        } else {
            ctx.lineWidth = borderWidth;
            ctx.lineJoin = borderJoinStyle || 'bevel';
        }
        var endAngle = element.endAngle;
        if (fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            for (var i = 0; i < fullCircles; ++i) {
                ctx.stroke();
            }
            if (!isNaN(circumference)) {
                endAngle = startAngle + (circumference % TAU || TAU);
            }
        }
        if (inner) {
            clipArc(ctx, element, endAngle);
        }
        if (!fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            ctx.stroke();
        }
    }
    var ArcElement = /*#__PURE__*/function (_Element2) {
        _inherits$w(ArcElement, _Element2);
        var _super12 = _createSuper$w(ArcElement);
        function ArcElement(cfg) {
            var _this23;
            _classCallCheck$x(this, ArcElement);
            _this23 = _super12.call(this);
            _this23.options = undefined;
            _this23.circumference = undefined;
            _this23.startAngle = undefined;
            _this23.endAngle = undefined;
            _this23.innerRadius = undefined;
            _this23.outerRadius = undefined;
            _this23.pixelMargin = 0;
            _this23.fullCircles = 0;
            if (cfg) {
                Object.assign(_assertThisInitialized$w(_this23), cfg);
            }
            return _this23;
        }
        _createClass$x(ArcElement, [{
            key: "inRange",
            value: function inRange(chartX, chartY, useFinalPosition) {
                var point = this.getProps(['x', 'y'], useFinalPosition);
                var _getAngleFromPoint2 = getAngleFromPoint(point, {
                        x: chartX,
                        y: chartY
                    }),
                    angle = _getAngleFromPoint2.angle,
                    distance = _getAngleFromPoint2.distance;
                var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),
                    startAngle = _this$getProps2.startAngle,
                    endAngle = _this$getProps2.endAngle,
                    innerRadius = _this$getProps2.innerRadius,
                    outerRadius = _this$getProps2.outerRadius,
                    circumference = _this$getProps2.circumference;
                var rAdjust = this.options.spacing / 2;
                var _circumference = valueOrDefault(circumference, endAngle - startAngle);
                var betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
                var withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
                return betweenAngles && withinRadius;
            }
        }, {
            key: "getCenterPoint",
            value: function getCenterPoint(useFinalPosition) {
                var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),
                    x = _this$getProps3.x,
                    y = _this$getProps3.y,
                    startAngle = _this$getProps3.startAngle,
                    endAngle = _this$getProps3.endAngle,
                    innerRadius = _this$getProps3.innerRadius,
                    outerRadius = _this$getProps3.outerRadius;
                var _this$options13 = this.options,
                    offset = _this$options13.offset,
                    spacing = _this$options13.spacing;
                var halfAngle = (startAngle + endAngle) / 2;
                var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
                return {
                    x: x + Math.cos(halfAngle) * halfRadius,
                    y: y + Math.sin(halfAngle) * halfRadius
                };
            }
        }, {
            key: "tooltipPosition",
            value: function tooltipPosition(useFinalPosition) {
                return this.getCenterPoint(useFinalPosition);
            }
        }, {
            key: "draw",
            value: function draw(ctx) {
                var options = this.options,
                    circumference = this.circumference;
                var offset = (options.offset || 0) / 4;
                var spacing = (options.spacing || 0) / 2;
                var circular = options.circular;
                this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
                this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
                if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
                    return;
                }
                ctx.save();
                var halfAngle = (this.startAngle + this.endAngle) / 2;
                ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
                var fix = 1 - Math.sin(Math.min(PI, circumference || 0));
                var radiusOffset = offset * fix;
                ctx.fillStyle = options.backgroundColor;
                ctx.strokeStyle = options.borderColor;
                drawArc(ctx, this, radiusOffset, spacing, circular);
                drawBorder(ctx, this, radiusOffset, spacing, circular);
                ctx.restore();
            }
        }]);
        return ArcElement;
    }(Element);
    _defineProperty$w(ArcElement, "id", 'arc');
    _defineProperty$w(ArcElement, "defaults", {
        borderAlign: 'center',
        borderColor: '#fff',
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
    });
    _defineProperty$w(ArcElement, "defaultRoutes", {
        backgroundColor: 'backgroundColor'
    });
    function setStyle(ctx, options) {
        var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;
        ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
        ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
        ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
        ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
        ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
        ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
    }
    function lineTo(ctx, previous, target) {
        ctx.lineTo(target.x, target.y);
    }
    function getLineMethod(options) {
        if (options.stepped) {
            return _steppedLineTo;
        }
        if (options.tension || options.cubicInterpolationMode === 'monotone') {
            return _bezierCurveTo;
        }
        return lineTo;
    }
    function pathVars(points, segment) {
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var count = points.length;
        var _params$start = params.start,
            paramsStart = _params$start === void 0 ? 0 : _params$start,
            _params$end = params.end,
            paramsEnd = _params$end === void 0 ? count - 1 : _params$end;
        var segmentStart = segment.start,
            segmentEnd = segment.end;
        var start = Math.max(paramsStart, segmentStart);
        var end = Math.min(paramsEnd, segmentEnd);
        var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
        return {
            count: count,
            start: start,
            loop: segment.loop,
            ilen: end < start && !outside ? count + end - start : end - start
        };
    }
    function pathSegment(ctx, line, segment, params) {
        var points = line.points,
            options = line.options;
        var _pathVars = pathVars(points, segment, params),
            count = _pathVars.count,
            start = _pathVars.start,
            loop = _pathVars.loop,
            ilen = _pathVars.ilen;
        var lineMethod = getLineMethod(options);
        var _ref5 = params || {},
            _ref5$move = _ref5.move,
            move = _ref5$move === void 0 ? true : _ref5$move,
            reverse = _ref5.reverse;
        var i, point, prev;
        for (i = 0; i <= ilen; ++i) {
            point = points[(start + (reverse ? ilen - i : i)) % count];
            if (point.skip) {
                continue;
            } else if (move) {
                ctx.moveTo(point.x, point.y);
                move = false;
            } else {
                lineMethod(ctx, prev, point, reverse, options.stepped);
            }
            prev = point;
        }
        if (loop) {
            point = points[(start + (reverse ? ilen : 0)) % count];
            lineMethod(ctx, prev, point, reverse, options.stepped);
        }
        return !!loop;
    }
    function fastPathSegment(ctx, line, segment, params) {
        var points = line.points;
        var _pathVars2 = pathVars(points, segment, params),
            count = _pathVars2.count,
            start = _pathVars2.start,
            ilen = _pathVars2.ilen;
        var _ref6 = params || {},
            _ref6$move = _ref6.move,
            move = _ref6$move === void 0 ? true : _ref6$move,
            reverse = _ref6.reverse;
        var avgX = 0;
        var countX = 0;
        var i, point, prevX, minY, maxY, lastY;
        var pointIndex = function pointIndex(index) {
            return (start + (reverse ? ilen - index : index)) % count;
        };
        var drawX = function drawX() {
            if (minY !== maxY) {
                ctx.lineTo(avgX, maxY);
                ctx.lineTo(avgX, minY);
                ctx.lineTo(avgX, lastY);
            }
        };
        if (move) {
            point = points[pointIndex(0)];
            ctx.moveTo(point.x, point.y);
        }
        for (i = 0; i <= ilen; ++i) {
            point = points[pointIndex(i)];
            if (point.skip) {
                continue;
            }
            var x = point.x;
            var y = point.y;
            var truncX = x | 0;
            if (truncX === prevX) {
                if (y < minY) {
                    minY = y;
                } else if (y > maxY) {
                    maxY = y;
                }
                avgX = (countX * avgX + x) / ++countX;
            } else {
                drawX();
                ctx.lineTo(x, y);
                prevX = truncX;
                countX = 0;
                minY = maxY = y;
            }
            lastY = y;
        }
        drawX();
    }
    function _getSegmentMethod(line) {
        var opts = line.options;
        var borderDash = opts.borderDash && opts.borderDash.length;
        var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
        return useFastPath ? fastPathSegment : pathSegment;
    }
    function _getInterpolationMethod(options) {
        if (options.stepped) {
            return _steppedInterpolation;
        }
        if (options.tension || options.cubicInterpolationMode === 'monotone') {
            return _bezierInterpolation;
        }
        return _pointInLine;
    }
    function strokePathWithCache(ctx, line, start, count) {
        var path = line._path;
        if (!path) {
            path = line._path = new Path2D();
            if (line.path(path, start, count)) {
                path.closePath();
            }
        }
        setStyle(ctx, line.options);
        ctx.stroke(path);
    }
    function strokePathDirect(ctx, line, start, count) {
        var segments = line.segments,
            options = line.options;
        var segmentMethod = _getSegmentMethod(line);
        var _iterator16 = _createForOfIteratorHelper$1(segments),
            _step16;
        try {
            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var segment = _step16.value;
                setStyle(ctx, options, segment.style);
                ctx.beginPath();
                if (segmentMethod(ctx, line, segment, {
                    start: start,
                    end: start + count - 1
                })) {
                    ctx.closePath();
                }
                ctx.stroke();
            }
        } catch (err) {
            _iterator16.e(err);
        } finally {
            _iterator16.f();
        }
    }
    var usePath2D = typeof Path2D === 'function';
    function _draw(ctx, line, start, count) {
        if (usePath2D && !line.options.segment) {
            strokePathWithCache(ctx, line, start, count);
        } else {
            strokePathDirect(ctx, line, start, count);
        }
    }
    var LineElement = /*#__PURE__*/function (_Element3) {
        _inherits$w(LineElement, _Element3);
        var _super13 = _createSuper$w(LineElement);
        function LineElement(cfg) {
            var _this24;
            _classCallCheck$x(this, LineElement);
            _this24 = _super13.call(this);
            _this24.animated = true;
            _this24.options = undefined;
            _this24._chart = undefined;
            _this24._loop = undefined;
            _this24._fullLoop = undefined;
            _this24._path = undefined;
            _this24._points = undefined;
            _this24._segments = undefined;
            _this24._decimated = false;
            _this24._pointsUpdated = false;
            _this24._datasetIndex = undefined;
            if (cfg) {
                Object.assign(_assertThisInitialized$w(_this24), cfg);
            }
            return _this24;
        }
        _createClass$x(LineElement, [{
            key: "updateControlPoints",
            value: function updateControlPoints(chartArea, indexAxis) {
                var options = this.options;
                if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
                    var loop = options.spanGaps ? this._loop : this._fullLoop;
                    _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
                    this._pointsUpdated = true;
                }
            }
        }, {
            key: "points",
            get: function get() {
                return this._points;
            },
            set: function set(points) {
                this._points = points;
                delete this._segments;
                delete this._path;
                this._pointsUpdated = false;
            }
        }, {
            key: "segments",
            get: function get() {
                return this._segments || (this._segments = _computeSegments(this, this.options.segment));
            }
        }, {
            key: "first",
            value: function first() {
                var segments = this.segments;
                var points = this.points;
                return segments.length && points[segments[0].start];
            }
        }, {
            key: "last",
            value: function last() {
                var segments = this.segments;
                var points = this.points;
                var count = segments.length;
                return count && points[segments[count - 1].end];
            }
        }, {
            key: "interpolate",
            value: function interpolate(point, property) {
                var options = this.options;
                var value = point[property];
                var points = this.points;
                var segments = _boundSegments(this, {
                    property: property,
                    start: value,
                    end: value
                });
                if (!segments.length) {
                    return;
                }
                var result = [];
                var _interpolate = _getInterpolationMethod(options);
                var i, ilen;
                for (i = 0, ilen = segments.length; i < ilen; ++i) {
                    var _segments$i = segments[i],
                        start = _segments$i.start,
                        end = _segments$i.end;
                    var p1 = points[start];
                    var p2 = points[end];
                    if (p1 === p2) {
                        result.push(p1);
                        continue;
                    }
                    var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
                    var interpolated = _interpolate(p1, p2, t, options.stepped);
                    interpolated[property] = point[property];
                    result.push(interpolated);
                }
                return result.length === 1 ? result[0] : result;
            }
        }, {
            key: "pathSegment",
            value: function pathSegment(ctx, segment, params) {
                var segmentMethod = _getSegmentMethod(this);
                return segmentMethod(ctx, this, segment, params);
            }
        }, {
            key: "path",
            value: function path(ctx, start, count) {
                var segments = this.segments;
                var segmentMethod = _getSegmentMethod(this);
                var loop = this._loop;
                start = start || 0;
                count = count || this.points.length - start;
                var _iterator17 = _createForOfIteratorHelper$1(segments),
                    _step17;
                try {
                    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                        var segment = _step17.value;
                        loop &= segmentMethod(ctx, this, segment, {
                            start: start,
                            end: start + count - 1
                        });
                    }
                } catch (err) {
                    _iterator17.e(err);
                } finally {
                    _iterator17.f();
                }
                return !!loop;
            }
        }, {
            key: "draw",
            value: function draw(ctx, chartArea, start, count) {
                var options = this.options || {};
                var points = this.points || [];
                if (points.length && options.borderWidth) {
                    ctx.save();
                    _draw(ctx, this, start, count);
                    ctx.restore();
                }
                if (this.animated) {
                    this._pointsUpdated = false;
                    this._path = undefined;
                }
            }
        }]);
        return LineElement;
    }(Element);
    _defineProperty$w(LineElement, "id", 'line');
    _defineProperty$w(LineElement, "defaults", {
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: 'miter',
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: 'default',
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    });
    _defineProperty$w(LineElement, "defaultRoutes", {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    });
    _defineProperty$w(LineElement, "descriptors", {
        _scriptable: true,
        _indexable: function _indexable(name) {
            return name !== 'borderDash' && name !== 'fill';
        }
    });
    function inRange$1(el, pos, axis, useFinalPosition) {
        var options = el.options;
        var _el$getProps = el.getProps([axis], useFinalPosition),
            value = _el$getProps[axis];
        return Math.abs(pos - value) < options.radius + options.hitRadius;
    }
    var PointElement = /*#__PURE__*/function (_Element4) {
        _inherits$w(PointElement, _Element4);
        var _super14 = _createSuper$w(PointElement);
        /**
         * @type {any}
         */

        /**
         * @type {any}
         */

        function PointElement(cfg) {
            var _this25;
            _classCallCheck$x(this, PointElement);
            _this25 = _super14.call(this);
            _this25.options = undefined;
            _this25.parsed = undefined;
            _this25.skip = undefined;
            _this25.stop = undefined;
            if (cfg) {
                Object.assign(_assertThisInitialized$w(_this25), cfg);
            }
            return _this25;
        }
        _createClass$x(PointElement, [{
            key: "inRange",
            value: function inRange(mouseX, mouseY, useFinalPosition) {
                var options = this.options;
                var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),
                    x = _this$getProps4.x,
                    y = _this$getProps4.y;
                return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
            }
        }, {
            key: "inXRange",
            value: function inXRange(mouseX, useFinalPosition) {
                return inRange$1(this, mouseX, 'x', useFinalPosition);
            }
        }, {
            key: "inYRange",
            value: function inYRange(mouseY, useFinalPosition) {
                return inRange$1(this, mouseY, 'y', useFinalPosition);
            }
        }, {
            key: "getCenterPoint",
            value: function getCenterPoint(useFinalPosition) {
                var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),
                    x = _this$getProps5.x,
                    y = _this$getProps5.y;
                return {
                    x: x,
                    y: y
                };
            }
        }, {
            key: "size",
            value: function size(options) {
                options = options || this.options || {};
                var radius = options.radius || 0;
                radius = Math.max(radius, radius && options.hoverRadius || 0);
                var borderWidth = radius && options.borderWidth || 0;
                return (radius + borderWidth) * 2;
            }
        }, {
            key: "draw",
            value: function draw(ctx, area) {
                var options = this.options;
                if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
                    return;
                }
                ctx.strokeStyle = options.borderColor;
                ctx.lineWidth = options.borderWidth;
                ctx.fillStyle = options.backgroundColor;
                drawPoint(ctx, options, this.x, this.y);
            }
        }, {
            key: "getRange",
            value: function getRange() {
                var options = this.options || {};
                // @ts-expect-error Fallbacks should never be hit in practice
                return options.radius + options.hitRadius;
            }
        }]);
        return PointElement;
    }(Element);
    _defineProperty$w(PointElement, "id", 'point');
    _defineProperty$w(PointElement, "defaults", {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: 'circle',
        radius: 3,
        rotation: 0
    });
    _defineProperty$w(PointElement, "defaultRoutes", {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    });
    function getBarBounds(bar, useFinalPosition) {
        var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),
            x = _bar$getProps.x,
            y = _bar$getProps.y,
            base = _bar$getProps.base,
            width = _bar$getProps.width,
            height = _bar$getProps.height;
        var left, right, top, bottom, half;
        if (bar.horizontal) {
            half = height / 2;
            left = Math.min(x, base);
            right = Math.max(x, base);
            top = y - half;
            bottom = y + half;
        } else {
            half = width / 2;
            left = x - half;
            right = x + half;
            top = Math.min(y, base);
            bottom = Math.max(y, base);
        }
        return {
            left: left,
            top: top,
            right: right,
            bottom: bottom
        };
    }
    function skipOrLimit(skip, value, min, max) {
        return skip ? 0 : _limitValue(value, min, max);
    }
    function parseBorderWidth(bar, maxW, maxH) {
        var value = bar.options.borderWidth;
        var skip = bar.borderSkipped;
        var o = toTRBL(value);
        return {
            t: skipOrLimit(skip.top, o.top, 0, maxH),
            r: skipOrLimit(skip.right, o.right, 0, maxW),
            b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
            l: skipOrLimit(skip.left, o.left, 0, maxW)
        };
    }
    function parseBorderRadius(bar, maxW, maxH) {
        var _bar$getProps2 = bar.getProps(['enableBorderRadius']),
            enableBorderRadius = _bar$getProps2.enableBorderRadius;
        var value = bar.options.borderRadius;
        var o = toTRBLCorners(value);
        var maxR = Math.min(maxW, maxH);
        var skip = bar.borderSkipped;
        var enableBorder = enableBorderRadius || isObject(value);
        return {
            topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
            topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
            bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
            bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
        };
    }
    function boundingRects(bar) {
        var bounds = getBarBounds(bar);
        var width = bounds.right - bounds.left;
        var height = bounds.bottom - bounds.top;
        var border = parseBorderWidth(bar, width / 2, height / 2);
        var radius = parseBorderRadius(bar, width / 2, height / 2);
        return {
            outer: {
                x: bounds.left,
                y: bounds.top,
                w: width,
                h: height,
                radius: radius
            },
            inner: {
                x: bounds.left + border.l,
                y: bounds.top + border.t,
                w: width - border.l - border.r,
                h: height - border.t - border.b,
                radius: {
                    topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                    topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                    bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                    bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
                }
            }
        };
    }
    function _inRange(bar, x, y, useFinalPosition) {
        var skipX = x === null;
        var skipY = y === null;
        var skipBoth = skipX && skipY;
        var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
        return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));
    }
    function hasRadius(radius) {
        return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
    }
    function addNormalRectPath(ctx, rect) {
        ctx.rect(rect.x, rect.y, rect.w, rect.h);
    }
    function inflateRect(rect, amount) {
        var refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var x = rect.x !== refRect.x ? -amount : 0;
        var y = rect.y !== refRect.y ? -amount : 0;
        var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
        var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
        return {
            x: rect.x + x,
            y: rect.y + y,
            w: rect.w + w,
            h: rect.h + h,
            radius: rect.radius
        };
    }
    var BarElement = /*#__PURE__*/function (_Element5) {
        _inherits$w(BarElement, _Element5);
        var _super15 = _createSuper$w(BarElement);
        function BarElement(cfg) {
            var _this26;
            _classCallCheck$x(this, BarElement);
            _this26 = _super15.call(this);
            _this26.options = undefined;
            _this26.horizontal = undefined;
            _this26.base = undefined;
            _this26.width = undefined;
            _this26.height = undefined;
            _this26.inflateAmount = undefined;
            if (cfg) {
                Object.assign(_assertThisInitialized$w(_this26), cfg);
            }
            return _this26;
        }
        _createClass$x(BarElement, [{
            key: "draw",
            value: function draw(ctx) {
                var inflateAmount = this.inflateAmount,
                    _this$options14 = this.options,
                    borderColor = _this$options14.borderColor,
                    backgroundColor = _this$options14.backgroundColor;
                var _boundingRects = boundingRects(this),
                    inner = _boundingRects.inner,
                    outer = _boundingRects.outer;
                var addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
                ctx.save();
                if (outer.w !== inner.w || outer.h !== inner.h) {
                    ctx.beginPath();
                    addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
                    ctx.clip();
                    addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
                    ctx.fillStyle = borderColor;
                    ctx.fill('evenodd');
                }
                ctx.beginPath();
                addRectPath(ctx, inflateRect(inner, inflateAmount));
                ctx.fillStyle = backgroundColor;
                ctx.fill();
                ctx.restore();
            }
        }, {
            key: "inRange",
            value: function inRange(mouseX, mouseY, useFinalPosition) {
                return _inRange(this, mouseX, mouseY, useFinalPosition);
            }
        }, {
            key: "inXRange",
            value: function inXRange(mouseX, useFinalPosition) {
                return _inRange(this, mouseX, null, useFinalPosition);
            }
        }, {
            key: "inYRange",
            value: function inYRange(mouseY, useFinalPosition) {
                return _inRange(this, null, mouseY, useFinalPosition);
            }
        }, {
            key: "getCenterPoint",
            value: function getCenterPoint(useFinalPosition) {
                var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),
                    x = _this$getProps6.x,
                    y = _this$getProps6.y,
                    base = _this$getProps6.base,
                    horizontal = _this$getProps6.horizontal;
                return {
                    x: horizontal ? (x + base) / 2 : x,
                    y: horizontal ? y : (y + base) / 2
                };
            }
        }, {
            key: "getRange",
            value: function getRange(axis) {
                return axis === 'x' ? this.width / 2 : this.height / 2;
            }
        }]);
        return BarElement;
    }(Element);
    _defineProperty$w(BarElement, "id", 'bar');
    _defineProperty$w(BarElement, "defaults", {
        borderSkipped: 'start',
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: 'auto',
        pointStyle: undefined
    });
    _defineProperty$w(BarElement, "defaultRoutes", {
        backgroundColor: 'backgroundColor',
        borderColor: 'borderColor'
    });
    var elements = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ArcElement: ArcElement,
        LineElement: LineElement,
        PointElement: PointElement,
        BarElement: BarElement
    });
    var BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey
    ];
    // Border colors with 50% transparency
    var BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(function (color) {
        return color.replace('rgb(', 'rgba(').replace(')', ', 0.5)');
    });
    function getBorderColor(i) {
        return BORDER_COLORS[i % BORDER_COLORS.length];
    }
    function getBackgroundColor(i) {
        return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
    }
    function colorizeDefaultDataset(dataset, i) {
        dataset.borderColor = getBorderColor(i);
        dataset.backgroundColor = getBackgroundColor(i);
        return ++i;
    }
    function colorizeDoughnutDataset(dataset, i) {
        dataset.backgroundColor = dataset.data.map(function () {
            return getBorderColor(i++);
        });
        return i;
    }
    function colorizePolarAreaDataset(dataset, i) {
        dataset.backgroundColor = dataset.data.map(function () {
            return getBackgroundColor(i++);
        });
        return i;
    }
    function getColorizer(chart) {
        var i = 0;
        return function (dataset, datasetIndex) {
            var controller = chart.getDatasetMeta(datasetIndex).controller;
            if (controller instanceof DoughnutController) {
                i = colorizeDoughnutDataset(dataset, i);
            } else if (controller instanceof PolarAreaController) {
                i = colorizePolarAreaDataset(dataset, i);
            } else if (controller) {
                i = colorizeDefaultDataset(dataset, i);
            }
        };
    }
    function containsColorsDefinitions(descriptors) {
        var k;
        for (k in descriptors) {
            if (descriptors[k].borderColor || descriptors[k].backgroundColor) {
                return true;
            }
        }
        return false;
    }
    function containsColorsDefinition(descriptor) {
        return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
    }
    var plugin_colors = {
        id: 'colors',
        defaults: {
            enabled: true,
            forceOverride: false
        },
        beforeLayout: function beforeLayout(chart, _args, options) {
            if (!options.enabled) {
                return;
            }
            var _chart$config = chart.config,
                datasets = _chart$config.data.datasets,
                chartOptions = _chart$config.options;
            var elements = chartOptions.elements;
            if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {
                return;
            }
            var colorizer = getColorizer(chart);
            datasets.forEach(colorizer);
        }
    };
    function lttbDecimation(data, start, count, availableWidth, options) {
        var samples = options.samples || availableWidth;
        if (samples >= count) {
            return data.slice(start, start + count);
        }
        var decimated = [];
        var bucketWidth = (count - 2) / (samples - 2);
        var sampledIndex = 0;
        var endIndex = start + count - 1;
        var a = start;
        var i, maxAreaPoint, maxArea, area, nextA;
        decimated[sampledIndex++] = data[a];
        for (i = 0; i < samples - 2; i++) {
            var avgX = 0;
            var avgY = 0;
            var j = void 0;
            var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
            var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
            var avgRangeLength = avgRangeEnd - avgRangeStart;
            for (j = avgRangeStart; j < avgRangeEnd; j++) {
                avgX += data[j].x;
                avgY += data[j].y;
            }
            avgX /= avgRangeLength;
            avgY /= avgRangeLength;
            var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
            var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
            var _data$a = data[a],
                pointAx = _data$a.x,
                pointAy = _data$a.y;
            maxArea = area = -1;
            for (j = rangeOffs; j < rangeTo; j++) {
                area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
                if (area > maxArea) {
                    maxArea = area;
                    maxAreaPoint = data[j];
                    nextA = j;
                }
            }
            decimated[sampledIndex++] = maxAreaPoint;
            a = nextA;
        }
        decimated[sampledIndex++] = data[endIndex];
        return decimated;
    }
    function minMaxDecimation(data, start, count, availableWidth) {
        var avgX = 0;
        var countX = 0;
        var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
        var decimated = [];
        var endIndex = start + count - 1;
        var xMin = data[start].x;
        var xMax = data[endIndex].x;
        var dx = xMax - xMin;
        for (i = start; i < start + count; ++i) {
            point = data[i];
            x = (point.x - xMin) / dx * availableWidth;
            y = point.y;
            var truncX = x | 0;
            if (truncX === prevX) {
                if (y < minY) {
                    minY = y;
                    minIndex = i;
                } else if (y > maxY) {
                    maxY = y;
                    maxIndex = i;
                }
                avgX = (countX * avgX + point.x) / ++countX;
            } else {
                var lastIndex = i - 1;
                if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
                    var intermediateIndex1 = Math.min(minIndex, maxIndex);
                    var intermediateIndex2 = Math.max(minIndex, maxIndex);
                    if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
                        decimated.push(_objectSpread2(_objectSpread2({}, data[intermediateIndex1]), {}, {
                            x: avgX
                        }));
                    }
                    if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
                        decimated.push(_objectSpread2(_objectSpread2({}, data[intermediateIndex2]), {}, {
                            x: avgX
                        }));
                    }
                }
                if (i > 0 && lastIndex !== startIndex) {
                    decimated.push(data[lastIndex]);
                }
                decimated.push(point);
                prevX = truncX;
                countX = 0;
                minY = maxY = y;
                minIndex = maxIndex = startIndex = i;
            }
        }
        return decimated;
    }
    function cleanDecimatedDataset(dataset) {
        if (dataset._decimated) {
            var data = dataset._data;
            delete dataset._decimated;
            delete dataset._data;
            Object.defineProperty(dataset, 'data', {
                value: data
            });
        }
    }
    function cleanDecimatedData(chart) {
        chart.data.datasets.forEach(function (dataset) {
            cleanDecimatedDataset(dataset);
        });
    }
    function getStartAndCountOfVisiblePointsSimplified(meta, points) {
        var pointCount = points.length;
        var start = 0;
        var count;
        var iScale = meta.iScale;
        var _iScale$getUserBounds = iScale.getUserBounds(),
            min = _iScale$getUserBounds.min,
            max = _iScale$getUserBounds.max,
            minDefined = _iScale$getUserBounds.minDefined,
            maxDefined = _iScale$getUserBounds.maxDefined;
        if (minDefined) {
            start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
        }
        if (maxDefined) {
            count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
        } else {
            count = pointCount - start;
        }
        return {
            start: start,
            count: count
        };
    }
    var plugin_decimation = {
        id: 'decimation',
        defaults: {
            algorithm: 'min-max',
            enabled: false
        },
        beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {
            if (!options.enabled) {
                cleanDecimatedData(chart);
                return;
            }
            var availableWidth = chart.width;
            chart.data.datasets.forEach(function (dataset, datasetIndex) {
                var _data = dataset._data,
                    indexAxis = dataset.indexAxis;
                var meta = chart.getDatasetMeta(datasetIndex);
                var data = _data || dataset.data;
                if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {
                    return;
                }
                if (!meta.controller.supportsDecimation) {
                    return;
                }
                var xAxis = chart.scales[meta.xAxisID];
                if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
                    return;
                }
                if (chart.options.parsing) {
                    return;
                }
                var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(meta, data),
                    start = _getStartAndCountOfVi3.start,
                    count = _getStartAndCountOfVi3.count;
                var threshold = options.threshold || 4 * availableWidth;
                if (count <= threshold) {
                    cleanDecimatedDataset(dataset);
                    return;
                }
                if (isNullOrUndef(_data)) {
                    dataset._data = data;
                    delete dataset.data;
                    Object.defineProperty(dataset, 'data', {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            return this._decimated;
                        },
                        set: function set(d) {
                            this._data = d;
                        }
                    });
                }
                var decimated;
                switch (options.algorithm) {
                    case 'lttb':
                        decimated = lttbDecimation(data, start, count, availableWidth, options);
                        break;
                    case 'min-max':
                        decimated = minMaxDecimation(data, start, count, availableWidth);
                        break;
                    default:
                        throw new Error("Unsupported decimation algorithm '".concat(options.algorithm, "'"));
                }
                dataset._decimated = decimated;
            });
        },
        destroy: function destroy(chart) {
            cleanDecimatedData(chart);
        }
    };
    function _segments(line, target, property) {
        var segments = line.segments;
        var points = line.points;
        var tpoints = target.points;
        var parts = [];
        var _iterator18 = _createForOfIteratorHelper$1(segments),
            _step18;
        try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var segment = _step18.value;
                var start = segment.start,
                    end = segment.end;
                end = _findSegmentEnd(start, end, points);
                var bounds = _getBounds(property, points[start], points[end], segment.loop);
                if (!target.segments) {
                    parts.push({
                        source: segment,
                        target: bounds,
                        start: points[start],
                        end: points[end]
                    });
                    continue;
                }
                var targetSegments = _boundSegments(target, bounds);
                var _iterator19 = _createForOfIteratorHelper$1(targetSegments),
                    _step19;
                try {
                    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                        var tgt = _step19.value;
                        var subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
                        var fillSources = _boundSegment(segment, points, subBounds);
                        var _iterator20 = _createForOfIteratorHelper$1(fillSources),
                            _step20;
                        try {
                            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                                var fillSource = _step20.value;
                                parts.push({
                                    source: fillSource,
                                    target: tgt,
                                    start: _defineProperty$w({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),
                                    end: _defineProperty$w({}, property, _getEdge(bounds, subBounds, 'end', Math.min))
                                });
                            }
                        } catch (err) {
                            _iterator20.e(err);
                        } finally {
                            _iterator20.f();
                        }
                    }
                } catch (err) {
                    _iterator19.e(err);
                } finally {
                    _iterator19.f();
                }
            }
        } catch (err) {
            _iterator18.e(err);
        } finally {
            _iterator18.f();
        }
        return parts;
    }
    function _getBounds(property, first, last, loop) {
        if (loop) {
            return;
        }
        var start = first[property];
        var end = last[property];
        if (property === 'angle') {
            start = _normalizeAngle(start);
            end = _normalizeAngle(end);
        }
        return {
            property: property,
            start: start,
            end: end
        };
    }
    function _pointsFromSegments(boundary, line) {
        var _ref7 = boundary || {},
            _ref7$x = _ref7.x,
            x = _ref7$x === void 0 ? null : _ref7$x,
            _ref7$y = _ref7.y,
            y = _ref7$y === void 0 ? null : _ref7$y;
        var linePoints = line.points;
        var points = [];
        line.segments.forEach(function (_ref8) {
            var start = _ref8.start,
                end = _ref8.end;
            end = _findSegmentEnd(start, end, linePoints);
            var first = linePoints[start];
            var last = linePoints[end];
            if (y !== null) {
                points.push({
                    x: first.x,
                    y: y
                });
                points.push({
                    x: last.x,
                    y: y
                });
            } else if (x !== null) {
                points.push({
                    x: x,
                    y: first.y
                });
                points.push({
                    x: x,
                    y: last.y
                });
            }
        });
        return points;
    }
    function _findSegmentEnd(start, end, points) {
        for (; end > start; end--) {
            var point = points[end];
            if (!isNaN(point.x) && !isNaN(point.y)) {
                break;
            }
        }
        return end;
    }
    function _getEdge(a, b, prop, fn) {
        if (a && b) {
            return fn(a[prop], b[prop]);
        }
        return a ? a[prop] : b ? b[prop] : 0;
    }
    function _createBoundaryLine(boundary, line) {
        var points = [];
        var _loop = false;
        if (isArray(boundary)) {
            _loop = true;
            points = boundary;
        } else {
            points = _pointsFromSegments(boundary, line);
        }
        return points.length ? new LineElement({
            points: points,
            options: {
                tension: 0
            },
            _loop: _loop,
            _fullLoop: _loop
        }) : null;
    }
    function _shouldApplyFill(source) {
        return source && source.fill !== false;
    }
    function _resolveTarget(sources, index, propagate) {
        var source = sources[index];
        var fill = source.fill;
        var visited = [index];
        var target;
        if (!propagate) {
            return fill;
        }
        while (fill !== false && visited.indexOf(fill) === -1) {
            if (!isNumberFinite(fill)) {
                return fill;
            }
            target = sources[fill];
            if (!target) {
                return false;
            }
            if (target.visible) {
                return fill;
            }
            visited.push(fill);
            fill = target.fill;
        }
        return false;
    }
    function _decodeFill(line, index, count) {
        var fill = parseFillOption(line);
        if (isObject(fill)) {
            return isNaN(fill.value) ? false : fill;
        }
        var target = parseFloat(fill);
        if (isNumberFinite(target) && Math.floor(target) === target) {
            return decodeTargetIndex(fill[0], index, target, count);
        }
        return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;
    }
    function decodeTargetIndex(firstCh, index, target, count) {
        if (firstCh === '-' || firstCh === '+') {
            target = index + target;
        }
        if (target === index || target < 0 || target >= count) {
            return false;
        }
        return target;
    }
    function _getTargetPixel(fill, scale) {
        var pixel = null;
        if (fill === 'start') {
            pixel = scale.bottom;
        } else if (fill === 'end') {
            pixel = scale.top;
        } else if (isObject(fill)) {
            pixel = scale.getPixelForValue(fill.value);
        } else if (scale.getBasePixel) {
            pixel = scale.getBasePixel();
        }
        return pixel;
    }
    function _getTargetValue(fill, scale, startValue) {
        var value;
        if (fill === 'start') {
            value = startValue;
        } else if (fill === 'end') {
            value = scale.options.reverse ? scale.min : scale.max;
        } else if (isObject(fill)) {
            value = fill.value;
        } else {
            value = scale.getBaseValue();
        }
        return value;
    }
    function parseFillOption(line) {
        var options = line.options;
        var fillOption = options.fill;
        var fill = valueOrDefault(fillOption && fillOption.target, fillOption);
        if (fill === undefined) {
            fill = !!options.backgroundColor;
        }
        if (fill === false || fill === null) {
            return false;
        }
        if (fill === true) {
            return 'origin';
        }
        return fill;
    }
    function _buildStackLine(source) {
        var scale = source.scale,
            index = source.index,
            line = source.line;
        var points = [];
        var segments = line.segments;
        var sourcePoints = line.points;
        var linesBelow = getLinesBelow(scale, index);
        linesBelow.push(_createBoundaryLine({
            x: null,
            y: scale.bottom
        }, line));
        for (var i = 0; i < segments.length; i++) {
            var segment = segments[i];
            for (var j = segment.start; j <= segment.end; j++) {
                addPointsBelow(points, sourcePoints[j], linesBelow);
            }
        }
        return new LineElement({
            points: points,
            options: {}
        });
    }
    function getLinesBelow(scale, index) {
        var below = [];
        var metas = scale.getMatchingVisibleMetas('line');
        for (var i = 0; i < metas.length; i++) {
            var meta = metas[i];
            if (meta.index === index) {
                break;
            }
            if (!meta.hidden) {
                below.unshift(meta.dataset);
            }
        }
        return below;
    }
    function addPointsBelow(points, sourcePoint, linesBelow) {
        var postponed = [];
        for (var j = 0; j < linesBelow.length; j++) {
            var line = linesBelow[j];
            var _findPoint = findPoint(line, sourcePoint, 'x'),
                first = _findPoint.first,
                last = _findPoint.last,
                point = _findPoint.point;
            if (!point || first && last) {
                continue;
            }
            if (first) {
                postponed.unshift(point);
            } else {
                points.push(point);
                if (!last) {
                    break;
                }
            }
        }
        points.push.apply(points, postponed);
    }
    function findPoint(line, sourcePoint, property) {
        var point = line.interpolate(sourcePoint, property);
        if (!point) {
            return {};
        }
        var pointValue = point[property];
        var segments = line.segments;
        var linePoints = line.points;
        var first = false;
        var last = false;
        for (var i = 0; i < segments.length; i++) {
            var segment = segments[i];
            var firstValue = linePoints[segment.start][property];
            var lastValue = linePoints[segment.end][property];
            if (_isBetween(pointValue, firstValue, lastValue)) {
                first = pointValue === firstValue;
                last = pointValue === lastValue;
                break;
            }
        }
        return {
            first: first,
            last: last,
            point: point
        };
    }
    var simpleArc = /*#__PURE__*/function () {
        function simpleArc(opts) {
            _classCallCheck$x(this, simpleArc);
            this.x = opts.x;
            this.y = opts.y;
            this.radius = opts.radius;
        }
        _createClass$x(simpleArc, [{
            key: "pathSegment",
            value: function pathSegment(ctx, bounds, opts) {
                var x = this.x,
                    y = this.y,
                    radius = this.radius;
                bounds = bounds || {
                    start: 0,
                    end: TAU
                };
                ctx.arc(x, y, radius, bounds.end, bounds.start, true);
                return !opts.bounds;
            }
        }, {
            key: "interpolate",
            value: function interpolate(point) {
                var x = this.x,
                    y = this.y,
                    radius = this.radius;
                var angle = point.angle;
                return {
                    x: x + Math.cos(angle) * radius,
                    y: y + Math.sin(angle) * radius,
                    angle: angle
                };
            }
        }]);
        return simpleArc;
    }();
    function _getTarget(source) {
        var chart = source.chart,
            fill = source.fill,
            line = source.line;
        if (isNumberFinite(fill)) {
            return getLineByIndex(chart, fill);
        }
        if (fill === 'stack') {
            return _buildStackLine(source);
        }
        if (fill === 'shape') {
            return true;
        }
        var boundary = computeBoundary(source);
        if (boundary instanceof simpleArc) {
            return boundary;
        }
        return _createBoundaryLine(boundary, line);
    }
    function getLineByIndex(chart, index) {
        var meta = chart.getDatasetMeta(index);
        var visible = meta && chart.isDatasetVisible(index);
        return visible ? meta.dataset : null;
    }
    function computeBoundary(source) {
        var scale = source.scale || {};
        if (scale.getPointPositionForValue) {
            return computeCircularBoundary(source);
        }
        return computeLinearBoundary(source);
    }
    function computeLinearBoundary(source) {
        var _source$scale = source.scale,
            scale = _source$scale === void 0 ? {} : _source$scale,
            fill = source.fill;
        var pixel = _getTargetPixel(fill, scale);
        if (isNumberFinite(pixel)) {
            var horizontal = scale.isHorizontal();
            return {
                x: horizontal ? pixel : null,
                y: horizontal ? null : pixel
            };
        }
        return null;
    }
    function computeCircularBoundary(source) {
        var scale = source.scale,
            fill = source.fill;
        var options = scale.options;
        var length = scale.getLabels().length;
        var start = options.reverse ? scale.max : scale.min;
        var value = _getTargetValue(fill, scale, start);
        var target = [];
        if (options.grid.circular) {
            var center = scale.getPointPositionForValue(0, start);
            return new simpleArc({
                x: center.x,
                y: center.y,
                radius: scale.getDistanceFromCenterForValue(value)
            });
        }
        for (var i = 0; i < length; ++i) {
            target.push(scale.getPointPositionForValue(i, value));
        }
        return target;
    }
    function _drawfill(ctx, source, area) {
        var target = _getTarget(source);
        var line = source.line,
            scale = source.scale,
            axis = source.axis;
        var lineOpts = line.options;
        var fillOption = lineOpts.fill;
        var color = lineOpts.backgroundColor;
        var _ref9 = fillOption || {},
            _ref9$above = _ref9.above,
            above = _ref9$above === void 0 ? color : _ref9$above,
            _ref9$below = _ref9.below,
            below = _ref9$below === void 0 ? color : _ref9$below;
        if (target && line.points.length) {
            clipArea(ctx, area);
            doFill(ctx, {
                line: line,
                target: target,
                above: above,
                below: below,
                area: area,
                scale: scale,
                axis: axis
            });
            unclipArea(ctx);
        }
    }
    function doFill(ctx, cfg) {
        var line = cfg.line,
            target = cfg.target,
            above = cfg.above,
            below = cfg.below,
            area = cfg.area,
            scale = cfg.scale;
        var property = line._loop ? 'angle' : cfg.axis;
        ctx.save();
        if (property === 'x' && below !== above) {
            clipVertical(ctx, target, area.top);
            fill(ctx, {
                line: line,
                target: target,
                color: above,
                scale: scale,
                property: property
            });
            ctx.restore();
            ctx.save();
            clipVertical(ctx, target, area.bottom);
        }
        fill(ctx, {
            line: line,
            target: target,
            color: below,
            scale: scale,
            property: property
        });
        ctx.restore();
    }
    function clipVertical(ctx, target, clipY) {
        var segments = target.segments,
            points = target.points;
        var first = true;
        var lineLoop = false;
        ctx.beginPath();
        var _iterator21 = _createForOfIteratorHelper$1(segments),
            _step21;
        try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var segment = _step21.value;
                var start = segment.start,
                    end = segment.end;
                var firstPoint = points[start];
                var lastPoint = points[_findSegmentEnd(start, end, points)];
                if (first) {
                    ctx.moveTo(firstPoint.x, firstPoint.y);
                    first = false;
                } else {
                    ctx.lineTo(firstPoint.x, clipY);
                    ctx.lineTo(firstPoint.x, firstPoint.y);
                }
                lineLoop = !!target.pathSegment(ctx, segment, {
                    move: lineLoop
                });
                if (lineLoop) {
                    ctx.closePath();
                } else {
                    ctx.lineTo(lastPoint.x, clipY);
                }
            }
        } catch (err) {
            _iterator21.e(err);
        } finally {
            _iterator21.f();
        }
        ctx.lineTo(target.first().x, clipY);
        ctx.closePath();
        ctx.clip();
    }
    function fill(ctx, cfg) {
        var line = cfg.line,
            target = cfg.target,
            property = cfg.property,
            color = cfg.color,
            scale = cfg.scale;
        var segments = _segments(line, target, property);
        var _iterator22 = _createForOfIteratorHelper$1(segments),
            _step22;
        try {
            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                var _step22$value = _step22.value,
                    src = _step22$value.source,
                    tgt = _step22$value.target,
                    start = _step22$value.start,
                    end = _step22$value.end;
                var _src$style = src.style,
                    _src$style2 = _src$style === void 0 ? {} : _src$style,
                    _src$style2$backgroun = _src$style2.backgroundColor,
                    backgroundColor = _src$style2$backgroun === void 0 ? color : _src$style2$backgroun;
                var notShape = target !== true;
                ctx.save();
                ctx.fillStyle = backgroundColor;
                clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
                ctx.beginPath();
                var lineLoop = !!line.pathSegment(ctx, src);
                var loop = void 0;
                if (notShape) {
                    if (lineLoop) {
                        ctx.closePath();
                    } else {
                        interpolatedLineTo(ctx, target, end, property);
                    }
                    var targetLoop = !!target.pathSegment(ctx, tgt, {
                        move: lineLoop,
                        reverse: true
                    });
                    loop = lineLoop && targetLoop;
                    if (!loop) {
                        interpolatedLineTo(ctx, target, start, property);
                    }
                }
                ctx.closePath();
                ctx.fill(loop ? 'evenodd' : 'nonzero');
                ctx.restore();
            }
        } catch (err) {
            _iterator22.e(err);
        } finally {
            _iterator22.f();
        }
    }
    function clipBounds(ctx, scale, bounds) {
        var _scale$chart$chartAre = scale.chart.chartArea,
            top = _scale$chart$chartAre.top,
            bottom = _scale$chart$chartAre.bottom;
        var _ref10 = bounds || {},
            property = _ref10.property,
            start = _ref10.start,
            end = _ref10.end;
        if (property === 'x') {
            ctx.beginPath();
            ctx.rect(start, top, end - start, bottom - top);
            ctx.clip();
        }
    }
    function interpolatedLineTo(ctx, target, point, property) {
        var interpolatedPoint = target.interpolate(point, property);
        if (interpolatedPoint) {
            ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
        }
    }
    var index = {
        id: 'filler',
        afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {
            var count = (chart.data.datasets || []).length;
            var sources = [];
            var meta, i, line, source;
            for (i = 0; i < count; ++i) {
                meta = chart.getDatasetMeta(i);
                line = meta.dataset;
                source = null;
                if (line && line.options && line instanceof LineElement) {
                    source = {
                        visible: chart.isDatasetVisible(i),
                        index: i,
                        fill: _decodeFill(line, i, count),
                        chart: chart,
                        axis: meta.controller.options.indexAxis,
                        scale: meta.vScale,
                        line: line
                    };
                }
                meta.$filler = source;
                sources.push(source);
            }
            for (i = 0; i < count; ++i) {
                source = sources[i];
                if (!source || source.fill === false) {
                    continue;
                }
                source.fill = _resolveTarget(sources, i, options.propagate);
            }
        },
        beforeDraw: function beforeDraw(chart, _args, options) {
            var draw = options.drawTime === 'beforeDraw';
            var metasets = chart.getSortedVisibleDatasetMetas();
            var area = chart.chartArea;
            for (var i = metasets.length - 1; i >= 0; --i) {
                var source = metasets[i].$filler;
                if (!source) {
                    continue;
                }
                source.line.updateControlPoints(area, source.axis);
                if (draw && source.fill) {
                    _drawfill(chart.ctx, source, area);
                }
            }
        },
        beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {
            if (options.drawTime !== 'beforeDatasetsDraw') {
                return;
            }
            var metasets = chart.getSortedVisibleDatasetMetas();
            for (var i = metasets.length - 1; i >= 0; --i) {
                var source = metasets[i].$filler;
                if (_shouldApplyFill(source)) {
                    _drawfill(chart.ctx, source, chart.chartArea);
                }
            }
        },
        beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {
            var source = args.meta.$filler;
            if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {
                return;
            }
            _drawfill(chart.ctx, source, chart.chartArea);
        },
        defaults: {
            propagate: true,
            drawTime: 'beforeDatasetDraw'
        }
    };
    var getBoxSize = function getBoxSize(labelOpts, fontSize) {
        var _labelOpts$boxHeight = labelOpts.boxHeight,
            boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,
            _labelOpts$boxWidth = labelOpts.boxWidth,
            boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;
        if (labelOpts.usePointStyle) {
            boxHeight = Math.min(boxHeight, fontSize);
            boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
        }
        return {
            boxWidth: boxWidth,
            boxHeight: boxHeight,
            itemHeight: Math.max(fontSize, boxHeight)
        };
    };
    var itemsEqual = function itemsEqual(a, b) {
        return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
    };
    var Legend = /*#__PURE__*/function (_Element6) {
        _inherits$w(Legend, _Element6);
        var _super16 = _createSuper$w(Legend);
        function Legend(config) {
            var _this27;
            _classCallCheck$x(this, Legend);
            _this27 = _super16.call(this);
            _this27._added = false;
            _this27.legendHitBoxes = [];
            _this27._hoveredItem = null;
            _this27.doughnutMode = false;
            _this27.chart = config.chart;
            _this27.options = config.options;
            _this27.ctx = config.ctx;
            _this27.legendItems = undefined;
            _this27.columnSizes = undefined;
            _this27.lineWidths = undefined;
            _this27.maxHeight = undefined;
            _this27.maxWidth = undefined;
            _this27.top = undefined;
            _this27.bottom = undefined;
            _this27.left = undefined;
            _this27.right = undefined;
            _this27.height = undefined;
            _this27.width = undefined;
            _this27._margins = undefined;
            _this27.position = undefined;
            _this27.weight = undefined;
            _this27.fullSize = undefined;
            return _this27;
        }
        _createClass$x(Legend, [{
            key: "update",
            value: function update(maxWidth, maxHeight, margins) {
                this.maxWidth = maxWidth;
                this.maxHeight = maxHeight;
                this._margins = margins;
                this.setDimensions();
                this.buildLabels();
                this.fit();
            }
        }, {
            key: "setDimensions",
            value: function setDimensions() {
                if (this.isHorizontal()) {
                    this.width = this.maxWidth;
                    this.left = this._margins.left;
                    this.right = this.width;
                } else {
                    this.height = this.maxHeight;
                    this.top = this._margins.top;
                    this.bottom = this.height;
                }
            }
        }, {
            key: "buildLabels",
            value: function buildLabels() {
                var _this28 = this;
                var labelOpts = this.options.labels || {};
                var legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];
                if (labelOpts.filter) {
                    legendItems = legendItems.filter(function (item) {
                        return labelOpts.filter(item, _this28.chart.data);
                    });
                }
                if (labelOpts.sort) {
                    legendItems = legendItems.sort(function (a, b) {
                        return labelOpts.sort(a, b, _this28.chart.data);
                    });
                }
                if (this.options.reverse) {
                    legendItems.reverse();
                }
                this.legendItems = legendItems;
            }
        }, {
            key: "fit",
            value: function fit() {
                var options = this.options,
                    ctx = this.ctx;
                if (!options.display) {
                    this.width = this.height = 0;
                    return;
                }
                var labelOpts = options.labels;
                var labelFont = toFont(labelOpts.font);
                var fontSize = labelFont.size;
                var titleHeight = this._computeTitleHeight();
                var _getBoxSize = getBoxSize(labelOpts, fontSize),
                    boxWidth = _getBoxSize.boxWidth,
                    itemHeight = _getBoxSize.itemHeight;
                var width, height;
                ctx.font = labelFont.string;
                if (this.isHorizontal()) {
                    width = this.maxWidth;
                    height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
                } else {
                    height = this.maxHeight;
                    width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
                }
                this.width = Math.min(width, options.maxWidth || this.maxWidth);
                this.height = Math.min(height, options.maxHeight || this.maxHeight);
            }
        }, {
            key: "_fitRows",
            value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
                var ctx = this.ctx,
                    maxWidth = this.maxWidth,
                    padding = this.options.labels.padding;
                var hitboxes = this.legendHitBoxes = [];
                var lineWidths = this.lineWidths = [0];
                var lineHeight = itemHeight + padding;
                var totalHeight = titleHeight;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'middle';
                var row = -1;
                var top = -lineHeight;
                this.legendItems.forEach(function (legendItem, i) {
                    var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                    if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                        totalHeight += lineHeight;
                        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                        top += lineHeight;
                        row++;
                    }
                    hitboxes[i] = {
                        left: 0,
                        top: top,
                        row: row,
                        width: itemWidth,
                        height: itemHeight
                    };
                    lineWidths[lineWidths.length - 1] += itemWidth + padding;
                });
                return totalHeight;
            }
        }, {
            key: "_fitCols",
            value: function _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
                var ctx = this.ctx,
                    maxHeight = this.maxHeight,
                    padding = this.options.labels.padding;
                var hitboxes = this.legendHitBoxes = [];
                var columnSizes = this.columnSizes = [];
                var heightLimit = maxHeight - titleHeight;
                var totalWidth = padding;
                var currentColWidth = 0;
                var currentColHeight = 0;
                var left = 0;
                var col = 0;
                this.legendItems.forEach(function (legendItem, i) {
                    var _calculateItemSize = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight),
                        itemWidth = _calculateItemSize.itemWidth,
                        itemHeight = _calculateItemSize.itemHeight;
                    if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                        totalWidth += currentColWidth + padding;
                        columnSizes.push({
                            width: currentColWidth,
                            height: currentColHeight
                        });
                        left += currentColWidth + padding;
                        col++;
                        currentColWidth = currentColHeight = 0;
                    }
                    hitboxes[i] = {
                        left: left,
                        top: currentColHeight,
                        col: col,
                        width: itemWidth,
                        height: itemHeight
                    };
                    currentColWidth = Math.max(currentColWidth, itemWidth);
                    currentColHeight += itemHeight + padding;
                });
                totalWidth += currentColWidth;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                return totalWidth;
            }
        }, {
            key: "adjustHitBoxes",
            value: function adjustHitBoxes() {
                if (!this.options.display) {
                    return;
                }
                var titleHeight = this._computeTitleHeight();
                var hitboxes = this.legendHitBoxes,
                    _this$options15 = this.options,
                    align = _this$options15.align,
                    padding = _this$options15.labels.padding,
                    rtl = _this$options15.rtl;
                var rtlHelper = getRtlAdapter(rtl, this.left, this.width);
                if (this.isHorizontal()) {
                    var row = 0;
                    var left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
                    var _iterator23 = _createForOfIteratorHelper$1(hitboxes),
                        _step23;
                    try {
                        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                            var hitbox = _step23.value;
                            if (row !== hitbox.row) {
                                row = hitbox.row;
                                left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
                            }
                            hitbox.top += this.top + titleHeight + padding;
                            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                            left += hitbox.width + padding;
                        }
                    } catch (err) {
                        _iterator23.e(err);
                    } finally {
                        _iterator23.f();
                    }
                } else {
                    var col = 0;
                    var top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                    var _iterator24 = _createForOfIteratorHelper$1(hitboxes),
                        _step24;
                    try {
                        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                            var hitbox1 = _step24.value;
                            if (hitbox1.col !== col) {
                                col = hitbox1.col;
                                top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                            }
                            hitbox1.top = top;
                            hitbox1.left += this.left + padding;
                            hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);
                            top += hitbox1.height + padding;
                        }
                    } catch (err) {
                        _iterator24.e(err);
                    } finally {
                        _iterator24.f();
                    }
                }
            }
        }, {
            key: "isHorizontal",
            value: function isHorizontal() {
                return this.options.position === 'top' || this.options.position === 'bottom';
            }
        }, {
            key: "draw",
            value: function draw() {
                if (this.options.display) {
                    var ctx = this.ctx;
                    clipArea(ctx, this);
                    this._draw();
                    unclipArea(ctx);
                }
            }
        }, {
            key: "_draw",
            value: function _draw() {
                var _this29 = this;
                var opts = this.options,
                    columnSizes = this.columnSizes,
                    lineWidths = this.lineWidths,
                    ctx = this.ctx;
                var align = opts.align,
                    labelOpts = opts.labels;
                var defaultColor = defaults.color;
                var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
                var labelFont = toFont(labelOpts.font);
                var padding = labelOpts.padding;
                var fontSize = labelFont.size;
                var halfFontSize = fontSize / 2;
                var cursor;
                this.drawTitle();
                ctx.textAlign = rtlHelper.textAlign('left');
                ctx.textBaseline = 'middle';
                ctx.lineWidth = 0.5;
                ctx.font = labelFont.string;
                var _getBoxSize2 = getBoxSize(labelOpts, fontSize),
                    boxWidth = _getBoxSize2.boxWidth,
                    boxHeight = _getBoxSize2.boxHeight,
                    itemHeight = _getBoxSize2.itemHeight;
                var drawLegendBox = function drawLegendBox(x, y, legendItem) {
                    if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
                        return;
                    }
                    ctx.save();
                    var lineWidth = valueOrDefault(legendItem.lineWidth, 1);
                    ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
                    ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
                    ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
                    ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
                    ctx.lineWidth = lineWidth;
                    ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
                    ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
                    if (labelOpts.usePointStyle) {
                        var drawOptions = {
                            radius: boxHeight * Math.SQRT2 / 2,
                            pointStyle: legendItem.pointStyle,
                            rotation: legendItem.rotation,
                            borderWidth: lineWidth
                        };
                        var centerX = rtlHelper.xPlus(x, boxWidth / 2);
                        var centerY = y + halfFontSize;
                        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
                    } else {
                        var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                        var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                        var borderRadius = toTRBLCorners(legendItem.borderRadius);
                        ctx.beginPath();
                        if (Object.values(borderRadius).some(function (v) {
                            return v !== 0;
                        })) {
                            addRoundedRectPath(ctx, {
                                x: xBoxLeft,
                                y: yBoxTop,
                                w: boxWidth,
                                h: boxHeight,
                                radius: borderRadius
                            });
                        } else {
                            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                        }
                        ctx.fill();
                        if (lineWidth !== 0) {
                            ctx.stroke();
                        }
                    }
                    ctx.restore();
                };
                var fillText = function fillText(x, y, legendItem) {
                    renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                        strikethrough: legendItem.hidden,
                        textAlign: rtlHelper.textAlign(legendItem.textAlign)
                    });
                };
                var isHorizontal = this.isHorizontal();
                var titleHeight = this._computeTitleHeight();
                if (isHorizontal) {
                    cursor = {
                        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
                        y: this.top + padding + titleHeight,
                        line: 0
                    };
                } else {
                    cursor = {
                        x: this.left + padding,
                        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
                        line: 0
                    };
                }
                overrideTextDirection(this.ctx, opts.textDirection);
                var lineHeight = itemHeight + padding;
                this.legendItems.forEach(function (legendItem, i) {
                    ctx.strokeStyle = legendItem.fontColor;
                    ctx.fillStyle = legendItem.fontColor;
                    var textWidth = ctx.measureText(legendItem.text).width;
                    var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
                    var width = boxWidth + halfFontSize + textWidth;
                    var x = cursor.x;
                    var y = cursor.y;
                    rtlHelper.setWidth(_this29.width);
                    if (isHorizontal) {
                        if (i > 0 && x + width + padding > _this29.right) {
                            y = cursor.y += lineHeight;
                            cursor.line++;
                            x = cursor.x = _alignStartEnd(align, _this29.left + padding, _this29.right - lineWidths[cursor.line]);
                        }
                    } else if (i > 0 && y + lineHeight > _this29.bottom) {
                        x = cursor.x = x + columnSizes[cursor.line].width + padding;
                        cursor.line++;
                        y = cursor.y = _alignStartEnd(align, _this29.top + titleHeight + padding, _this29.bottom - columnSizes[cursor.line].height);
                    }
                    var realX = rtlHelper.x(x);
                    drawLegendBox(realX, y, legendItem);
                    x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this29.right, opts.rtl);
                    fillText(rtlHelper.x(x), y, legendItem);
                    if (isHorizontal) {
                        cursor.x += width + padding;
                    } else if (typeof legendItem.text !== 'string') {
                        var fontLineHeight = labelFont.lineHeight;
                        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);
                    } else {
                        cursor.y += lineHeight;
                    }
                });
                restoreTextDirection(this.ctx, opts.textDirection);
            }
        }, {
            key: "drawTitle",
            value: function drawTitle() {
                var opts = this.options;
                var titleOpts = opts.title;
                var titleFont = toFont(titleOpts.font);
                var titlePadding = toPadding(titleOpts.padding);
                if (!titleOpts.display) {
                    return;
                }
                var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
                var ctx = this.ctx;
                var position = titleOpts.position;
                var halfFontSize = titleFont.size / 2;
                var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
                var y;
                var left = this.left;
                var maxWidth = this.width;
                if (this.isHorizontal()) {
                    maxWidth = Math.max.apply(Math, _toConsumableArray(this.lineWidths));
                    y = this.top + topPaddingPlusHalfFontSize;
                    left = _alignStartEnd(opts.align, left, this.right - maxWidth);
                } else {
                    var maxHeight = this.columnSizes.reduce(function (acc, size) {
                        return Math.max(acc, size.height);
                    }, 0);
                    y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
                }
                var x = _alignStartEnd(position, left, left + maxWidth);
                ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
                ctx.textBaseline = 'middle';
                ctx.strokeStyle = titleOpts.color;
                ctx.fillStyle = titleOpts.color;
                ctx.font = titleFont.string;
                renderText(ctx, titleOpts.text, x, y, titleFont);
            }
        }, {
            key: "_computeTitleHeight",
            value: function _computeTitleHeight() {
                var titleOpts = this.options.title;
                var titleFont = toFont(titleOpts.font);
                var titlePadding = toPadding(titleOpts.padding);
                return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
            }
        }, {
            key: "_getLegendItemAt",
            value: function _getLegendItemAt(x, y) {
                var i, hitBox, lh;
                if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {
                    lh = this.legendHitBoxes;
                    for (i = 0; i < lh.length; ++i) {
                        hitBox = lh[i];
                        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
                            return this.legendItems[i];
                        }
                    }
                }
                return null;
            }
        }, {
            key: "handleEvent",
            value: function handleEvent(e) {
                var opts = this.options;
                if (!isListened(e.type, opts)) {
                    return;
                }
                var hoveredItem = this._getLegendItemAt(e.x, e.y);
                if (e.type === 'mousemove' || e.type === 'mouseout') {
                    var previous = this._hoveredItem;
                    var sameItem = itemsEqual(previous, hoveredItem);
                    if (previous && !sameItem) {
                        callback(opts.onLeave, [e, previous, this], this);
                    }
                    this._hoveredItem = hoveredItem;
                    if (hoveredItem && !sameItem) {
                        callback(opts.onHover, [e, hoveredItem, this], this);
                    }
                } else if (hoveredItem) {
                    callback(opts.onClick, [e, hoveredItem, this], this);
                }
            }
        }]);
        return Legend;
    }(Element);
    function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
        var itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
        var itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
        return {
            itemWidth: itemWidth,
            itemHeight: itemHeight
        };
    }
    function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
        var legendItemText = legendItem.text;
        if (legendItemText && typeof legendItemText !== 'string') {
            legendItemText = legendItemText.reduce(function (a, b) {
                return a.length > b.length ? a : b;
            });
        }
        return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
    }
    function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
        var itemHeight = _itemHeight;
        if (typeof legendItem.text !== 'string') {
            itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
        }
        return itemHeight;
    }
    function calculateLegendItemHeight(legendItem, fontLineHeight) {
        var labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;
        return fontLineHeight * labelHeight;
    }
    function isListened(type, opts) {
        if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
            return true;
        }
        if (opts.onClick && (type === 'click' || type === 'mouseup')) {
            return true;
        }
        return false;
    }
    var plugin_legend = {
        id: 'legend',
        _element: Legend,
        start: function start(chart, _args, options) {
            var legend = chart.legend = new Legend({
                ctx: chart.ctx,
                options: options,
                chart: chart
            });
            layouts.configure(chart, legend, options);
            layouts.addBox(chart, legend);
        },
        stop: function stop(chart) {
            layouts.removeBox(chart, chart.legend);
            delete chart.legend;
        },
        beforeUpdate: function beforeUpdate(chart, _args, options) {
            var legend = chart.legend;
            layouts.configure(chart, legend, options);
            legend.options = options;
        },
        afterUpdate: function afterUpdate(chart) {
            var legend = chart.legend;
            legend.buildLabels();
            legend.adjustHitBoxes();
        },
        afterEvent: function afterEvent(chart, args) {
            if (!args.replay) {
                chart.legend.handleEvent(args.event);
            }
        },
        defaults: {
            display: true,
            position: 'top',
            align: 'center',
            fullSize: true,
            reverse: false,
            weight: 1000,
            onClick: function onClick(e, legendItem, legend) {
                var index = legendItem.datasetIndex;
                var ci = legend.chart;
                if (ci.isDatasetVisible(index)) {
                    ci.hide(index);
                    legendItem.hidden = true;
                } else {
                    ci.show(index);
                    legendItem.hidden = false;
                }
            },
            onHover: null,
            onLeave: null,
            labels: {
                color: function color(ctx) {
                    return ctx.chart.options.color;
                },
                boxWidth: 40,
                padding: 10,
                generateLabels: function generateLabels(chart) {
                    var datasets = chart.data.datasets;
                    var _chart$legend$options = chart.legend.options.labels,
                        usePointStyle = _chart$legend$options.usePointStyle,
                        pointStyle = _chart$legend$options.pointStyle,
                        textAlign = _chart$legend$options.textAlign,
                        color = _chart$legend$options.color,
                        useBorderRadius = _chart$legend$options.useBorderRadius,
                        borderRadius = _chart$legend$options.borderRadius;
                    return chart._getSortedDatasetMetas().map(function (meta) {
                        var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                        var borderWidth = toPadding(style.borderWidth);
                        return {
                            text: datasets[meta.index].label,
                            fillStyle: style.backgroundColor,
                            fontColor: color,
                            hidden: !meta.visible,
                            lineCap: style.borderCapStyle,
                            lineDash: style.borderDash,
                            lineDashOffset: style.borderDashOffset,
                            lineJoin: style.borderJoinStyle,
                            lineWidth: (borderWidth.width + borderWidth.height) / 4,
                            strokeStyle: style.borderColor,
                            pointStyle: pointStyle || style.pointStyle,
                            rotation: style.rotation,
                            textAlign: textAlign || style.textAlign,
                            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                            datasetIndex: meta.index
                        };
                    }, this);
                }
            },
            title: {
                color: function color(ctx) {
                    return ctx.chart.options.color;
                },
                display: false,
                position: 'center',
                text: ''
            }
        },
        descriptors: {
            _scriptable: function _scriptable(name) {
                return !name.startsWith('on');
            },
            labels: {
                _scriptable: function _scriptable(name) {
                    return !['generateLabels', 'filter', 'sort'].includes(name);
                }
            }
        }
    };
    var Title = /*#__PURE__*/function (_Element7) {
        _inherits$w(Title, _Element7);
        var _super17 = _createSuper$w(Title);
        function Title(config) {
            var _this30;
            _classCallCheck$x(this, Title);
            _this30 = _super17.call(this);
            _this30.chart = config.chart;
            _this30.options = config.options;
            _this30.ctx = config.ctx;
            _this30._padding = undefined;
            _this30.top = undefined;
            _this30.bottom = undefined;
            _this30.left = undefined;
            _this30.right = undefined;
            _this30.width = undefined;
            _this30.height = undefined;
            _this30.position = undefined;
            _this30.weight = undefined;
            _this30.fullSize = undefined;
            return _this30;
        }
        _createClass$x(Title, [{
            key: "update",
            value: function update(maxWidth, maxHeight) {
                var opts = this.options;
                this.left = 0;
                this.top = 0;
                if (!opts.display) {
                    this.width = this.height = this.right = this.bottom = 0;
                    return;
                }
                this.width = this.right = maxWidth;
                this.height = this.bottom = maxHeight;
                var lineCount = isArray(opts.text) ? opts.text.length : 1;
                this._padding = toPadding(opts.padding);
                var textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
                if (this.isHorizontal()) {
                    this.height = textSize;
                } else {
                    this.width = textSize;
                }
            }
        }, {
            key: "isHorizontal",
            value: function isHorizontal() {
                var pos = this.options.position;
                return pos === 'top' || pos === 'bottom';
            }
        }, {
            key: "_drawArgs",
            value: function _drawArgs(offset) {
                var top = this.top,
                    left = this.left,
                    bottom = this.bottom,
                    right = this.right,
                    options = this.options;
                var align = options.align;
                var rotation = 0;
                var maxWidth, titleX, titleY;
                if (this.isHorizontal()) {
                    titleX = _alignStartEnd(align, left, right);
                    titleY = top + offset;
                    maxWidth = right - left;
                } else {
                    if (options.position === 'left') {
                        titleX = left + offset;
                        titleY = _alignStartEnd(align, bottom, top);
                        rotation = PI * -0.5;
                    } else {
                        titleX = right - offset;
                        titleY = _alignStartEnd(align, top, bottom);
                        rotation = PI * 0.5;
                    }
                    maxWidth = bottom - top;
                }
                return {
                    titleX: titleX,
                    titleY: titleY,
                    maxWidth: maxWidth,
                    rotation: rotation
                };
            }
        }, {
            key: "draw",
            value: function draw() {
                var ctx = this.ctx;
                var opts = this.options;
                if (!opts.display) {
                    return;
                }
                var fontOpts = toFont(opts.font);
                var lineHeight = fontOpts.lineHeight;
                var offset = lineHeight / 2 + this._padding.top;
                var _this$_drawArgs = this._drawArgs(offset),
                    titleX = _this$_drawArgs.titleX,
                    titleY = _this$_drawArgs.titleY,
                    maxWidth = _this$_drawArgs.maxWidth,
                    rotation = _this$_drawArgs.rotation;
                renderText(ctx, opts.text, 0, 0, fontOpts, {
                    color: opts.color,
                    maxWidth: maxWidth,
                    rotation: rotation,
                    textAlign: _toLeftRightCenter(opts.align),
                    textBaseline: 'middle',
                    translation: [titleX, titleY]
                });
            }
        }]);
        return Title;
    }(Element);
    function createTitle(chart, titleOpts) {
        var title = new Title({
            ctx: chart.ctx,
            options: titleOpts,
            chart: chart
        });
        layouts.configure(chart, title, titleOpts);
        layouts.addBox(chart, title);
        chart.titleBlock = title;
    }
    var plugin_title = {
        id: 'title',
        _element: Title,
        start: function start(chart, _args, options) {
            createTitle(chart, options);
        },
        stop: function stop(chart) {
            var titleBlock = chart.titleBlock;
            layouts.removeBox(chart, titleBlock);
            delete chart.titleBlock;
        },
        beforeUpdate: function beforeUpdate(chart, _args, options) {
            var title = chart.titleBlock;
            layouts.configure(chart, title, options);
            title.options = options;
        },
        defaults: {
            align: 'center',
            display: false,
            font: {
                weight: 'bold'
            },
            fullSize: true,
            padding: 10,
            position: 'top',
            text: '',
            weight: 2000
        },
        defaultRoutes: {
            color: 'color'
        },
        descriptors: {
            _scriptable: true,
            _indexable: false
        }
    };
    var map = new WeakMap();
    var plugin_subtitle = {
        id: 'subtitle',
        start: function start(chart, _args, options) {
            var title = new Title({
                ctx: chart.ctx,
                options: options,
                chart: chart
            });
            layouts.configure(chart, title, options);
            layouts.addBox(chart, title);
            map.set(chart, title);
        },
        stop: function stop(chart) {
            layouts.removeBox(chart, map.get(chart));
            map["delete"](chart);
        },
        beforeUpdate: function beforeUpdate(chart, _args, options) {
            var title = map.get(chart);
            layouts.configure(chart, title, options);
            title.options = options;
        },
        defaults: {
            align: 'center',
            display: false,
            font: {
                weight: 'normal'
            },
            fullSize: true,
            padding: 0,
            position: 'top',
            text: '',
            weight: 1500
        },
        defaultRoutes: {
            color: 'color'
        },
        descriptors: {
            _scriptable: true,
            _indexable: false
        }
    };
    var positioners = {
        average: function average(items) {
            if (!items.length) {
                return false;
            }
            var i, len;
            var x = 0;
            var y = 0;
            var count = 0;
            for (i = 0, len = items.length; i < len; ++i) {
                var el = items[i].element;
                if (el && el.hasValue()) {
                    var pos = el.tooltipPosition();
                    x += pos.x;
                    y += pos.y;
                    ++count;
                }
            }
            return {
                x: x / count,
                y: y / count
            };
        },
        nearest: function nearest(items, eventPosition) {
            if (!items.length) {
                return false;
            }
            var x = eventPosition.x;
            var y = eventPosition.y;
            var minDistance = Number.POSITIVE_INFINITY;
            var i, len, nearestElement;
            for (i = 0, len = items.length; i < len; ++i) {
                var el = items[i].element;
                if (el && el.hasValue()) {
                    var center = el.getCenterPoint();
                    var d = distanceBetweenPoints(eventPosition, center);
                    if (d < minDistance) {
                        minDistance = d;
                        nearestElement = el;
                    }
                }
            }
            if (nearestElement) {
                var tp = nearestElement.tooltipPosition();
                x = tp.x;
                y = tp.y;
            }
            return {
                x: x,
                y: y
            };
        }
    };
    function pushOrConcat(base, toPush) {
        if (toPush) {
            if (isArray(toPush)) {
                Array.prototype.push.apply(base, toPush);
            } else {
                base.push(toPush);
            }
        }
        return base;
    }
    function splitNewlines(str) {
        if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
            return str.split('\n');
        }
        return str;
    }
    function createTooltipItem(chart, item) {
        var element = item.element,
            datasetIndex = item.datasetIndex,
            index = item.index;
        var controller = chart.getDatasetMeta(datasetIndex).controller;
        var _controller$getLabelA = controller.getLabelAndValue(index),
            label = _controller$getLabelA.label,
            value = _controller$getLabelA.value;
        return {
            chart: chart,
            label: label,
            parsed: controller.getParsed(index),
            raw: chart.data.datasets[datasetIndex].data[index],
            formattedValue: value,
            dataset: controller.getDataset(),
            dataIndex: index,
            datasetIndex: datasetIndex,
            element: element
        };
    }
    function getTooltipSize(tooltip, options) {
        var ctx = tooltip.chart.ctx;
        var body = tooltip.body,
            footer = tooltip.footer,
            title = tooltip.title;
        var boxWidth = options.boxWidth,
            boxHeight = options.boxHeight;
        var bodyFont = toFont(options.bodyFont);
        var titleFont = toFont(options.titleFont);
        var footerFont = toFont(options.footerFont);
        var titleLineCount = title.length;
        var footerLineCount = footer.length;
        var bodyLineItemCount = body.length;
        var padding = toPadding(options.padding);
        var height = padding.height;
        var width = 0;
        var combinedBodyLength = body.reduce(function (count, bodyItem) {
            return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
        if (titleLineCount) {
            height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
        }
        if (combinedBodyLength) {
            var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
            height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
        }
        if (footerLineCount) {
            height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
        }
        var widthPadding = 0;
        var maxLineWidth = function maxLineWidth(line) {
            width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };
        ctx.save();
        ctx.font = titleFont.string;
        each(tooltip.title, maxLineWidth);
        ctx.font = bodyFont.string;
        each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
        widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
        each(body, function (bodyItem) {
            each(bodyItem.before, maxLineWidth);
            each(bodyItem.lines, maxLineWidth);
            each(bodyItem.after, maxLineWidth);
        });
        widthPadding = 0;
        ctx.font = footerFont.string;
        each(tooltip.footer, maxLineWidth);
        ctx.restore();
        width += padding.width;
        return {
            width: width,
            height: height
        };
    }
    function determineYAlign(chart, size) {
        var y = size.y,
            height = size.height;
        if (y < height / 2) {
            return 'top';
        } else if (y > chart.height - height / 2) {
            return 'bottom';
        }
        return 'center';
    }
    function doesNotFitWithAlign(xAlign, chart, options, size) {
        var x = size.x,
            width = size.width;
        var caret = options.caretSize + options.caretPadding;
        if (xAlign === 'left' && x + width + caret > chart.width) {
            return true;
        }
        if (xAlign === 'right' && x - width - caret < 0) {
            return true;
        }
    }
    function determineXAlign(chart, options, size, yAlign) {
        var x = size.x,
            width = size.width;
        var chartWidth = chart.width,
            _chart$chartArea = chart.chartArea,
            left = _chart$chartArea.left,
            right = _chart$chartArea.right;
        var xAlign = 'center';
        if (yAlign === 'center') {
            xAlign = x <= (left + right) / 2 ? 'left' : 'right';
        } else if (x <= width / 2) {
            xAlign = 'left';
        } else if (x >= chartWidth - width / 2) {
            xAlign = 'right';
        }
        if (doesNotFitWithAlign(xAlign, chart, options, size)) {
            xAlign = 'center';
        }
        return xAlign;
    }
    function determineAlignment(chart, options, size) {
        var yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
        return {
            xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
            yAlign: yAlign
        };
    }
    function alignX(size, xAlign) {
        var x = size.x,
            width = size.width;
        if (xAlign === 'right') {
            x -= width;
        } else if (xAlign === 'center') {
            x -= width / 2;
        }
        return x;
    }
    function alignY(size, yAlign, paddingAndSize) {
        var y = size.y,
            height = size.height;
        if (yAlign === 'top') {
            y += paddingAndSize;
        } else if (yAlign === 'bottom') {
            y -= height + paddingAndSize;
        } else {
            y -= height / 2;
        }
        return y;
    }
    function getBackgroundPoint(options, size, alignment, chart) {
        var caretSize = options.caretSize,
            caretPadding = options.caretPadding,
            cornerRadius = options.cornerRadius;
        var xAlign = alignment.xAlign,
            yAlign = alignment.yAlign;
        var paddingAndSize = caretSize + caretPadding;
        var _toTRBLCorners = toTRBLCorners(cornerRadius),
            topLeft = _toTRBLCorners.topLeft,
            topRight = _toTRBLCorners.topRight,
            bottomLeft = _toTRBLCorners.bottomLeft,
            bottomRight = _toTRBLCorners.bottomRight;
        var x = alignX(size, xAlign);
        var y = alignY(size, yAlign, paddingAndSize);
        if (yAlign === 'center') {
            if (xAlign === 'left') {
                x += paddingAndSize;
            } else if (xAlign === 'right') {
                x -= paddingAndSize;
            }
        } else if (xAlign === 'left') {
            x -= Math.max(topLeft, bottomLeft) + caretSize;
        } else if (xAlign === 'right') {
            x += Math.max(topRight, bottomRight) + caretSize;
        }
        return {
            x: _limitValue(x, 0, chart.width - size.width),
            y: _limitValue(y, 0, chart.height - size.height)
        };
    }
    function getAlignedX(tooltip, align, options) {
        var padding = toPadding(options.padding);
        return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
    }
    function getBeforeAfterBodyLines(callback) {
        return pushOrConcat([], splitNewlines(callback));
    }
    function createTooltipContext(parent, tooltip, tooltipItems) {
        return createContext(parent, {
            tooltip: tooltip,
            tooltipItems: tooltipItems,
            type: 'tooltip'
        });
    }
    function overrideCallbacks(callbacks, context) {
        var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
        return override ? callbacks.override(override) : callbacks;
    }
    var defaultCallbacks = {
        beforeTitle: noop,
        title: function title(tooltipItems) {
            if (tooltipItems.length > 0) {
                var item = tooltipItems[0];
                var labels = item.chart.data.labels;
                var labelCount = labels ? labels.length : 0;
                if (this && this.options && this.options.mode === 'dataset') {
                    return item.dataset.label || '';
                } else if (item.label) {
                    return item.label;
                } else if (labelCount > 0 && item.dataIndex < labelCount) {
                    return labels[item.dataIndex];
                }
            }
            return '';
        },
        afterTitle: noop,
        beforeBody: noop,
        beforeLabel: noop,
        label: function label(tooltipItem) {
            if (this && this.options && this.options.mode === 'dataset') {
                return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
            }
            var label = tooltipItem.dataset.label || '';
            if (label) {
                label += ': ';
            }
            var value = tooltipItem.formattedValue;
            if (!isNullOrUndef(value)) {
                label += value;
            }
            return label;
        },
        labelColor: function labelColor(tooltipItem) {
            var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            var options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
                borderColor: options.borderColor,
                backgroundColor: options.backgroundColor,
                borderWidth: options.borderWidth,
                borderDash: options.borderDash,
                borderDashOffset: options.borderDashOffset,
                borderRadius: 0
            };
        },
        labelTextColor: function labelTextColor() {
            return this.options.bodyColor;
        },
        labelPointStyle: function labelPointStyle(tooltipItem) {
            var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
            var options = meta.controller.getStyle(tooltipItem.dataIndex);
            return {
                pointStyle: options.pointStyle,
                rotation: options.rotation
            };
        },
        afterLabel: noop,
        afterBody: noop,
        beforeFooter: noop,
        footer: noop,
        afterFooter: noop
    };
    function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
        var result = callbacks[name].call(ctx, arg);
        if (typeof result === 'undefined') {
            return defaultCallbacks[name].call(ctx, arg);
        }
        return result;
    }
    var Tooltip = /*#__PURE__*/function (_Element8) {
        _inherits$w(Tooltip, _Element8);
        var _super18 = _createSuper$w(Tooltip);
        function Tooltip(config) {
            var _this31;
            _classCallCheck$x(this, Tooltip);
            _this31 = _super18.call(this);
            _this31.opacity = 0;
            _this31._active = [];
            _this31._eventPosition = undefined;
            _this31._size = undefined;
            _this31._cachedAnimations = undefined;
            _this31._tooltipItems = [];
            _this31.$animations = undefined;
            _this31.$context = undefined;
            _this31.chart = config.chart;
            _this31.options = config.options;
            _this31.dataPoints = undefined;
            _this31.title = undefined;
            _this31.beforeBody = undefined;
            _this31.body = undefined;
            _this31.afterBody = undefined;
            _this31.footer = undefined;
            _this31.xAlign = undefined;
            _this31.yAlign = undefined;
            _this31.x = undefined;
            _this31.y = undefined;
            _this31.height = undefined;
            _this31.width = undefined;
            _this31.caretX = undefined;
            _this31.caretY = undefined;
            _this31.labelColors = undefined;
            _this31.labelPointStyles = undefined;
            _this31.labelTextColors = undefined;
            return _this31;
        }
        _createClass$x(Tooltip, [{
            key: "initialize",
            value: function initialize(options) {
                this.options = options;
                this._cachedAnimations = undefined;
                this.$context = undefined;
            }
        }, {
            key: "_resolveAnimations",
            value: function _resolveAnimations() {
                var cached = this._cachedAnimations;
                if (cached) {
                    return cached;
                }
                var chart = this.chart;
                var options = this.options.setContext(this.getContext());
                var opts = options.enabled && chart.options.animation && options.animations;
                var animations = new Animations(this.chart, opts);
                if (opts._cacheable) {
                    this._cachedAnimations = Object.freeze(animations);
                }
                return animations;
            }
        }, {
            key: "getContext",
            value: function getContext() {
                return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
            }
        }, {
            key: "getTitle",
            value: function getTitle(context, options) {
                var callbacks = options.callbacks;
                var beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
                var title = invokeCallbackWithFallback(callbacks, 'title', this, context);
                var afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
                var lines = [];
                lines = pushOrConcat(lines, splitNewlines(beforeTitle));
                lines = pushOrConcat(lines, splitNewlines(title));
                lines = pushOrConcat(lines, splitNewlines(afterTitle));
                return lines;
            }
        }, {
            key: "getBeforeBody",
            value: function getBeforeBody(tooltipItems, options) {
                return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
            }
        }, {
            key: "getBody",
            value: function getBody(tooltipItems, options) {
                var _this32 = this;
                var callbacks = options.callbacks;
                var bodyItems = [];
                each(tooltipItems, function (context) {
                    var bodyItem = {
                        before: [],
                        lines: [],
                        after: []
                    };
                    var scoped = overrideCallbacks(callbacks, context);
                    pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', _this32, context)));
                    pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', _this32, context));
                    pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', _this32, context)));
                    bodyItems.push(bodyItem);
                });
                return bodyItems;
            }
        }, {
            key: "getAfterBody",
            value: function getAfterBody(tooltipItems, options) {
                return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
            }
        }, {
            key: "getFooter",
            value: function getFooter(tooltipItems, options) {
                var callbacks = options.callbacks;
                var beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
                var footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
                var afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
                var lines = [];
                lines = pushOrConcat(lines, splitNewlines(beforeFooter));
                lines = pushOrConcat(lines, splitNewlines(footer));
                lines = pushOrConcat(lines, splitNewlines(afterFooter));
                return lines;
            }
        }, {
            key: "_createItems",
            value: function _createItems(options) {
                var _this33 = this;
                var active = this._active;
                var data = this.chart.data;
                var labelColors = [];
                var labelPointStyles = [];
                var labelTextColors = [];
                var tooltipItems = [];
                var i, len;
                for (i = 0, len = active.length; i < len; ++i) {
                    tooltipItems.push(createTooltipItem(this.chart, active[i]));
                }
                if (options.filter) {
                    tooltipItems = tooltipItems.filter(function (element, index, array) {
                        return options.filter(element, index, array, data);
                    });
                }
                if (options.itemSort) {
                    tooltipItems = tooltipItems.sort(function (a, b) {
                        return options.itemSort(a, b, data);
                    });
                }
                each(tooltipItems, function (context) {
                    var scoped = overrideCallbacks(options.callbacks, context);
                    labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', _this33, context));
                    labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', _this33, context));
                    labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', _this33, context));
                });
                this.labelColors = labelColors;
                this.labelPointStyles = labelPointStyles;
                this.labelTextColors = labelTextColors;
                this.dataPoints = tooltipItems;
                return tooltipItems;
            }
        }, {
            key: "update",
            value: function update(changed, replay) {
                var options = this.options.setContext(this.getContext());
                var active = this._active;
                var properties;
                var tooltipItems = [];
                if (!active.length) {
                    if (this.opacity !== 0) {
                        properties = {
                            opacity: 0
                        };
                    }
                } else {
                    var position = positioners[options.position].call(this, active, this._eventPosition);
                    tooltipItems = this._createItems(options);
                    this.title = this.getTitle(tooltipItems, options);
                    this.beforeBody = this.getBeforeBody(tooltipItems, options);
                    this.body = this.getBody(tooltipItems, options);
                    this.afterBody = this.getAfterBody(tooltipItems, options);
                    this.footer = this.getFooter(tooltipItems, options);
                    var size = this._size = getTooltipSize(this, options);
                    var positionAndSize = Object.assign({}, position, size);
                    var alignment = determineAlignment(this.chart, options, positionAndSize);
                    var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
                    this.xAlign = alignment.xAlign;
                    this.yAlign = alignment.yAlign;
                    properties = {
                        opacity: 1,
                        x: backgroundPoint.x,
                        y: backgroundPoint.y,
                        width: size.width,
                        height: size.height,
                        caretX: position.x,
                        caretY: position.y
                    };
                }
                this._tooltipItems = tooltipItems;
                this.$context = undefined;
                if (properties) {
                    this._resolveAnimations().update(this, properties);
                }
                if (changed && options.external) {
                    options.external.call(this, {
                        chart: this.chart,
                        tooltip: this,
                        replay: replay
                    });
                }
            }
        }, {
            key: "drawCaret",
            value: function drawCaret(tooltipPoint, ctx, size, options) {
                var caretPosition = this.getCaretPosition(tooltipPoint, size, options);
                ctx.lineTo(caretPosition.x1, caretPosition.y1);
                ctx.lineTo(caretPosition.x2, caretPosition.y2);
                ctx.lineTo(caretPosition.x3, caretPosition.y3);
            }
        }, {
            key: "getCaretPosition",
            value: function getCaretPosition(tooltipPoint, size, options) {
                var xAlign = this.xAlign,
                    yAlign = this.yAlign;
                var caretSize = options.caretSize,
                    cornerRadius = options.cornerRadius;
                var _toTRBLCorners2 = toTRBLCorners(cornerRadius),
                    topLeft = _toTRBLCorners2.topLeft,
                    topRight = _toTRBLCorners2.topRight,
                    bottomLeft = _toTRBLCorners2.bottomLeft,
                    bottomRight = _toTRBLCorners2.bottomRight;
                var ptX = tooltipPoint.x,
                    ptY = tooltipPoint.y;
                var width = size.width,
                    height = size.height;
                var x1, x2, x3, y1, y2, y3;
                if (yAlign === 'center') {
                    y2 = ptY + height / 2;
                    if (xAlign === 'left') {
                        x1 = ptX;
                        x2 = x1 - caretSize;
                        y1 = y2 + caretSize;
                        y3 = y2 - caretSize;
                    } else {
                        x1 = ptX + width;
                        x2 = x1 + caretSize;
                        y1 = y2 - caretSize;
                        y3 = y2 + caretSize;
                    }
                    x3 = x1;
                } else {
                    if (xAlign === 'left') {
                        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
                    } else if (xAlign === 'right') {
                        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
                    } else {
                        x2 = this.caretX;
                    }
                    if (yAlign === 'top') {
                        y1 = ptY;
                        y2 = y1 - caretSize;
                        x1 = x2 - caretSize;
                        x3 = x2 + caretSize;
                    } else {
                        y1 = ptY + height;
                        y2 = y1 + caretSize;
                        x1 = x2 + caretSize;
                        x3 = x2 - caretSize;
                    }
                    y3 = y1;
                }
                return {
                    x1: x1,
                    x2: x2,
                    x3: x3,
                    y1: y1,
                    y2: y2,
                    y3: y3
                };
            }
        }, {
            key: "drawTitle",
            value: function drawTitle(pt, ctx, options) {
                var title = this.title;
                var length = title.length;
                var titleFont, titleSpacing, i;
                if (length) {
                    var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
                    pt.x = getAlignedX(this, options.titleAlign, options);
                    ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
                    ctx.textBaseline = 'middle';
                    titleFont = toFont(options.titleFont);
                    titleSpacing = options.titleSpacing;
                    ctx.fillStyle = options.titleColor;
                    ctx.font = titleFont.string;
                    for (i = 0; i < length; ++i) {
                        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                        pt.y += titleFont.lineHeight + titleSpacing;
                        if (i + 1 === length) {
                            pt.y += options.titleMarginBottom - titleSpacing;
                        }
                    }
                }
            }
        }, {
            key: "_drawColorBox",
            value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {
                var labelColors = this.labelColors[i];
                var labelPointStyle = this.labelPointStyles[i];
                var boxHeight = options.boxHeight,
                    boxWidth = options.boxWidth,
                    boxPadding = options.boxPadding;
                var bodyFont = toFont(options.bodyFont);
                var colorX = getAlignedX(this, 'left', options);
                var rtlColorX = rtlHelper.x(colorX);
                var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
                var colorY = pt.y + yOffSet;
                if (options.usePointStyle) {
                    var drawOptions = {
                        radius: Math.min(boxWidth, boxHeight) / 2,
                        pointStyle: labelPointStyle.pointStyle,
                        rotation: labelPointStyle.rotation,
                        borderWidth: 1
                    };
                    var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
                    var centerY = colorY + boxHeight / 2;
                    ctx.strokeStyle = options.multiKeyBackground;
                    ctx.fillStyle = options.multiKeyBackground;
                    drawPoint(ctx, drawOptions, centerX, centerY);
                    ctx.strokeStyle = labelColors.borderColor;
                    ctx.fillStyle = labelColors.backgroundColor;
                    drawPoint(ctx, drawOptions, centerX, centerY);
                } else {
                    ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(labelColors.borderWidth))) : labelColors.borderWidth || 1;
                    ctx.strokeStyle = labelColors.borderColor;
                    ctx.setLineDash(labelColors.borderDash || []);
                    ctx.lineDashOffset = labelColors.borderDashOffset || 0;
                    var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
                    var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
                    var borderRadius = toTRBLCorners(labelColors.borderRadius);
                    if (Object.values(borderRadius).some(function (v) {
                        return v !== 0;
                    })) {
                        ctx.beginPath();
                        ctx.fillStyle = options.multiKeyBackground;
                        addRoundedRectPath(ctx, {
                            x: outerX,
                            y: colorY,
                            w: boxWidth,
                            h: boxHeight,
                            radius: borderRadius
                        });
                        ctx.fill();
                        ctx.stroke();
                        ctx.fillStyle = labelColors.backgroundColor;
                        ctx.beginPath();
                        addRoundedRectPath(ctx, {
                            x: innerX,
                            y: colorY + 1,
                            w: boxWidth - 2,
                            h: boxHeight - 2,
                            radius: borderRadius
                        });
                        ctx.fill();
                    } else {
                        ctx.fillStyle = options.multiKeyBackground;
                        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                        ctx.fillStyle = labelColors.backgroundColor;
                        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
                    }
                }
                ctx.fillStyle = this.labelTextColors[i];
            }
        }, {
            key: "drawBody",
            value: function drawBody(pt, ctx, options) {
                var body = this.body;
                var bodySpacing = options.bodySpacing,
                    bodyAlign = options.bodyAlign,
                    displayColors = options.displayColors,
                    boxHeight = options.boxHeight,
                    boxWidth = options.boxWidth,
                    boxPadding = options.boxPadding;
                var bodyFont = toFont(options.bodyFont);
                var bodyLineHeight = bodyFont.lineHeight;
                var xLinePadding = 0;
                var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
                var fillLineOfText = function fillLineOfText(line) {
                    ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
                    pt.y += bodyLineHeight + bodySpacing;
                };
                var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
                var bodyItem, textColor, lines, i, j, ilen, jlen;
                ctx.textAlign = bodyAlign;
                ctx.textBaseline = 'middle';
                ctx.font = bodyFont.string;
                pt.x = getAlignedX(this, bodyAlignForCalculation, options);
                ctx.fillStyle = options.bodyColor;
                each(this.beforeBody, fillLineOfText);
                xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
                for (i = 0, ilen = body.length; i < ilen; ++i) {
                    bodyItem = body[i];
                    textColor = this.labelTextColors[i];
                    ctx.fillStyle = textColor;
                    each(bodyItem.before, fillLineOfText);
                    lines = bodyItem.lines;
                    if (displayColors && lines.length) {
                        this._drawColorBox(ctx, pt, i, rtlHelper, options);
                        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
                    }
                    for (j = 0, jlen = lines.length; j < jlen; ++j) {
                        fillLineOfText(lines[j]);
                        bodyLineHeight = bodyFont.lineHeight;
                    }
                    each(bodyItem.after, fillLineOfText);
                }
                xLinePadding = 0;
                bodyLineHeight = bodyFont.lineHeight;
                each(this.afterBody, fillLineOfText);
                pt.y -= bodySpacing;
            }
        }, {
            key: "drawFooter",
            value: function drawFooter(pt, ctx, options) {
                var footer = this.footer;
                var length = footer.length;
                var footerFont, i;
                if (length) {
                    var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
                    pt.x = getAlignedX(this, options.footerAlign, options);
                    pt.y += options.footerMarginTop;
                    ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
                    ctx.textBaseline = 'middle';
                    footerFont = toFont(options.footerFont);
                    ctx.fillStyle = options.footerColor;
                    ctx.font = footerFont.string;
                    for (i = 0; i < length; ++i) {
                        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                        pt.y += footerFont.lineHeight + options.footerSpacing;
                    }
                }
            }
        }, {
            key: "drawBackground",
            value: function drawBackground(pt, ctx, tooltipSize, options) {
                var xAlign = this.xAlign,
                    yAlign = this.yAlign;
                var x = pt.x,
                    y = pt.y;
                var width = tooltipSize.width,
                    height = tooltipSize.height;
                var _toTRBLCorners3 = toTRBLCorners(options.cornerRadius),
                    topLeft = _toTRBLCorners3.topLeft,
                    topRight = _toTRBLCorners3.topRight,
                    bottomLeft = _toTRBLCorners3.bottomLeft,
                    bottomRight = _toTRBLCorners3.bottomRight;
                ctx.fillStyle = options.backgroundColor;
                ctx.strokeStyle = options.borderColor;
                ctx.lineWidth = options.borderWidth;
                ctx.beginPath();
                ctx.moveTo(x + topLeft, y);
                if (yAlign === 'top') {
                    this.drawCaret(pt, ctx, tooltipSize, options);
                }
                ctx.lineTo(x + width - topRight, y);
                ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
                if (yAlign === 'center' && xAlign === 'right') {
                    this.drawCaret(pt, ctx, tooltipSize, options);
                }
                ctx.lineTo(x + width, y + height - bottomRight);
                ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
                if (yAlign === 'bottom') {
                    this.drawCaret(pt, ctx, tooltipSize, options);
                }
                ctx.lineTo(x + bottomLeft, y + height);
                ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
                if (yAlign === 'center' && xAlign === 'left') {
                    this.drawCaret(pt, ctx, tooltipSize, options);
                }
                ctx.lineTo(x, y + topLeft);
                ctx.quadraticCurveTo(x, y, x + topLeft, y);
                ctx.closePath();
                ctx.fill();
                if (options.borderWidth > 0) {
                    ctx.stroke();
                }
            }
        }, {
            key: "_updateAnimationTarget",
            value: function _updateAnimationTarget(options) {
                var chart = this.chart;
                var anims = this.$animations;
                var animX = anims && anims.x;
                var animY = anims && anims.y;
                if (animX || animY) {
                    var position = positioners[options.position].call(this, this._active, this._eventPosition);
                    if (!position) {
                        return;
                    }
                    var size = this._size = getTooltipSize(this, options);
                    var positionAndSize = Object.assign({}, position, this._size);
                    var alignment = determineAlignment(chart, options, positionAndSize);
                    var point = getBackgroundPoint(options, positionAndSize, alignment, chart);
                    if (animX._to !== point.x || animY._to !== point.y) {
                        this.xAlign = alignment.xAlign;
                        this.yAlign = alignment.yAlign;
                        this.width = size.width;
                        this.height = size.height;
                        this.caretX = position.x;
                        this.caretY = position.y;
                        this._resolveAnimations().update(this, point);
                    }
                }
            }
        }, {
            key: "_willRender",
            value: function _willRender() {
                return !!this.opacity;
            }
        }, {
            key: "draw",
            value: function draw(ctx) {
                var options = this.options.setContext(this.getContext());
                var opacity = this.opacity;
                if (!opacity) {
                    return;
                }
                this._updateAnimationTarget(options);
                var tooltipSize = {
                    width: this.width,
                    height: this.height
                };
                var pt = {
                    x: this.x,
                    y: this.y
                };
                opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
                var padding = toPadding(options.padding);
                var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
                if (options.enabled && hasTooltipContent) {
                    ctx.save();
                    ctx.globalAlpha = opacity;
                    this.drawBackground(pt, ctx, tooltipSize, options);
                    overrideTextDirection(ctx, options.textDirection);
                    pt.y += padding.top;
                    this.drawTitle(pt, ctx, options);
                    this.drawBody(pt, ctx, options);
                    this.drawFooter(pt, ctx, options);
                    restoreTextDirection(ctx, options.textDirection);
                    ctx.restore();
                }
            }
        }, {
            key: "getActiveElements",
            value: function getActiveElements() {
                return this._active || [];
            }
        }, {
            key: "setActiveElements",
            value: function setActiveElements(activeElements, eventPosition) {
                var _this34 = this;
                var lastActive = this._active;
                var active = activeElements.map(function (_ref11) {
                    var datasetIndex = _ref11.datasetIndex,
                        index = _ref11.index;
                    var meta = _this34.chart.getDatasetMeta(datasetIndex);
                    if (!meta) {
                        throw new Error('Cannot find a dataset at index ' + datasetIndex);
                    }
                    return {
                        datasetIndex: datasetIndex,
                        element: meta.data[index],
                        index: index
                    };
                });
                var changed = !_elementsEqual(lastActive, active);
                var positionChanged = this._positionChanged(active, eventPosition);
                if (changed || positionChanged) {
                    this._active = active;
                    this._eventPosition = eventPosition;
                    this._ignoreReplayEvents = true;
                    this.update(true);
                }
            }
        }, {
            key: "handleEvent",
            value: function handleEvent(e, replay) {
                var inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                if (replay && this._ignoreReplayEvents) {
                    return false;
                }
                this._ignoreReplayEvents = false;
                var options = this.options;
                var lastActive = this._active || [];
                var active = this._getActiveElements(e, lastActive, replay, inChartArea);
                var positionChanged = this._positionChanged(active, e);
                var changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
                if (changed) {
                    this._active = active;
                    if (options.enabled || options.external) {
                        this._eventPosition = {
                            x: e.x,
                            y: e.y
                        };
                        this.update(true, replay);
                    }
                }
                return changed;
            }
        }, {
            key: "_getActiveElements",
            value: function _getActiveElements(e, lastActive, replay, inChartArea) {
                var options = this.options;
                if (e.type === 'mouseout') {
                    return [];
                }
                if (!inChartArea) {
                    return lastActive;
                }
                var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
                if (options.reverse) {
                    active.reverse();
                }
                return active;
            }
        }, {
            key: "_positionChanged",
            value: function _positionChanged(active, e) {
                var caretX = this.caretX,
                    caretY = this.caretY,
                    options = this.options;
                var position = positioners[options.position].call(this, active, e);
                return position !== false && (caretX !== position.x || caretY !== position.y);
            }
        }]);
        return Tooltip;
    }(Element);
    _defineProperty$w(Tooltip, "positioners", positioners);
    var plugin_tooltip = {
        id: 'tooltip',
        _element: Tooltip,
        positioners: positioners,
        afterInit: function afterInit(chart, _args, options) {
            if (options) {
                chart.tooltip = new Tooltip({
                    chart: chart,
                    options: options
                });
            }
        },
        beforeUpdate: function beforeUpdate(chart, _args, options) {
            if (chart.tooltip) {
                chart.tooltip.initialize(options);
            }
        },
        reset: function reset(chart, _args, options) {
            if (chart.tooltip) {
                chart.tooltip.initialize(options);
            }
        },
        afterDraw: function afterDraw(chart) {
            var tooltip = chart.tooltip;
            if (tooltip && tooltip._willRender()) {
                var args = {
                    tooltip: tooltip
                };
                if (chart.notifyPlugins('beforeTooltipDraw', _objectSpread2(_objectSpread2({}, args), {}, {
                    cancelable: true
                })) === false) {
                    return;
                }
                tooltip.draw(chart.ctx);
                chart.notifyPlugins('afterTooltipDraw', args);
            }
        },
        afterEvent: function afterEvent(chart, args) {
            if (chart.tooltip) {
                var useFinalPosition = args.replay;
                if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
                    args.changed = true;
                }
            }
        },
        defaults: {
            enabled: true,
            external: null,
            position: 'average',
            backgroundColor: 'rgba(0,0,0,0.8)',
            titleColor: '#fff',
            titleFont: {
                weight: 'bold'
            },
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleAlign: 'left',
            bodyColor: '#fff',
            bodySpacing: 2,
            bodyFont: {},
            bodyAlign: 'left',
            footerColor: '#fff',
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFont: {
                weight: 'bold'
            },
            footerAlign: 'left',
            padding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            boxHeight: function boxHeight(ctx, opts) {
                return opts.bodyFont.size;
            },
            boxWidth: function boxWidth(ctx, opts) {
                return opts.bodyFont.size;
            },
            multiKeyBackground: '#fff',
            displayColors: true,
            boxPadding: 0,
            borderColor: 'rgba(0,0,0,0)',
            borderWidth: 0,
            animation: {
                duration: 400,
                easing: 'easeOutQuart'
            },
            animations: {
                numbers: {
                    type: 'number',
                    properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']
                },
                opacity: {
                    easing: 'linear',
                    duration: 200
                }
            },
            callbacks: defaultCallbacks
        },
        defaultRoutes: {
            bodyFont: 'font',
            footerFont: 'font',
            titleFont: 'font'
        },
        descriptors: {
            _scriptable: function _scriptable(name) {
                return name !== 'filter' && name !== 'itemSort' && name !== 'external';
            },
            _indexable: false,
            callbacks: {
                _scriptable: false,
                _indexable: false
            },
            animation: {
                _fallback: false
            },
            animations: {
                _fallback: 'animation'
            }
        },
        additionalOptionScopes: ['interaction']
    };
    var plugins = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Colors: plugin_colors,
        Decimation: plugin_decimation,
        Filler: index,
        Legend: plugin_legend,
        SubTitle: plugin_subtitle,
        Title: plugin_title,
        Tooltip: plugin_tooltip
    });
    var addIfString = function addIfString(labels, raw, index, addedLabels) {
        if (typeof raw === 'string') {
            index = labels.push(raw) - 1;
            addedLabels.unshift({
                index: index,
                label: raw
            });
        } else if (isNaN(raw)) {
            index = null;
        }
        return index;
    };
    function findOrAddLabel(labels, raw, index, addedLabels) {
        var first = labels.indexOf(raw);
        if (first === -1) {
            return addIfString(labels, raw, index, addedLabels);
        }
        var last = labels.lastIndexOf(raw);
        return first !== last ? index : first;
    }
    var validIndex = function validIndex(index, max) {
        return index === null ? null : _limitValue(Math.round(index), 0, max);
    };
    function _getLabelForValue(value) {
        var labels = this.getLabels();
        if (value >= 0 && value < labels.length) {
            return labels[value];
        }
        return value;
    }
    var CategoryScale = /*#__PURE__*/function (_Scale) {
        _inherits$w(CategoryScale, _Scale);
        var _super19 = _createSuper$w(CategoryScale);
        function CategoryScale(cfg) {
            var _this35;
            _classCallCheck$x(this, CategoryScale);
            _this35 = _super19.call(this, cfg);
            _this35._startValue = undefined;
            _this35._valueRange = 0;
            _this35._addedLabels = [];
            return _this35;
        }
        _createClass$x(CategoryScale, [{
            key: "init",
            value: function init(scaleOptions) {
                var added = this._addedLabels;
                if (added.length) {
                    var labels = this.getLabels();
                    var _iterator25 = _createForOfIteratorHelper$1(added),
                        _step25;
                    try {
                        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                            var _step25$value = _step25.value,
                                _index3 = _step25$value.index,
                                label = _step25$value.label;
                            if (labels[_index3] === label) {
                                labels.splice(_index3, 1);
                            }
                        }
                    } catch (err) {
                        _iterator25.e(err);
                    } finally {
                        _iterator25.f();
                    }
                    this._addedLabels = [];
                }
                _get(_getPrototypeOf$w(CategoryScale.prototype), "init", this).call(this, scaleOptions);
            }
        }, {
            key: "parse",
            value: function parse(raw, index) {
                if (isNullOrUndef(raw)) {
                    return null;
                }
                var labels = this.getLabels();
                index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
                return validIndex(index, labels.length - 1);
            }
        }, {
            key: "determineDataLimits",
            value: function determineDataLimits() {
                var _this$getUserBounds2 = this.getUserBounds(),
                    minDefined = _this$getUserBounds2.minDefined,
                    maxDefined = _this$getUserBounds2.maxDefined;
                var _this$getMinMax = this.getMinMax(true),
                    min = _this$getMinMax.min,
                    max = _this$getMinMax.max;
                if (this.options.bounds === 'ticks') {
                    if (!minDefined) {
                        min = 0;
                    }
                    if (!maxDefined) {
                        max = this.getLabels().length - 1;
                    }
                }
                this.min = min;
                this.max = max;
            }
        }, {
            key: "buildTicks",
            value: function buildTicks() {
                var min = this.min;
                var max = this.max;
                var offset = this.options.offset;
                var ticks = [];
                var labels = this.getLabels();
                labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
                this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
                this._startValue = this.min - (offset ? 0.5 : 0);
                for (var value = min; value <= max; value++) {
                    ticks.push({
                        value: value
                    });
                }
                return ticks;
            }
        }, {
            key: "getLabelForValue",
            value: function getLabelForValue(value) {
                return _getLabelForValue.call(this, value);
            }
        }, {
            key: "configure",
            value: function configure() {
                _get(_getPrototypeOf$w(CategoryScale.prototype), "configure", this).call(this);
                if (!this.isHorizontal()) {
                    this._reversePixels = !this._reversePixels;
                }
            }
        }, {
            key: "getPixelForValue",
            value: function getPixelForValue(value) {
                if (typeof value !== 'number') {
                    value = this.parse(value);
                }
                return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
            }
        }, {
            key: "getPixelForTick",
            value: function getPixelForTick(index) {
                var ticks = this.ticks;
                if (index < 0 || index > ticks.length - 1) {
                    return null;
                }
                return this.getPixelForValue(ticks[index].value);
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {
                return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
            }
        }, {
            key: "getBasePixel",
            value: function getBasePixel() {
                return this.bottom;
            }
        }]);
        return CategoryScale;
    }(Scale);
    _defineProperty$w(CategoryScale, "id", 'category');
    _defineProperty$w(CategoryScale, "defaults", {
        ticks: {
            callback: _getLabelForValue
        }
    });
    function generateTicks$1(generationOptions, dataRange) {
        var ticks = [];
        var MIN_SPACING = 1e-14;
        var bounds = generationOptions.bounds,
            step = generationOptions.step,
            min = generationOptions.min,
            max = generationOptions.max,
            precision = generationOptions.precision,
            count = generationOptions.count,
            maxTicks = generationOptions.maxTicks,
            maxDigits = generationOptions.maxDigits,
            includeBounds = generationOptions.includeBounds;
        var unit = step || 1;
        var maxSpaces = maxTicks - 1;
        var rmin = dataRange.min,
            rmax = dataRange.max;
        var minDefined = !isNullOrUndef(min);
        var maxDefined = !isNullOrUndef(max);
        var countDefined = !isNullOrUndef(count);
        var minSpacing = (rmax - rmin) / (maxDigits + 1);
        var spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
        var factor, niceMin, niceMax, numSpaces;
        if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
            return [{
                value: rmin
            }, {
                value: rmax
            }];
        }
        numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
        if (numSpaces > maxSpaces) {
            spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
        }
        if (!isNullOrUndef(precision)) {
            factor = Math.pow(10, precision);
            spacing = Math.ceil(spacing * factor) / factor;
        }
        if (bounds === 'ticks') {
            niceMin = Math.floor(rmin / spacing) * spacing;
            niceMax = Math.ceil(rmax / spacing) * spacing;
        } else {
            niceMin = rmin;
            niceMax = rmax;
        }
        if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
            numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
            spacing = (max - min) / numSpaces;
            niceMin = min;
            niceMax = max;
        } else if (countDefined) {
            niceMin = minDefined ? min : niceMin;
            niceMax = maxDefined ? max : niceMax;
            numSpaces = count - 1;
            spacing = (niceMax - niceMin) / numSpaces;
        } else {
            numSpaces = (niceMax - niceMin) / spacing;
            if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                numSpaces = Math.round(numSpaces);
            } else {
                numSpaces = Math.ceil(numSpaces);
            }
        }
        var decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
        factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
        niceMin = Math.round(niceMin * factor) / factor;
        niceMax = Math.round(niceMax * factor) / factor;
        var j = 0;
        if (minDefined) {
            if (includeBounds && niceMin !== min) {
                ticks.push({
                    value: min
                });
                if (niceMin < min) {
                    j++;
                }
                if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
                    j++;
                }
            } else if (niceMin < min) {
                j++;
            }
        }
        for (; j < numSpaces; ++j) {
            ticks.push({
                value: Math.round((niceMin + j * spacing) * factor) / factor
            });
        }
        if (maxDefined && includeBounds && niceMax !== max) {
            if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
                ticks[ticks.length - 1].value = max;
            } else {
                ticks.push({
                    value: max
                });
            }
        } else if (!maxDefined || niceMax === max) {
            ticks.push({
                value: niceMax
            });
        }
        return ticks;
    }
    function relativeLabelSize(value, minSpacing, _ref12) {
        var horizontal = _ref12.horizontal,
            minRotation = _ref12.minRotation;
        var rad = toRadians(minRotation);
        var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
        var length = 0.75 * minSpacing * ('' + value).length;
        return Math.min(minSpacing / ratio, length);
    }
    var LinearScaleBase = /*#__PURE__*/function (_Scale2) {
        _inherits$w(LinearScaleBase, _Scale2);
        var _super20 = _createSuper$w(LinearScaleBase);
        function LinearScaleBase(cfg) {
            var _this36;
            _classCallCheck$x(this, LinearScaleBase);
            _this36 = _super20.call(this, cfg);
            _this36.start = undefined;
            _this36.end = undefined;
            _this36._startValue = undefined;
            _this36._endValue = undefined;
            _this36._valueRange = 0;
            return _this36;
        }
        _createClass$x(LinearScaleBase, [{
            key: "parse",
            value: function parse(raw, index) {
                if (isNullOrUndef(raw)) {
                    return null;
                }
                if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
                    return null;
                }
                return +raw;
            }
        }, {
            key: "handleTickRangeOptions",
            value: function handleTickRangeOptions() {
                var beginAtZero = this.options.beginAtZero;
                var _this$getUserBounds3 = this.getUserBounds(),
                    minDefined = _this$getUserBounds3.minDefined,
                    maxDefined = _this$getUserBounds3.maxDefined;
                var min = this.min,
                    max = this.max;
                var setMin = function setMin(v) {
                    return min = minDefined ? min : v;
                };
                var setMax = function setMax(v) {
                    return max = maxDefined ? max : v;
                };
                if (beginAtZero) {
                    var minSign = sign(min);
                    var maxSign = sign(max);
                    if (minSign < 0 && maxSign < 0) {
                        setMax(0);
                    } else if (minSign > 0 && maxSign > 0) {
                        setMin(0);
                    }
                }
                if (min === max) {
                    var offset = max === 0 ? 1 : Math.abs(max * 0.05);
                    setMax(max + offset);
                    if (!beginAtZero) {
                        setMin(min - offset);
                    }
                }
                this.min = min;
                this.max = max;
            }
        }, {
            key: "getTickLimit",
            value: function getTickLimit() {
                var tickOpts = this.options.ticks;
                var maxTicksLimit = tickOpts.maxTicksLimit,
                    stepSize = tickOpts.stepSize;
                var maxTicks;
                if (stepSize) {
                    maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
                    if (maxTicks > 1000) {
                        console.warn("scales.".concat(this.id, ".ticks.stepSize: ").concat(stepSize, " would result generating up to ").concat(maxTicks, " ticks. Limiting to 1000."));
                        maxTicks = 1000;
                    }
                } else {
                    maxTicks = this.computeTickLimit();
                    maxTicksLimit = maxTicksLimit || 11;
                }
                if (maxTicksLimit) {
                    maxTicks = Math.min(maxTicksLimit, maxTicks);
                }
                return maxTicks;
            }
        }, {
            key: "computeTickLimit",
            value: function computeTickLimit() {
                return Number.POSITIVE_INFINITY;
            }
        }, {
            key: "buildTicks",
            value: function buildTicks() {
                var opts = this.options;
                var tickOpts = opts.ticks;
                var maxTicks = this.getTickLimit();
                maxTicks = Math.max(2, maxTicks);
                var numericGeneratorOptions = {
                    maxTicks: maxTicks,
                    bounds: opts.bounds,
                    min: opts.min,
                    max: opts.max,
                    precision: tickOpts.precision,
                    step: tickOpts.stepSize,
                    count: tickOpts.count,
                    maxDigits: this._maxDigits(),
                    horizontal: this.isHorizontal(),
                    minRotation: tickOpts.minRotation || 0,
                    includeBounds: tickOpts.includeBounds !== false
                };
                var dataRange = this._range || this;
                var ticks = generateTicks$1(numericGeneratorOptions, dataRange);
                if (opts.bounds === 'ticks') {
                    _setMinAndMaxByKey(ticks, this, 'value');
                }
                if (opts.reverse) {
                    ticks.reverse();
                    this.start = this.max;
                    this.end = this.min;
                } else {
                    this.start = this.min;
                    this.end = this.max;
                }
                return ticks;
            }
        }, {
            key: "configure",
            value: function configure() {
                var ticks = this.ticks;
                var start = this.min;
                var end = this.max;
                _get(_getPrototypeOf$w(LinearScaleBase.prototype), "configure", this).call(this);
                if (this.options.offset && ticks.length) {
                    var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
                    start -= offset;
                    end += offset;
                }
                this._startValue = start;
                this._endValue = end;
                this._valueRange = end - start;
            }
        }, {
            key: "getLabelForValue",
            value: function getLabelForValue(value) {
                return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
            }
        }]);
        return LinearScaleBase;
    }(Scale);
    var LinearScale = /*#__PURE__*/function (_LinearScaleBase) {
        _inherits$w(LinearScale, _LinearScaleBase);
        var _super21 = _createSuper$w(LinearScale);
        function LinearScale() {
            _classCallCheck$x(this, LinearScale);
            return _super21.apply(this, arguments);
        }
        _createClass$x(LinearScale, [{
            key: "determineDataLimits",
            value: function determineDataLimits() {
                var _this$getMinMax2 = this.getMinMax(true),
                    min = _this$getMinMax2.min,
                    max = _this$getMinMax2.max;
                this.min = isNumberFinite(min) ? min : 0;
                this.max = isNumberFinite(max) ? max : 1;
                this.handleTickRangeOptions();
            }
        }, {
            key: "computeTickLimit",
            value: function computeTickLimit() {
                var horizontal = this.isHorizontal();
                var length = horizontal ? this.width : this.height;
                var minRotation = toRadians(this.options.ticks.minRotation);
                var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
                var tickFont = this._resolveTickFontOptions(0);
                return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
            }
        }, {
            key: "getPixelForValue",
            value: function getPixelForValue(value) {
                return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {
                return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
            }
        }]);
        return LinearScale;
    }(LinearScaleBase);
    _defineProperty$w(LinearScale, "id", 'linear');
    _defineProperty$w(LinearScale, "defaults", {
        ticks: {
            callback: Ticks.formatters.numeric
        }
    });
    var log10Floor = function log10Floor(v) {
        return Math.floor(log10(v));
    };
    var changeExponent = function changeExponent(v, m) {
        return Math.pow(10, log10Floor(v) + m);
    };
    function isMajor(tickVal) {
        var remain = tickVal / Math.pow(10, log10Floor(tickVal));
        return remain === 1;
    }
    function steps(min, max, rangeExp) {
        var rangeStep = Math.pow(10, rangeExp);
        var start = Math.floor(min / rangeStep);
        var end = Math.ceil(max / rangeStep);
        return end - start;
    }
    function startExp(min, max) {
        var range = max - min;
        var rangeExp = log10Floor(range);
        while (steps(min, max, rangeExp) > 10) {
            rangeExp++;
        }
        while (steps(min, max, rangeExp) < 10) {
            rangeExp--;
        }
        return Math.min(rangeExp, log10Floor(min));
    }
    function generateTicks(generationOptions, _ref13) {
        var min = _ref13.min,
            max = _ref13.max;
        min = finiteOrDefault(generationOptions.min, min);
        var ticks = [];
        var minExp = log10Floor(min);
        var exp = startExp(min, max);
        var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
        var stepSize = Math.pow(10, exp);
        var base = minExp > exp ? Math.pow(10, minExp) : 0;
        var start = Math.round((min - base) * precision) / precision;
        var offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
        var significand = Math.floor((start - offset) / Math.pow(10, exp));
        var value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
        while (value < max) {
            ticks.push({
                value: value,
                major: isMajor(value),
                significand: significand
            });
            if (significand >= 10) {
                significand = significand < 15 ? 15 : 20;
            } else {
                significand++;
            }
            if (significand >= 20) {
                exp++;
                significand = 2;
                precision = exp >= 0 ? 1 : precision;
            }
            value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
        }
        var lastTick = finiteOrDefault(generationOptions.max, value);
        ticks.push({
            value: lastTick,
            major: isMajor(lastTick),
            significand: significand
        });
        return ticks;
    }
    var LogarithmicScale = /*#__PURE__*/function (_Scale3) {
        _inherits$w(LogarithmicScale, _Scale3);
        var _super22 = _createSuper$w(LogarithmicScale);
        function LogarithmicScale(cfg) {
            var _this37;
            _classCallCheck$x(this, LogarithmicScale);
            _this37 = _super22.call(this, cfg);
            _this37.start = undefined;
            _this37.end = undefined;
            _this37._startValue = undefined;
            _this37._valueRange = 0;
            return _this37;
        }
        _createClass$x(LogarithmicScale, [{
            key: "parse",
            value: function parse(raw, index) {
                var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
                if (value === 0) {
                    this._zero = true;
                    return undefined;
                }
                return isNumberFinite(value) && value > 0 ? value : null;
            }
        }, {
            key: "determineDataLimits",
            value: function determineDataLimits() {
                var _this$getMinMax3 = this.getMinMax(true),
                    min = _this$getMinMax3.min,
                    max = _this$getMinMax3.max;
                this.min = isNumberFinite(min) ? Math.max(0, min) : null;
                this.max = isNumberFinite(max) ? Math.max(0, max) : null;
                if (this.options.beginAtZero) {
                    this._zero = true;
                }
                if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
                    this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
                }
                this.handleTickRangeOptions();
            }
        }, {
            key: "handleTickRangeOptions",
            value: function handleTickRangeOptions() {
                var _this$getUserBounds4 = this.getUserBounds(),
                    minDefined = _this$getUserBounds4.minDefined,
                    maxDefined = _this$getUserBounds4.maxDefined;
                var min = this.min;
                var max = this.max;
                var setMin = function setMin(v) {
                    return min = minDefined ? min : v;
                };
                var setMax = function setMax(v) {
                    return max = maxDefined ? max : v;
                };
                if (min === max) {
                    if (min <= 0) {
                        setMin(1);
                        setMax(10);
                    } else {
                        setMin(changeExponent(min, -1));
                        setMax(changeExponent(max, +1));
                    }
                }
                if (min <= 0) {
                    setMin(changeExponent(max, -1));
                }
                if (max <= 0) {
                    setMax(changeExponent(min, +1));
                }
                this.min = min;
                this.max = max;
            }
        }, {
            key: "buildTicks",
            value: function buildTicks() {
                var opts = this.options;
                var generationOptions = {
                    min: this._userMin,
                    max: this._userMax
                };
                var ticks = generateTicks(generationOptions, this);
                if (opts.bounds === 'ticks') {
                    _setMinAndMaxByKey(ticks, this, 'value');
                }
                if (opts.reverse) {
                    ticks.reverse();
                    this.start = this.max;
                    this.end = this.min;
                } else {
                    this.start = this.min;
                    this.end = this.max;
                }
                return ticks;
            }
        }, {
            key: "getLabelForValue",
            value: function getLabelForValue(value) {
                return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
            }
        }, {
            key: "configure",
            value: function configure() {
                var start = this.min;
                _get(_getPrototypeOf$w(LogarithmicScale.prototype), "configure", this).call(this);
                this._startValue = log10(start);
                this._valueRange = log10(this.max) - log10(start);
            }
        }, {
            key: "getPixelForValue",
            value: function getPixelForValue(value) {
                if (value === undefined || value === 0) {
                    value = this.min;
                }
                if (value === null || isNaN(value)) {
                    return NaN;
                }
                return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {
                var decimal = this.getDecimalForPixel(pixel);
                return Math.pow(10, this._startValue + decimal * this._valueRange);
            }
        }]);
        return LogarithmicScale;
    }(Scale);
    _defineProperty$w(LogarithmicScale, "id", 'logarithmic');
    _defineProperty$w(LogarithmicScale, "defaults", {
        ticks: {
            callback: Ticks.formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    });
    function getTickBackdropHeight(opts) {
        var tickOpts = opts.ticks;
        if (tickOpts.display && opts.display) {
            var padding = toPadding(tickOpts.backdropPadding);
            return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
        }
        return 0;
    }
    function measureLabelSize(ctx, font, label) {
        label = isArray(label) ? label : [label];
        return {
            w: _longestText(ctx, font.string, label),
            h: label.length * font.lineHeight
        };
    }
    function determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) {
            return {
                start: pos - size / 2,
                end: pos + size / 2
            };
        } else if (angle < min || angle > max) {
            return {
                start: pos - size,
                end: pos
            };
        }
        return {
            start: pos,
            end: pos + size
        };
    }
    function fitWithPointLabels(scale) {
        var orig = {
            l: scale.left + scale._padding.left,
            r: scale.right - scale._padding.right,
            t: scale.top + scale._padding.top,
            b: scale.bottom - scale._padding.bottom
        };
        var limits = Object.assign({}, orig);
        var labelSizes = [];
        var padding = [];
        var valueCount = scale._pointLabels.length;
        var pointLabelOpts = scale.options.pointLabels;
        var additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
        for (var i = 0; i < valueCount; i++) {
            var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
            padding[i] = opts.padding;
            var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
            var plFont = toFont(opts.font);
            var textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
            labelSizes[i] = textSize;
            var angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
            var angle = Math.round(toDegrees(angleRadians));
            var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
            var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
            updateLimits(limits, orig, angleRadians, hLimits, vLimits);
        }
        scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
        scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
    }
    function updateLimits(limits, orig, angle, hLimits, vLimits) {
        var sin = Math.abs(Math.sin(angle));
        var cos = Math.abs(Math.cos(angle));
        var x = 0;
        var y = 0;
        if (hLimits.start < orig.l) {
            x = (orig.l - hLimits.start) / sin;
            limits.l = Math.min(limits.l, orig.l - x);
        } else if (hLimits.end > orig.r) {
            x = (hLimits.end - orig.r) / sin;
            limits.r = Math.max(limits.r, orig.r + x);
        }
        if (vLimits.start < orig.t) {
            y = (orig.t - vLimits.start) / cos;
            limits.t = Math.min(limits.t, orig.t - y);
        } else if (vLimits.end > orig.b) {
            y = (vLimits.end - orig.b) / cos;
            limits.b = Math.max(limits.b, orig.b + y);
        }
    }
    function buildPointLabelItems(scale, labelSizes, padding) {
        var items = [];
        var valueCount = scale._pointLabels.length;
        var opts = scale.options;
        var extra = getTickBackdropHeight(opts) / 2;
        var outerDistance = scale.drawingArea;
        var additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;
        for (var i = 0; i < valueCount; i++) {
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
            var angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
            var size = labelSizes[i];
            var y = yForAngle(pointLabelPosition.y, size.h, angle);
            var textAlign = getTextAlignForAngle(angle);
            var left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
            items.push({
                x: pointLabelPosition.x,
                y: y,
                textAlign: textAlign,
                left: left,
                top: y,
                right: left + size.w,
                bottom: y + size.h
            });
        }
        return items;
    }
    function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
            return 'center';
        } else if (angle < 180) {
            return 'left';
        }
        return 'right';
    }
    function leftForTextAlign(x, w, align) {
        if (align === 'right') {
            x -= w;
        } else if (align === 'center') {
            x -= w / 2;
        }
        return x;
    }
    function yForAngle(y, h, angle) {
        if (angle === 90 || angle === 270) {
            y -= h / 2;
        } else if (angle > 270 || angle < 90) {
            y -= h;
        }
        return y;
    }
    function drawPointLabels(scale, labelCount) {
        var ctx = scale.ctx,
            pointLabels = scale.options.pointLabels;
        for (var i = labelCount - 1; i >= 0; i--) {
            var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
            var plFont = toFont(optsAtIndex.font);
            var _scale$_pointLabelIte = scale._pointLabelItems[i],
                x = _scale$_pointLabelIte.x,
                y = _scale$_pointLabelIte.y,
                textAlign = _scale$_pointLabelIte.textAlign,
                left = _scale$_pointLabelIte.left,
                top = _scale$_pointLabelIte.top,
                right = _scale$_pointLabelIte.right,
                bottom = _scale$_pointLabelIte.bottom;
            var backdropColor = optsAtIndex.backdropColor;
            if (!isNullOrUndef(backdropColor)) {
                var borderRadius = toTRBLCorners(optsAtIndex.borderRadius);
                var padding = toPadding(optsAtIndex.backdropPadding);
                ctx.fillStyle = backdropColor;
                var backdropLeft = left - padding.left;
                var backdropTop = top - padding.top;
                var backdropWidth = right - left + padding.width;
                var backdropHeight = bottom - top + padding.height;
                if (Object.values(borderRadius).some(function (v) {
                    return v !== 0;
                })) {
                    ctx.beginPath();
                    addRoundedRectPath(ctx, {
                        x: backdropLeft,
                        y: backdropTop,
                        w: backdropWidth,
                        h: backdropHeight,
                        radius: borderRadius
                    });
                    ctx.fill();
                } else {
                    ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
                }
            }
            renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
                color: optsAtIndex.color,
                textAlign: textAlign,
                textBaseline: 'middle'
            });
        }
    }
    function pathRadiusLine(scale, radius, circular, labelCount) {
        var ctx = scale.ctx;
        if (circular) {
            ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
        } else {
            var pointPosition = scale.getPointPosition(0, radius);
            ctx.moveTo(pointPosition.x, pointPosition.y);
            for (var i = 1; i < labelCount; i++) {
                pointPosition = scale.getPointPosition(i, radius);
                ctx.lineTo(pointPosition.x, pointPosition.y);
            }
        }
    }
    function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
        var ctx = scale.ctx;
        var circular = gridLineOpts.circular;
        var color = gridLineOpts.color,
            lineWidth = gridLineOpts.lineWidth;
        if (!circular && !labelCount || !color || !lineWidth || radius < 0) {
            return;
        }
        ctx.save();
        ctx.strokeStyle = color;
        ctx.lineWidth = lineWidth;
        ctx.setLineDash(borderOpts.dash);
        ctx.lineDashOffset = borderOpts.dashOffset;
        ctx.beginPath();
        pathRadiusLine(scale, radius, circular, labelCount);
        ctx.closePath();
        ctx.stroke();
        ctx.restore();
    }
    function createPointLabelContext(parent, index, label) {
        return createContext(parent, {
            label: label,
            index: index,
            type: 'pointLabel'
        });
    }
    var RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {
        _inherits$w(RadialLinearScale, _LinearScaleBase2);
        var _super23 = _createSuper$w(RadialLinearScale);
        function RadialLinearScale(cfg) {
            var _this38;
            _classCallCheck$x(this, RadialLinearScale);
            _this38 = _super23.call(this, cfg);
            _this38.xCenter = undefined;
            _this38.yCenter = undefined;
            _this38.drawingArea = undefined;
            _this38._pointLabels = [];
            _this38._pointLabelItems = [];
            return _this38;
        }
        _createClass$x(RadialLinearScale, [{
            key: "setDimensions",
            value: function setDimensions() {
                var padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
                var w = this.width = this.maxWidth - padding.width;
                var h = this.height = this.maxHeight - padding.height;
                this.xCenter = Math.floor(this.left + w / 2 + padding.left);
                this.yCenter = Math.floor(this.top + h / 2 + padding.top);
                this.drawingArea = Math.floor(Math.min(w, h) / 2);
            }
        }, {
            key: "determineDataLimits",
            value: function determineDataLimits() {
                var _this$getMinMax4 = this.getMinMax(false),
                    min = _this$getMinMax4.min,
                    max = _this$getMinMax4.max;
                this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
                this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
                this.handleTickRangeOptions();
            }
        }, {
            key: "computeTickLimit",
            value: function computeTickLimit() {
                return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
            }
        }, {
            key: "generateTickLabels",
            value: function generateTickLabels(ticks) {
                var _this39 = this;
                LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
                this._pointLabels = this.getLabels().map(function (value, index) {
                    var label = callback(_this39.options.pointLabels.callback, [value, index], _this39);
                    return label || label === 0 ? label : '';
                }).filter(function (v, i) {
                    return _this39.chart.getDataVisibility(i);
                });
            }
        }, {
            key: "fit",
            value: function fit() {
                var opts = this.options;
                if (opts.display && opts.pointLabels.display) {
                    fitWithPointLabels(this);
                } else {
                    this.setCenterPoint(0, 0, 0, 0);
                }
            }
        }, {
            key: "setCenterPoint",
            value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
                this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
                this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
                this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
            }
        }, {
            key: "getIndexAngle",
            value: function getIndexAngle(index) {
                var angleMultiplier = TAU / (this._pointLabels.length || 1);
                var startAngle = this.options.startAngle || 0;
                return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
            }
        }, {
            key: "getDistanceFromCenterForValue",
            value: function getDistanceFromCenterForValue(value) {
                if (isNullOrUndef(value)) {
                    return NaN;
                }
                var scalingFactor = this.drawingArea / (this.max - this.min);
                if (this.options.reverse) {
                    return (this.max - value) * scalingFactor;
                }
                return (value - this.min) * scalingFactor;
            }
        }, {
            key: "getValueForDistanceFromCenter",
            value: function getValueForDistanceFromCenter(distance) {
                if (isNullOrUndef(distance)) {
                    return NaN;
                }
                var scaledDistance = distance / (this.drawingArea / (this.max - this.min));
                return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
            }
        }, {
            key: "getPointLabelContext",
            value: function getPointLabelContext(index) {
                var pointLabels = this._pointLabels || [];
                if (index >= 0 && index < pointLabels.length) {
                    var pointLabel = pointLabels[index];
                    return createPointLabelContext(this.getContext(), index, pointLabel);
                }
            }
        }, {
            key: "getPointPosition",
            value: function getPointPosition(index, distanceFromCenter) {
                var additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
                return {
                    x: Math.cos(angle) * distanceFromCenter + this.xCenter,
                    y: Math.sin(angle) * distanceFromCenter + this.yCenter,
                    angle: angle
                };
            }
        }, {
            key: "getPointPositionForValue",
            value: function getPointPositionForValue(index, value) {
                return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
            }
        }, {
            key: "getBasePosition",
            value: function getBasePosition(index) {
                return this.getPointPositionForValue(index || 0, this.getBaseValue());
            }
        }, {
            key: "getPointLabelPosition",
            value: function getPointLabelPosition(index) {
                var _this$_pointLabelItem = this._pointLabelItems[index],
                    left = _this$_pointLabelItem.left,
                    top = _this$_pointLabelItem.top,
                    right = _this$_pointLabelItem.right,
                    bottom = _this$_pointLabelItem.bottom;
                return {
                    left: left,
                    top: top,
                    right: right,
                    bottom: bottom
                };
            }
        }, {
            key: "drawBackground",
            value: function drawBackground() {
                var _this$options16 = this.options,
                    backgroundColor = _this$options16.backgroundColor,
                    circular = _this$options16.grid.circular;
                if (backgroundColor) {
                    var ctx = this.ctx;
                    ctx.save();
                    ctx.beginPath();
                    pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
                    ctx.closePath();
                    ctx.fillStyle = backgroundColor;
                    ctx.fill();
                    ctx.restore();
                }
            }
        }, {
            key: "drawGrid",
            value: function drawGrid() {
                var _this40 = this;
                var ctx = this.ctx;
                var opts = this.options;
                var angleLines = opts.angleLines,
                    grid = opts.grid,
                    border = opts.border;
                var labelCount = this._pointLabels.length;
                var i, offset, position;
                if (opts.pointLabels.display) {
                    drawPointLabels(this, labelCount);
                }
                if (grid.display) {
                    this.ticks.forEach(function (tick, index) {
                        if (index !== 0) {
                            offset = _this40.getDistanceFromCenterForValue(tick.value);
                            var context = _this40.getContext(index);
                            var optsAtIndex = grid.setContext(context);
                            var optsAtIndexBorder = border.setContext(context);
                            drawRadiusLine(_this40, optsAtIndex, offset, labelCount, optsAtIndexBorder);
                        }
                    });
                }
                if (angleLines.display) {
                    ctx.save();
                    for (i = labelCount - 1; i >= 0; i--) {
                        var optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                        var color = optsAtIndex.color,
                            lineWidth = optsAtIndex.lineWidth;
                        if (!lineWidth || !color) {
                            continue;
                        }
                        ctx.lineWidth = lineWidth;
                        ctx.strokeStyle = color;
                        ctx.setLineDash(optsAtIndex.borderDash);
                        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                        position = this.getPointPosition(i, offset);
                        ctx.beginPath();
                        ctx.moveTo(this.xCenter, this.yCenter);
                        ctx.lineTo(position.x, position.y);
                        ctx.stroke();
                    }
                    ctx.restore();
                }
            }
        }, {
            key: "drawBorder",
            value: function drawBorder() {}
        }, {
            key: "drawLabels",
            value: function drawLabels() {
                var _this41 = this;
                var ctx = this.ctx;
                var opts = this.options;
                var tickOpts = opts.ticks;
                if (!tickOpts.display) {
                    return;
                }
                var startAngle = this.getIndexAngle(0);
                var offset, width;
                ctx.save();
                ctx.translate(this.xCenter, this.yCenter);
                ctx.rotate(startAngle);
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                this.ticks.forEach(function (tick, index) {
                    if (index === 0 && !opts.reverse) {
                        return;
                    }
                    var optsAtIndex = tickOpts.setContext(_this41.getContext(index));
                    var tickFont = toFont(optsAtIndex.font);
                    offset = _this41.getDistanceFromCenterForValue(_this41.ticks[index].value);
                    if (optsAtIndex.showLabelBackdrop) {
                        ctx.font = tickFont.string;
                        width = ctx.measureText(tick.label).width;
                        ctx.fillStyle = optsAtIndex.backdropColor;
                        var padding = toPadding(optsAtIndex.backdropPadding);
                        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
                    }
                    renderText(ctx, tick.label, 0, -offset, tickFont, {
                        color: optsAtIndex.color
                    });
                });
                ctx.restore();
            }
        }, {
            key: "drawTitle",
            value: function drawTitle() {}
        }]);
        return RadialLinearScale;
    }(LinearScaleBase);
    _defineProperty$w(RadialLinearScale, "id", 'radialLinear');
    _defineProperty$w(RadialLinearScale, "defaults", {
        display: true,
        animate: true,
        position: 'chartArea',
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: Ticks.formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback: function callback(label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    });
    _defineProperty$w(RadialLinearScale, "defaultRoutes", {
        'angleLines.color': 'borderColor',
        'pointLabels.color': 'color',
        'ticks.color': 'color'
    });
    _defineProperty$w(RadialLinearScale, "descriptors", {
        angleLines: {
            _fallback: 'grid'
        }
    });
    var INTERVALS = {
        millisecond: {
            common: true,
            size: 1,
            steps: 1000
        },
        second: {
            common: true,
            size: 1000,
            steps: 60
        },
        minute: {
            common: true,
            size: 60000,
            steps: 60
        },
        hour: {
            common: true,
            size: 3600000,
            steps: 24
        },
        day: {
            common: true,
            size: 86400000,
            steps: 30
        },
        week: {
            common: false,
            size: 604800000,
            steps: 4
        },
        month: {
            common: true,
            size: 2.628e9,
            steps: 12
        },
        quarter: {
            common: false,
            size: 7.884e9,
            steps: 4
        },
        year: {
            common: true,
            size: 3.154e10
        }
    };
    var UNITS = /* #__PURE__ */Object.keys(INTERVALS);
    function sorter(a, b) {
        return a - b;
    }
    function _parse(scale, input) {
        if (isNullOrUndef(input)) {
            return null;
        }
        var adapter = scale._adapter;
        var _scale$_parseOpts = scale._parseOpts,
            parser = _scale$_parseOpts.parser,
            round = _scale$_parseOpts.round,
            isoWeekday = _scale$_parseOpts.isoWeekday;
        var value = input;
        if (typeof parser === 'function') {
            value = parser(value);
        }
        if (!isNumberFinite(value)) {
            value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);
        }
        if (value === null) {
            return null;
        }
        if (round) {
            value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
        }
        return +value;
    }
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
        var ilen = UNITS.length;
        for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
            var interval = INTERVALS[UNITS[i]];
            var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
            if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
                return UNITS[i];
            }
        }
        return UNITS[ilen - 1];
    }
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
        for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
            var unit = UNITS[i];
            if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
                return unit;
            }
        }
        return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }
    function determineMajorUnit(unit) {
        for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
            if (INTERVALS[UNITS[i]].common) {
                return UNITS[i];
            }
        }
    }
    function addTick(ticks, time, timestamps) {
        if (!timestamps) {
            ticks[time] = true;
        } else if (timestamps.length) {
            var _lookup2 = _lookup(timestamps, time),
                lo = _lookup2.lo,
                hi = _lookup2.hi;
            var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
            ticks[timestamp] = true;
        }
    }
    function setMajorTicks(scale, ticks, map, majorUnit) {
        var adapter = scale._adapter;
        var first = +adapter.startOf(ticks[0].value, majorUnit);
        var last = ticks[ticks.length - 1].value;
        var major, index;
        for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
            index = map[major];
            if (index >= 0) {
                ticks[index].major = true;
            }
        }
        return ticks;
    }
    function ticksFromTimestamps(scale, values, majorUnit) {
        var ticks = [];
        var map = {};
        var ilen = values.length;
        var i, value;
        for (i = 0; i < ilen; ++i) {
            value = values[i];
            map[value] = i;
            ticks.push({
                value: value,
                major: false
            });
        }
        return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }
    var TimeScale = /*#__PURE__*/function (_Scale4) {
        _inherits$w(TimeScale, _Scale4);
        var _super24 = _createSuper$w(TimeScale);
        function TimeScale(props) {
            var _this42;
            _classCallCheck$x(this, TimeScale);
            _this42 = _super24.call(this, props);
            _this42._cache = {
                data: [],
                labels: [],
                all: []
            };
            _this42._unit = 'day';
            _this42._majorUnit = undefined;
            _this42._offsets = {};
            _this42._normalized = false;
            _this42._parseOpts = undefined;
            return _this42;
        }
        _createClass$x(TimeScale, [{
            key: "init",
            value: function init(scaleOpts) {
                var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var time = scaleOpts.time || (scaleOpts.time = {});
                var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
                adapter.init(opts);
                mergeIf(time.displayFormats, adapter.formats());
                this._parseOpts = {
                    parser: time.parser,
                    round: time.round,
                    isoWeekday: time.isoWeekday
                };
                _get(_getPrototypeOf$w(TimeScale.prototype), "init", this).call(this, scaleOpts);
                this._normalized = opts.normalized;
            }
        }, {
            key: "parse",
            value: function parse(raw, index) {
                if (raw === undefined) {
                    return null;
                }
                return _parse(this, raw);
            }
        }, {
            key: "beforeLayout",
            value: function beforeLayout() {
                _get(_getPrototypeOf$w(TimeScale.prototype), "beforeLayout", this).call(this);
                this._cache = {
                    data: [],
                    labels: [],
                    all: []
                };
            }
        }, {
            key: "determineDataLimits",
            value: function determineDataLimits() {
                var options = this.options;
                var adapter = this._adapter;
                var unit = options.time.unit || 'day';
                var _this$getUserBounds5 = this.getUserBounds(),
                    min = _this$getUserBounds5.min,
                    max = _this$getUserBounds5.max,
                    minDefined = _this$getUserBounds5.minDefined,
                    maxDefined = _this$getUserBounds5.maxDefined;
                function _applyBounds(bounds) {
                    if (!minDefined && !isNaN(bounds.min)) {
                        min = Math.min(min, bounds.min);
                    }
                    if (!maxDefined && !isNaN(bounds.max)) {
                        max = Math.max(max, bounds.max);
                    }
                }
                if (!minDefined || !maxDefined) {
                    _applyBounds(this._getLabelBounds());
                    if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
                        _applyBounds(this.getMinMax(false));
                    }
                }
                min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
                max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
                this.min = Math.min(min, max - 1);
                this.max = Math.max(min + 1, max);
            }
        }, {
            key: "_getLabelBounds",
            value: function _getLabelBounds() {
                var arr = this.getLabelTimestamps();
                var min = Number.POSITIVE_INFINITY;
                var max = Number.NEGATIVE_INFINITY;
                if (arr.length) {
                    min = arr[0];
                    max = arr[arr.length - 1];
                }
                return {
                    min: min,
                    max: max
                };
            }
        }, {
            key: "buildTicks",
            value: function buildTicks() {
                var options = this.options;
                var timeOpts = options.time;
                var tickOpts = options.ticks;
                var timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
                if (options.bounds === 'ticks' && timestamps.length) {
                    this.min = this._userMin || timestamps[0];
                    this.max = this._userMax || timestamps[timestamps.length - 1];
                }
                var min = this.min;
                var max = this.max;
                var ticks = _filterBetween(timestamps, min, max);
                this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
                this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
                this.initOffsets(timestamps);
                if (options.reverse) {
                    ticks.reverse();
                }
                return ticksFromTimestamps(this, ticks, this._majorUnit);
            }
        }, {
            key: "afterAutoSkip",
            value: function afterAutoSkip() {
                if (this.options.offsetAfterAutoskip) {
                    this.initOffsets(this.ticks.map(function (tick) {
                        return +tick.value;
                    }));
                }
            }
        }, {
            key: "initOffsets",
            value: function initOffsets() {
                var timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var start = 0;
                var end = 0;
                var first, last;
                if (this.options.offset && timestamps.length) {
                    first = this.getDecimalForValue(timestamps[0]);
                    if (timestamps.length === 1) {
                        start = 1 - first;
                    } else {
                        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
                    }
                    last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
                    if (timestamps.length === 1) {
                        end = last;
                    } else {
                        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
                    }
                }
                var limit = timestamps.length < 3 ? 0.5 : 0.25;
                start = _limitValue(start, 0, limit);
                end = _limitValue(end, 0, limit);
                this._offsets = {
                    start: start,
                    end: end,
                    factor: 1 / (start + 1 + end)
                };
            }
        }, {
            key: "_generate",
            value: function _generate() {
                var adapter = this._adapter;
                var min = this.min;
                var max = this.max;
                var options = this.options;
                var timeOpts = options.time;
                var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
                var stepSize = valueOrDefault(options.ticks.stepSize, 1);
                var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
                var hasWeekday = isNumber(weekday) || weekday === true;
                var ticks = {};
                var first = min;
                var time, count;
                if (hasWeekday) {
                    first = +adapter.startOf(first, 'isoWeek', weekday);
                }
                first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
                if (adapter.diff(max, min, minor) > 100000 * stepSize) {
                    throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
                }
                var timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
                for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
                    addTick(ticks, time, timestamps);
                }
                if (time === max || options.bounds === 'ticks' || count === 1) {
                    addTick(ticks, time, timestamps);
                }
                return Object.keys(ticks).sort(function (a, b) {
                    return a - b;
                }).map(function (x) {
                    return +x;
                });
            }
        }, {
            key: "getLabelForValue",
            value: function getLabelForValue(value) {
                var adapter = this._adapter;
                var timeOpts = this.options.time;
                if (timeOpts.tooltipFormat) {
                    return adapter.format(value, timeOpts.tooltipFormat);
                }
                return adapter.format(value, timeOpts.displayFormats.datetime);
            }
        }, {
            key: "format",
            value: function format(value, _format) {
                var options = this.options;
                var formats = options.time.displayFormats;
                var unit = this._unit;
                var fmt = _format || formats[unit];
                return this._adapter.format(value, fmt);
            }
        }, {
            key: "_tickFormatFunction",
            value: function _tickFormatFunction(time, index, ticks, format) {
                var options = this.options;
                var formatter = options.ticks.callback;
                if (formatter) {
                    return callback(formatter, [time, index, ticks], this);
                }
                var formats = options.time.displayFormats;
                var unit = this._unit;
                var majorUnit = this._majorUnit;
                var minorFormat = unit && formats[unit];
                var majorFormat = majorUnit && formats[majorUnit];
                var tick = ticks[index];
                var major = majorUnit && majorFormat && tick && tick.major;
                return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
            }
        }, {
            key: "generateTickLabels",
            value: function generateTickLabels(ticks) {
                var i, ilen, tick;
                for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                    tick = ticks[i];
                    tick.label = this._tickFormatFunction(tick.value, i, ticks);
                }
            }
        }, {
            key: "getDecimalForValue",
            value: function getDecimalForValue(value) {
                return value === null ? NaN : (value - this.min) / (this.max - this.min);
            }
        }, {
            key: "getPixelForValue",
            value: function getPixelForValue(value) {
                var offsets = this._offsets;
                var pos = this.getDecimalForValue(value);
                return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {
                var offsets = this._offsets;
                var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
                return this.min + pos * (this.max - this.min);
            }
        }, {
            key: "_getLabelSize",
            value: function _getLabelSize(label) {
                var ticksOpts = this.options.ticks;
                var tickLabelWidth = this.ctx.measureText(label).width;
                var angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
                var cosRotation = Math.cos(angle);
                var sinRotation = Math.sin(angle);
                var tickFontSize = this._resolveTickFontOptions(0).size;
                return {
                    w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
                    h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
                };
            }
        }, {
            key: "_getLabelCapacity",
            value: function _getLabelCapacity(exampleTime) {
                var timeOpts = this.options.time;
                var displayFormats = timeOpts.displayFormats;
                var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
                var exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);
                var size = this._getLabelSize(exampleLabel);
                var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
                return capacity > 0 ? capacity : 1;
            }
        }, {
            key: "getDataTimestamps",
            value: function getDataTimestamps() {
                var timestamps = this._cache.data || [];
                var i, ilen;
                if (timestamps.length) {
                    return timestamps;
                }
                var metas = this.getMatchingVisibleMetas();
                if (this._normalized && metas.length) {
                    return this._cache.data = metas[0].controller.getAllParsedValues(this);
                }
                for (i = 0, ilen = metas.length; i < ilen; ++i) {
                    timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
                }
                return this._cache.data = this.normalize(timestamps);
            }
        }, {
            key: "getLabelTimestamps",
            value: function getLabelTimestamps() {
                var timestamps = this._cache.labels || [];
                var i, ilen;
                if (timestamps.length) {
                    return timestamps;
                }
                var labels = this.getLabels();
                for (i = 0, ilen = labels.length; i < ilen; ++i) {
                    timestamps.push(_parse(this, labels[i]));
                }
                return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
            }
        }, {
            key: "normalize",
            value: function normalize(values) {
                return _arrayUnique(values.sort(sorter));
            }
        }]);
        return TimeScale;
    }(Scale);
    _defineProperty$w(TimeScale, "id", 'time');
    _defineProperty$w(TimeScale, "defaults", {
        bounds: 'data',
        adapters: {},
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: 'millisecond',
            displayFormats: {}
        },
        ticks: {
            source: 'auto',
            callback: false,
            major: {
                enabled: false
            }
        }
    });
    function interpolate(table, val, reverse) {
        var lo = 0;
        var hi = table.length - 1;
        var prevSource, nextSource, prevTarget, nextTarget;
        if (reverse) {
            if (val >= table[lo].pos && val <= table[hi].pos) {
                var _lookupByKey2 = _lookupByKey(table, 'pos', val);
                lo = _lookupByKey2.lo;
                hi = _lookupByKey2.hi;
            }
            var _table$lo = table[lo];
            prevSource = _table$lo.pos;
            prevTarget = _table$lo.time;
            var _table$hi = table[hi];
            nextSource = _table$hi.pos;
            nextTarget = _table$hi.time;
        } else {
            if (val >= table[lo].time && val <= table[hi].time) {
                var _lookupByKey3 = _lookupByKey(table, 'time', val);
                lo = _lookupByKey3.lo;
                hi = _lookupByKey3.hi;
            }
            var _table$lo2 = table[lo];
            prevSource = _table$lo2.time;
            prevTarget = _table$lo2.pos;
            var _table$hi2 = table[hi];
            nextSource = _table$hi2.time;
            nextTarget = _table$hi2.pos;
        }
        var span = nextSource - prevSource;
        return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
    }
    var TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {
        _inherits$w(TimeSeriesScale, _TimeScale);
        var _super25 = _createSuper$w(TimeSeriesScale);
        function TimeSeriesScale(props) {
            var _this43;
            _classCallCheck$x(this, TimeSeriesScale);
            _this43 = _super25.call(this, props);
            _this43._table = [];
            _this43._minPos = undefined;
            _this43._tableRange = undefined;
            return _this43;
        }
        _createClass$x(TimeSeriesScale, [{
            key: "initOffsets",
            value: function initOffsets() {
                var timestamps = this._getTimestampsForTable();
                var table = this._table = this.buildLookupTable(timestamps);
                this._minPos = interpolate(table, this.min);
                this._tableRange = interpolate(table, this.max) - this._minPos;
                _get(_getPrototypeOf$w(TimeSeriesScale.prototype), "initOffsets", this).call(this, timestamps);
            }
        }, {
            key: "buildLookupTable",
            value: function buildLookupTable(timestamps) {
                var min = this.min,
                    max = this.max;
                var items = [];
                var table = [];
                var i, ilen, prev, curr, next;
                for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
                    curr = timestamps[i];
                    if (curr >= min && curr <= max) {
                        items.push(curr);
                    }
                }
                if (items.length < 2) {
                    return [{
                        time: min,
                        pos: 0
                    }, {
                        time: max,
                        pos: 1
                    }];
                }
                for (i = 0, ilen = items.length; i < ilen; ++i) {
                    next = items[i + 1];
                    prev = items[i - 1];
                    curr = items[i];
                    if (Math.round((next + prev) / 2) !== curr) {
                        table.push({
                            time: curr,
                            pos: i / (ilen - 1)
                        });
                    }
                }
                return table;
            }
        }, {
            key: "_getTimestampsForTable",
            value: function _getTimestampsForTable() {
                var timestamps = this._cache.all || [];
                if (timestamps.length) {
                    return timestamps;
                }
                var data = this.getDataTimestamps();
                var label = this.getLabelTimestamps();
                if (data.length && label.length) {
                    timestamps = this.normalize(data.concat(label));
                } else {
                    timestamps = data.length ? data : label;
                }
                timestamps = this._cache.all = timestamps;
                return timestamps;
            }
        }, {
            key: "getDecimalForValue",
            value: function getDecimalForValue(value) {
                return (interpolate(this._table, value) - this._minPos) / this._tableRange;
            }
        }, {
            key: "getValueForPixel",
            value: function getValueForPixel(pixel) {
                var offsets = this._offsets;
                var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
                return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
            }
        }]);
        return TimeSeriesScale;
    }(TimeScale);
    _defineProperty$w(TimeSeriesScale, "id", 'timeseries');
    _defineProperty$w(TimeSeriesScale, "defaults", TimeScale.defaults);
    var scales = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CategoryScale: CategoryScale,
        LinearScale: LinearScale,
        LogarithmicScale: LogarithmicScale,
        RadialLinearScale: RadialLinearScale,
        TimeScale: TimeScale,
        TimeSeriesScale: TimeSeriesScale
    });
    var registerables = [controllers, elements, plugins, scales];

    Chart$1.register.apply(Chart$1, _toConsumableArray(registerables));
    var Chart = Chart$1;

    var helpers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        HALF_PI: HALF_PI,
        INFINITY: INFINITY,
        PI: PI,
        PITAU: PITAU,
        QUARTER_PI: QUARTER_PI,
        RAD_PER_DEG: RAD_PER_DEG,
        TAU: TAU,
        TWO_THIRDS_PI: TWO_THIRDS_PI,
        _addGrace: _addGrace,
        _alignPixel: _alignPixel,
        _alignStartEnd: _alignStartEnd,
        _angleBetween: _angleBetween,
        _angleDiff: _angleDiff,
        _arrayUnique: _arrayUnique,
        _attachContext: _attachContext,
        _bezierCurveTo: _bezierCurveTo,
        _bezierInterpolation: _bezierInterpolation,
        _boundSegment: _boundSegment,
        _boundSegments: _boundSegments,
        _capitalize: _capitalize,
        _computeSegments: _computeSegments,
        _createResolver: _createResolver,
        _decimalPlaces: _decimalPlaces,
        _deprecated: _deprecated,
        _descriptors: _descriptors,
        _elementsEqual: _elementsEqual,
        _factorize: _factorize,
        _filterBetween: _filterBetween,
        _getParentNode: _getParentNode,
        _getStartAndCountOfVisiblePoints: _getStartAndCountOfVisiblePoints,
        _int16Range: _int16Range,
        _isBetween: _isBetween,
        _isClickEvent: _isClickEvent,
        _isDomSupported: _isDomSupported,
        _isPointInArea: _isPointInArea,
        _limitValue: _limitValue,
        _longestText: _longestText,
        _lookup: _lookup,
        _lookupByKey: _lookupByKey,
        _measureText: _measureText,
        _merger: _merger,
        _mergerIf: _mergerIf,
        _normalizeAngle: _normalizeAngle,
        _parseObjectDataRadialScale: _parseObjectDataRadialScale,
        _pointInLine: _pointInLine,
        _readValueToProps: _readValueToProps,
        _rlookupByKey: _rlookupByKey,
        _scaleRangesChanged: _scaleRangesChanged,
        _setMinAndMaxByKey: _setMinAndMaxByKey,
        _splitKey: _splitKey,
        _steppedInterpolation: _steppedInterpolation,
        _steppedLineTo: _steppedLineTo,
        _textX: _textX,
        _toLeftRightCenter: _toLeftRightCenter,
        _updateBezierControlPoints: _updateBezierControlPoints,
        addRoundedRectPath: addRoundedRectPath,
        almostEquals: almostEquals,
        almostWhole: almostWhole,
        callback: callback,
        clearCanvas: clearCanvas,
        clipArea: clipArea,
        clone: clone,
        color: color,
        createContext: createContext,
        debounce: debounce,
        defined: defined,
        distanceBetweenPoints: distanceBetweenPoints,
        drawPoint: drawPoint,
        drawPointLegend: drawPointLegend,
        each: each,
        easingEffects: effects,
        finiteOrDefault: finiteOrDefault,
        fontString: fontString,
        formatNumber: formatNumber,
        getAngleFromPoint: getAngleFromPoint,
        getHoverColor: getHoverColor,
        getMaximumSize: getMaximumSize,
        getRelativePosition: getRelativePosition,
        getRtlAdapter: getRtlAdapter,
        getStyle: getStyle,
        isArray: isArray,
        isFinite: isNumberFinite,
        isFunction: isFunction,
        isNullOrUndef: isNullOrUndef,
        isNumber: isNumber,
        isObject: isObject,
        isPatternOrGradient: isPatternOrGradient,
        listenArrayEvents: listenArrayEvents,
        log10: log10,
        merge: merge,
        mergeIf: mergeIf,
        niceNum: niceNum,
        noop: noop,
        overrideTextDirection: overrideTextDirection,
        readUsedSize: readUsedSize,
        renderText: renderText,
        requestAnimFrame: requestAnimFrame,
        resolve: resolve,
        resolveObjectKey: resolveObjectKey,
        restoreTextDirection: restoreTextDirection,
        retinaScale: retinaScale,
        setsEqual: setsEqual,
        sign: sign,
        splineCurve: splineCurve,
        splineCurveMonotone: splineCurveMonotone,
        supportsEventListenerOptions: supportsEventListenerOptions,
        throttled: throttled,
        toDegrees: toDegrees,
        toDimension: toDimension,
        toFont: toFont,
        toFontString: toFontString,
        toLineHeight: toLineHeight,
        toPadding: toPadding,
        toPercentage: toPercentage,
        toRadians: toRadians,
        toTRBL: toTRBL,
        toTRBLCorners: toTRBLCorners,
        uid: uid,
        unclipArea: unclipArea,
        unlistenArrayEvents: unlistenArrayEvents,
        valueOrDefault: valueOrDefault
    });

    function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
            return NaN;
        }
        var number = Number(dirtyNumber);
        if (isNaN(number)) {
            return number;
        }
        return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function requiredArgs(required, args) {
        if (args.length < required) {
            throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
        }
    }

    function _typeof$y(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$y = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$y = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$y(obj);
    }
    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */

    function toDate(argument) {
        requiredArgs(1, arguments);
        var argStr = Object.prototype.toString.call(argument); // Clone the date

        if (argument instanceof Date || _typeof$y(argument) === 'object' && argStr === '[object Date]') {
            // Prevent the date to lose the milliseconds when passed to new Date() in IE10
            return new Date(argument.getTime());
        } else if (typeof argument === 'number' || argStr === '[object Number]') {
            return new Date(argument);
        } else {
            if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
                // eslint-disable-next-line no-console
                console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"); // eslint-disable-next-line no-console

                console.warn(new Error().stack);
            }
            return new Date(NaN);
        }
    }

    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} - the new date with the days added
     * @throws {TypeError} - 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */

    function addDays(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var amount = toInteger(dirtyAmount);
        if (isNaN(amount)) {
            return new Date(NaN);
        }
        if (!amount) {
            // If 0 days, no-op to avoid changing times in the hour before end of DST
            return date;
        }
        date.setDate(date.getDate() + amount);
        return date;
    }

    /**
     * @name addMonths
     * @category Month Helpers
     * @summary Add the specified number of months to the given date.
     *
     * @description
     * Add the specified number of months to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the months added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 months to 1 September 2014:
     * const result = addMonths(new Date(2014, 8, 1), 5)
     * //=> Sun Feb 01 2015 00:00:00
     */

    function addMonths(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var amount = toInteger(dirtyAmount);
        if (isNaN(amount)) {
            return new Date(NaN);
        }
        if (!amount) {
            // If 0 months, no-op to avoid changing times in the hour before end of DST
            return date;
        }
        var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
        // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
        // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
        // want except that dates will wrap around the end of a month, meaning that
        // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
        // we'll default to the end of the desired month by adding 1 to the desired
        // month and using a date of 0 to back up one day to the end of the desired
        // month.

        var endOfDesiredMonth = new Date(date.getTime());
        endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
        var daysInMonth = endOfDesiredMonth.getDate();
        if (dayOfMonth >= daysInMonth) {
            // If we're already at the end of the month, then this is the correct date
            // and we're done.
            return endOfDesiredMonth;
        } else {
            // Otherwise, we now know that setting the original day-of-month value won't
            // cause an overflow, so set the desired day-of-month. Note that we can't
            // just set the date of `endOfDesiredMonth` because that object may have had
            // its time changed in the unusual case where where a DST transition was on
            // the last day of the month and its local time was in the hour skipped or
            // repeated next to a DST transition.  So we use `date` instead which is
            // guaranteed to still have the original time.
            date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
            return date;
        }
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */

    function addMilliseconds(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var timestamp = toDate(dirtyDate).getTime();
        var amount = toInteger(dirtyAmount);
        return new Date(timestamp + amount);
    }

    var MILLISECONDS_IN_HOUR = 3600000;
    /**
     * @name addHours
     * @category Hour Helpers
     * @summary Add the specified number of hours to the given date.
     *
     * @description
     * Add the specified number of hours to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the hours added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 2 hours to 10 July 2014 23:00:00:
     * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
     * //=> Fri Jul 11 2014 01:00:00
     */

    function addHours(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
    }

    var defaultOptions = {};
    function getDefaultOptions() {
        return defaultOptions;
    }

    /**
     * @name startOfWeek
     * @category Week Helpers
     * @summary Return the start of a week for the given date.
     *
     * @description
     * Return the start of a week for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Date} the start of a week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // The start of a week for 2 September 2014 11:55:00:
     * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Sun Aug 31 2014 00:00:00
     *
     * @example
     * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
     * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
     * //=> Mon Sep 01 2014 00:00:00
     */

    function startOfWeek(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = toDate(dirtyDate);
        var day = date.getDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setDate(date.getDate() - diff);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
        var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        utcDate.setUTCFullYear(date.getFullYear());
        return date.getTime() - utcDate.getTime();
    }

    /**
     * @name startOfDay
     * @category Day Helpers
     * @summary Return the start of a day for the given date.
     *
     * @description
     * Return the start of a day for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a day for 2 September 2014 11:55:00:
     * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 00:00:00
     */

    function startOfDay(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    var MILLISECONDS_IN_DAY$1 = 86400000;
    /**
     * @name differenceInCalendarDays
     * @category Day Helpers
     * @summary Get the number of calendar days between the given dates.
     *
     * @description
     * Get the number of calendar days between the given dates. This means that the times are removed
     * from the dates and then the difference in days is calculated.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar days
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar days are between
     * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
     * const result = differenceInCalendarDays(
     *   new Date(2012, 6, 2, 0, 0),
     *   new Date(2011, 6, 2, 23, 0)
     * )
     * //=> 366
     * // How many calendar days are between
     * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
     * const result = differenceInCalendarDays(
     *   new Date(2011, 6, 3, 0, 1),
     *   new Date(2011, 6, 2, 23, 59)
     * )
     * //=> 1
     */

    function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var startOfDayLeft = startOfDay(dirtyDateLeft);
        var startOfDayRight = startOfDay(dirtyDateRight);
        var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
        var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer
        // because the number of milliseconds in a day is not constant
        // (e.g. it's different in the day of the daylight saving time clock shift)

        return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
    }

    var MILLISECONDS_IN_MINUTE = 60000;
    /**
     * @name addMinutes
     * @category Minute Helpers
     * @summary Add the specified number of minutes to the given date.
     *
     * @description
     * Add the specified number of minutes to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the minutes added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 30 minutes to 10 July 2014 12:00:00:
     * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
     * //=> Thu Jul 10 2014 12:30:00
     */

    function addMinutes(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
    }

    /**
     * @name addQuarters
     * @category Quarter Helpers
     * @summary Add the specified number of year quarters to the given date.
     *
     * @description
     * Add the specified number of year quarters to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the quarters added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 1 quarter to 1 September 2014:
     * const result = addQuarters(new Date(2014, 8, 1), 1)
     * //=> Mon Dec 01 2014 00:00:00
     */

    function addQuarters(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        var months = amount * 3;
        return addMonths(dirtyDate, months);
    }

    /**
     * @name addSeconds
     * @category Second Helpers
     * @summary Add the specified number of seconds to the given date.
     *
     * @description
     * Add the specified number of seconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the seconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 30 seconds to 10 July 2014 12:45:00:
     * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
     * //=> Thu Jul 10 2014 12:45:30
     */

    function addSeconds(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMilliseconds(dirtyDate, amount * 1000);
    }

    /**
     * @name addWeeks
     * @category Week Helpers
     * @summary Add the specified number of weeks to the given date.
     *
     * @description
     * Add the specified number of week to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the weeks added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 4 weeks to 1 September 2014:
     * const result = addWeeks(new Date(2014, 8, 1), 4)
     * //=> Mon Sep 29 2014 00:00:00
     */

    function addWeeks(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        var days = amount * 7;
        return addDays(dirtyDate, days);
    }

    /**
     * @name addYears
     * @category Year Helpers
     * @summary Add the specified number of years to the given date.
     *
     * @description
     * Add the specified number of years to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the years added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 years to 1 September 2014:
     * const result = addYears(new Date(2014, 8, 1), 5)
     * //=> Sun Sep 01 2019 00:00:00
     */

    function addYears(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMonths(dirtyDate, amount * 12);
    }

    /**
     * @name compareAsc
     * @category Common Helpers
     * @summary Compare the two dates and return -1, 0 or 1.
     *
     * @description
     * Compare the two dates and return 1 if the first date is after the second,
     * -1 if the first date is before the second or 0 if dates are equal.
     *
     * @param {Date|Number} dateLeft - the first date to compare
     * @param {Date|Number} dateRight - the second date to compare
     * @returns {Number} the result of the comparison
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Compare 11 February 1987 and 10 July 1989:
     * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
     * //=> -1
     *
     * @example
     * // Sort the array of dates:
     * const result = [
     *   new Date(1995, 6, 2),
     *   new Date(1987, 1, 11),
     *   new Date(1989, 6, 10)
     * ].sort(compareAsc)
     * //=> [
     * //   Wed Feb 11 1987 00:00:00,
     * //   Mon Jul 10 1989 00:00:00,
     * //   Sun Jul 02 1995 00:00:00
     * // ]
     */

    function compareAsc(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var diff = dateLeft.getTime() - dateRight.getTime();
        if (diff < 0) {
            return -1;
        } else if (diff > 0) {
            return 1; // Return 0 if diff is 0; return NaN if diff is NaN
        } else {
            return diff;
        }
    }

    /**
     * Days in 1 week.
     *
     * @name daysInWeek
     * @constant
     * @type {number}
     * @default
     */
    /**
     * Milliseconds in 1 minute
     *
     * @name millisecondsInMinute
     * @constant
     * @type {number}
     * @default
     */

    var millisecondsInMinute = 60000;
    /**
     * Milliseconds in 1 hour
     *
     * @name millisecondsInHour
     * @constant
     * @type {number}
     * @default
     */

    var millisecondsInHour = 3600000;
    /**
     * Milliseconds in 1 second
     *
     * @name millisecondsInSecond
     * @constant
     * @type {number}
     * @default
     */

    var millisecondsInSecond = 1000;

    function _typeof$x(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$x = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$x = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$x(obj);
    }
    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */

    function isDate(value) {
        requiredArgs(1, arguments);
        return value instanceof Date || _typeof$x(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */

    function isValid(dirtyDate) {
        requiredArgs(1, arguments);
        if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
            return false;
        }
        var date = toDate(dirtyDate);
        return !isNaN(Number(date));
    }

    /**
     * @name differenceInCalendarMonths
     * @category Month Helpers
     * @summary Get the number of calendar months between the given dates.
     *
     * @description
     * Get the number of calendar months between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar months are between 31 January 2014 and 1 September 2014?
     * const result = differenceInCalendarMonths(
     *   new Date(2014, 8, 1),
     *   new Date(2014, 0, 31)
     * )
     * //=> 8
     */

    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
        var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
        return yearDiff * 12 + monthDiff;
    }

    /**
     * @name differenceInCalendarYears
     * @category Year Helpers
     * @summary Get the number of calendar years between the given dates.
     *
     * @description
     * Get the number of calendar years between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar years
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar years are between 31 December 2013 and 11 February 2015?
     * const result = differenceInCalendarYears(
     *   new Date(2015, 1, 11),
     *   new Date(2013, 11, 31)
     * )
     * //=> 2
     */

    function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        return dateLeft.getFullYear() - dateRight.getFullYear();
    }

    // for accurate equality comparisons of UTC timestamps that end up
    // having the same representation in local time, e.g. one hour before
    // DST ends vs. the instant that DST ends.

    function compareLocalAsc(dateLeft, dateRight) {
        var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
        if (diff < 0) {
            return -1;
        } else if (diff > 0) {
            return 1; // Return 0 if diff is 0; return NaN if diff is NaN
        } else {
            return diff;
        }
    }
    /**
     * @name differenceInDays
     * @category Day Helpers
     * @summary Get the number of full days between the given dates.
     *
     * @description
     * Get the number of full day periods between two dates. Fractional days are
     * truncated towards zero.
     *
     * One "full day" is the distance between a local time in one day to the same
     * local time on the next or previous day. A full day can sometimes be less than
     * or more than 24 hours if a daylight savings change happens between two dates.
     *
     * To ignore DST and only measure exact 24-hour periods, use this instead:
     * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.
     *
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full days according to the local timezone
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full days are between
     * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
     * const result = differenceInDays(
     *   new Date(2012, 6, 2, 0, 0),
     *   new Date(2011, 6, 2, 23, 0)
     * )
     * //=> 365
     * // How many full days are between
     * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
     * const result = differenceInDays(
     *   new Date(2011, 6, 3, 0, 1),
     *   new Date(2011, 6, 2, 23, 59)
     * )
     * //=> 0
     * // How many full days are between
     * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
     * // Note: because local time is used, the
     * // result will always be 92 days, even in
     * // time zones where DST starts and the
     * // period has only 92*24-1 hours.
     * const result = differenceInDays(
     *   new Date(2020, 5, 1),
     *   new Date(2020, 2, 1)
     * )
     //=> 92
     */

    function differenceInDays(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var sign = compareLocalAsc(dateLeft, dateRight);
        var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
        dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
        // If so, result must be decreased by 1 in absolute value

        var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
        var result = sign * (difference - isLastDayNotFull); // Prevent negative zero

        return result === 0 ? 0 : result;
    }

    /**
     * @name differenceInMilliseconds
     * @category Millisecond Helpers
     * @summary Get the number of milliseconds between the given dates.
     *
     * @description
     * Get the number of milliseconds between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of milliseconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many milliseconds are between
     * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
     * const result = differenceInMilliseconds(
     *   new Date(2014, 6, 2, 12, 30, 21, 700),
     *   new Date(2014, 6, 2, 12, 30, 20, 600)
     * )
     * //=> 1100
     */

    function differenceInMilliseconds(dateLeft, dateRight) {
        requiredArgs(2, arguments);
        return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
    }

    var roundingMap = {
        ceil: Math.ceil,
        round: Math.round,
        floor: Math.floor,
        trunc: function trunc(value) {
            return value < 0 ? Math.ceil(value) : Math.floor(value);
        } // Math.trunc is not supported by IE
    };

    var defaultRoundingMethod = 'trunc';
    function getRoundingMethod(method) {
        return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
    }

    /**
     * @name differenceInHours
     * @category Hour Helpers
     * @summary Get the number of hours between the given dates.
     *
     * @description
     * Get the number of hours between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of hours
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
     * const result = differenceInHours(
     *   new Date(2014, 6, 2, 19, 0),
     *   new Date(2014, 6, 2, 6, 50)
     * )
     * //=> 12
     */

    function differenceInHours(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInMinutes
     * @category Minute Helpers
     * @summary Get the number of minutes between the given dates.
     *
     * @description
     * Get the signed number of full (rounded towards 0) minutes between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of minutes
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
     * const result = differenceInMinutes(
     *   new Date(2014, 6, 2, 12, 20, 0),
     *   new Date(2014, 6, 2, 12, 7, 59)
     * )
     * //=> 12
     *
     * @example
     * // How many minutes are between 10:01:59 and 10:00:00
     * const result = differenceInMinutes(
     *   new Date(2000, 0, 1, 10, 0, 0),
     *   new Date(2000, 0, 1, 10, 1, 59)
     * )
     * //=> -1
     */

    function differenceInMinutes(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name endOfDay
     * @category Day Helpers
     * @summary Return the end of a day for the given date.
     *
     * @description
     * Return the end of a day for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a day for 2 September 2014 11:55:00:
     * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 23:59:59.999
     */

    function endOfDay(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    /**
     * @name endOfMonth
     * @category Month Helpers
     * @summary Return the end of a month for the given date.
     *
     * @description
     * Return the end of a month for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a month for 2 September 2014 11:55:00:
     * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 23:59:59.999
     */

    function endOfMonth(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var month = date.getMonth();
        date.setFullYear(date.getFullYear(), month + 1, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    /**
     * @name isLastDayOfMonth
     * @category Month Helpers
     * @summary Is the given date the last day of a month?
     *
     * @description
     * Is the given date the last day of a month?
     *
     * @param {Date|Number} date - the date to check
     * @returns {Boolean} the date is the last day of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Is 28 February 2014 the last day of a month?
     * const result = isLastDayOfMonth(new Date(2014, 1, 28))
     * //=> true
     */

    function isLastDayOfMonth(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        return endOfDay(date).getTime() === endOfMonth(date).getTime();
    }

    /**
     * @name differenceInMonths
     * @category Month Helpers
     * @summary Get the number of full months between the given dates.
     *
     * @description
     * Get the number of full months between the given dates using trunc as a default rounding method.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full months are between 31 January 2014 and 1 September 2014?
     * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
     * //=> 7
     */

    function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var sign = compareAsc(dateLeft, dateRight);
        var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
        var result; // Check for the difference of less than month

        if (difference < 1) {
            result = 0;
        } else {
            if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
                // This will check if the date is end of Feb and assign a higher end of month date
                // to compare it with Jan
                dateLeft.setDate(30);
            }
            dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
            // If so, result must be decreased by 1 in absolute value

            var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month

            if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
                isLastMonthNotFull = false;
            }
            result = sign * (difference - Number(isLastMonthNotFull));
        } // Prevent negative zero

        return result === 0 ? 0 : result;
    }

    /**
     * @name differenceInQuarters
     * @category Quarter Helpers
     * @summary Get the number of quarters between the given dates.
     *
     * @description
     * Get the number of quarters between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of full quarters
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full quarters are between 31 December 2013 and 2 July 2014?
     * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
     * //=> 2
     */

    function differenceInQuarters(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInMonths(dateLeft, dateRight) / 3;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInSeconds
     * @category Second Helpers
     * @summary Get the number of seconds between the given dates.
     *
     * @description
     * Get the number of seconds between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of seconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many seconds are between
     * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
     * const result = differenceInSeconds(
     *   new Date(2014, 6, 2, 12, 30, 20, 0),
     *   new Date(2014, 6, 2, 12, 30, 7, 999)
     * )
     * //=> 12
     */

    function differenceInSeconds(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInWeeks
     * @category Week Helpers
     * @summary Get the number of full weeks between the given dates.
     *
     * @description
     * Get the number of full weeks between two dates. Fractional weeks are
     * truncated towards zero by default.
     *
     * One "full week" is the distance between a local time in one day to the same
     * local time 7 days earlier or later. A full week can sometimes be less than
     * or more than 7*24 hours if a daylight savings change happens between two dates.
     *
     * To ignore DST and only measure exact 7*24-hour periods, use this instead:
     * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
     *
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of full weeks
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full weeks are between 5 July 2014 and 20 July 2014?
     * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
     * //=> 2
     *
     * // How many full weeks are between
     * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
     * // Note: because local time is used, the
     * // result will always be 8 weeks (54 days),
     * // even if DST starts and the period has
     * // only 54*24-1 hours.
     * const result = differenceInWeeks(
     *   new Date(2020, 5, 1),
     *   new Date(2020, 2, 6)
     * )
     * //=> 8
     */

    function differenceInWeeks(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInDays(dateLeft, dateRight) / 7;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInYears
     * @category Year Helpers
     * @summary Get the number of full years between the given dates.
     *
     * @description
     * Get the number of full years between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full years
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full years are between 31 December 2013 and 11 February 2015?
     * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
     * //=> 1
     */

    function differenceInYears(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var sign = compareAsc(dateLeft, dateRight);
        var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing
        // with leap days

        dateLeft.setFullYear(1584);
        dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
        // If so, result must be decreased by 1 in absolute value

        var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;
        var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero

        return result === 0 ? 0 : result;
    }

    /**
     * @name startOfMinute
     * @category Minute Helpers
     * @summary Return the start of a minute for the given date.
     *
     * @description
     * Return the start of a minute for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a minute
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a minute for 1 December 2014 22:15:45.400:
     * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
     * //=> Mon Dec 01 2014 22:15:00
     */

    function startOfMinute(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setSeconds(0, 0);
        return date;
    }

    /**
     * @name startOfQuarter
     * @category Quarter Helpers
     * @summary Return the start of a year quarter for the given date.
     *
     * @description
     * Return the start of a year quarter for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a quarter
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a quarter for 2 September 2014 11:55:00:
     * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Jul 01 2014 00:00:00
     */

    function startOfQuarter(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var currentMonth = date.getMonth();
        var month = currentMonth - currentMonth % 3;
        date.setMonth(month, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    /**
     * @name startOfMonth
     * @category Month Helpers
     * @summary Return the start of a month for the given date.
     *
     * @description
     * Return the start of a month for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a month for 2 September 2014 11:55:00:
     * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Mon Sep 01 2014 00:00:00
     */

    function startOfMonth(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    /**
     * @name endOfYear
     * @category Year Helpers
     * @summary Return the end of a year for the given date.
     *
     * @description
     * Return the end of a year for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a year
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a year for 2 September 2014 11:55:00:
     * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
     * //=> Wed Dec 31 2014 23:59:59.999
     */

    function endOfYear(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var year = date.getFullYear();
        date.setFullYear(year + 1, 0, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    /**
     * @name startOfYear
     * @category Year Helpers
     * @summary Return the start of a year for the given date.
     *
     * @description
     * Return the start of a year for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a year
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a year for 2 September 2014 11:55:00:
     * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
     * //=> Wed Jan 01 2014 00:00:00
     */

    function startOfYear(dirtyDate) {
        requiredArgs(1, arguments);
        var cleanDate = toDate(dirtyDate);
        var date = new Date(0);
        date.setFullYear(cleanDate.getFullYear(), 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }

    /**
     * @name endOfHour
     * @category Hour Helpers
     * @summary Return the end of an hour for the given date.
     *
     * @description
     * Return the end of an hour for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of an hour
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of an hour for 2 September 2014 11:55:00:
     * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
     * //=> Tue Sep 02 2014 11:59:59.999
     */

    function endOfHour(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setMinutes(59, 59, 999);
        return date;
    }

    /**
     * @name endOfWeek
     * @category Week Helpers
     * @summary Return the end of a week for the given date.
     *
     * @description
     * Return the end of a week for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Date} the end of a week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // The end of a week for 2 September 2014 11:55:00:
     * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Sat Sep 06 2014 23:59:59.999
     *
     * @example
     * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
     * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
     * //=> Sun Sep 07 2014 23:59:59.999
     */
    function endOfWeek(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = toDate(dirtyDate);
        var day = date.getDay();
        var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
        date.setDate(date.getDate() + diff);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    /**
     * @name endOfMinute
     * @category Minute Helpers
     * @summary Return the end of a minute for the given date.
     *
     * @description
     * Return the end of a minute for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a minute
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a minute for 1 December 2014 22:15:45.400:
     * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
     * //=> Mon Dec 01 2014 22:15:59.999
     */

    function endOfMinute(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setSeconds(59, 999);
        return date;
    }

    /**
     * @name endOfQuarter
     * @category Quarter Helpers
     * @summary Return the end of a year quarter for the given date.
     *
     * @description
     * Return the end of a year quarter for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a quarter
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a quarter for 2 September 2014 11:55:00:
     * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 23:59:59.999
     */

    function endOfQuarter(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var currentMonth = date.getMonth();
        var month = currentMonth - currentMonth % 3 + 3;
        date.setMonth(month, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    /**
     * @name endOfSecond
     * @category Second Helpers
     * @summary Return the end of a second for the given date.
     *
     * @description
     * Return the end of a second for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a second
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a second for 1 December 2014 22:15:45.400:
     * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
     * //=> Mon Dec 01 2014 22:15:45.999
     */

    function endOfSecond(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setMilliseconds(999);
        return date;
    }

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */

    function subMilliseconds(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMilliseconds(dirtyDate, -amount);
    }

    var MILLISECONDS_IN_DAY = 86400000;
    function getUTCDayOfYear(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var timestamp = date.getTime();
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
        var startOfYearTimestamp = date.getTime();
        var difference = timestamp - startOfYearTimestamp;
        return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    function startOfUTCISOWeek(dirtyDate) {
        requiredArgs(1, arguments);
        var weekStartsOn = 1;
        var date = toDate(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
    }

    function getUTCISOWeekYear(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var year = date.getUTCFullYear();
        var fourthOfJanuaryOfNextYear = new Date(0);
        fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
        fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
        var fourthOfJanuaryOfThisYear = new Date(0);
        fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
        fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
        if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
        } else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
        } else {
            return year - 1;
        }
    }

    function startOfUTCISOWeekYear(dirtyDate) {
        requiredArgs(1, arguments);
        var year = getUTCISOWeekYear(dirtyDate);
        var fourthOfJanuary = new Date(0);
        fourthOfJanuary.setUTCFullYear(year, 0, 4);
        fourthOfJanuary.setUTCHours(0, 0, 0, 0);
        var date = startOfUTCISOWeek(fourthOfJanuary);
        return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000;
    function getUTCISOWeek(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)

        return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    function startOfUTCWeek(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = toDate(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
    }

    function getUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var year = date.getUTCFullYear();
        var defaultOptions = getDefaultOptions();
        var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var firstWeekOfNextYear = new Date(0);
        firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
        firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
        var firstWeekOfThisYear = new Date(0);
        firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
        if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
        } else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
        } else {
            return year - 1;
        }
    }

    function startOfUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions = getDefaultOptions();
        var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
        var year = getUTCWeekYear(dirtyDate, options);
        var firstWeek = new Date(0);
        firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeek.setUTCHours(0, 0, 0, 0);
        var date = startOfUTCWeek(firstWeek, options);
        return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000;
    function getUTCWeek(dirtyDate, options) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)

        return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    function addLeadingZeros(number, targetLength) {
        var sign = number < 0 ? '-' : '';
        var output = Math.abs(number).toString();
        while (output.length < targetLength) {
            output = '0' + output;
        }
        return sign + output;
    }

    /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* |                                |
   * |  d  | Day of month                   |  D  |                                |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  m  | Minute                         |  M  | Month                          |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  y  | Year (abs)                     |  Y  |                                |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   */

    var formatters$2 = {
        // Year
        y: function y(date, token) {
            // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
            // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
            // |----------|-------|----|-------|-------|-------|
            // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
            // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
            // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
            // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
            // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
            var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
        },
        // Month
        M: function M(date, token) {
            var month = date.getUTCMonth();
            return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
        },
        // Day of the month
        d: function d(date, token) {
            return addLeadingZeros(date.getUTCDate(), token.length);
        },
        // AM or PM
        a: function a(date, token) {
            var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
                case 'a':
                case 'aa':
                    return dayPeriodEnumValue.toUpperCase();
                case 'aaa':
                    return dayPeriodEnumValue;
                case 'aaaaa':
                    return dayPeriodEnumValue[0];
                case 'aaaa':
                default:
                    return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
            }
        },
        // Hour [1-12]
        h: function h(date, token) {
            return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
        },
        // Hour [0-23]
        H: function H(date, token) {
            return addLeadingZeros(date.getUTCHours(), token.length);
        },
        // Minute
        m: function m(date, token) {
            return addLeadingZeros(date.getUTCMinutes(), token.length);
        },
        // Second
        s: function s(date, token) {
            return addLeadingZeros(date.getUTCSeconds(), token.length);
        },
        // Fraction of second
        S: function S(date, token) {
            var numberOfDigits = token.length;
            var milliseconds = date.getUTCMilliseconds();
            var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
            return addLeadingZeros(fractionalSeconds, token.length);
        }
    };
    var formatters$3 = formatters$2;

    var dayPeriodEnum = {
        am: 'am',
        pm: 'pm',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    };

    /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
   * |  p! | Long localized time            |  P! | Long localized date            |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   * - `P` is long localized date format
   * - `p` is long localized time format
   */
    var formatters = {
        // Era
        G: function G(date, token, localize) {
            var era = date.getUTCFullYear() > 0 ? 1 : 0;
            switch (token) {
                // AD, BC
                case 'G':
                case 'GG':
                case 'GGG':
                    return localize.era(era, {
                        width: 'abbreviated'
                    });
                // A, B

                case 'GGGGG':
                    return localize.era(era, {
                        width: 'narrow'
                    });
                // Anno Domini, Before Christ

                case 'GGGG':
                default:
                    return localize.era(era, {
                        width: 'wide'
                    });
            }
        },
        // Year
        y: function y(date, token, localize) {
            // Ordinal number
            if (token === 'yo') {
                var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

                var year = signedYear > 0 ? signedYear : 1 - signedYear;
                return localize.ordinalNumber(year, {
                    unit: 'year'
                });
            }
            return formatters$3.y(date, token);
        },
        // Local week-numbering year
        Y: function Y(date, token, localize, options) {
            var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

            var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

            if (token === 'YY') {
                var twoDigitYear = weekYear % 100;
                return addLeadingZeros(twoDigitYear, 2);
            } // Ordinal number

            if (token === 'Yo') {
                return localize.ordinalNumber(weekYear, {
                    unit: 'year'
                });
            } // Padding

            return addLeadingZeros(weekYear, token.length);
        },
        // ISO week-numbering year
        R: function R(date, token) {
            var isoWeekYear = getUTCISOWeekYear(date); // Padding

            return addLeadingZeros(isoWeekYear, token.length);
        },
        // Extended year. This is a single number designating the year of this calendar system.
        // The main difference between `y` and `u` localizers are B.C. years:
        // | Year | `y` | `u` |
        // |------|-----|-----|
        // | AC 1 |   1 |   1 |
        // | BC 1 |   1 |   0 |
        // | BC 2 |   2 |  -1 |
        // Also `yy` always returns the last two digits of a year,
        // while `uu` pads single digit years to 2 characters and returns other years unchanged.
        u: function u(date, token) {
            var year = date.getUTCFullYear();
            return addLeadingZeros(year, token.length);
        },
        // Quarter
        Q: function Q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
                // 1, 2, 3, 4
                case 'Q':
                    return String(quarter);
                // 01, 02, 03, 04

                case 'QQ':
                    return addLeadingZeros(quarter, 2);
                // 1st, 2nd, 3rd, 4th

                case 'Qo':
                    return localize.ordinalNumber(quarter, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4

                case 'QQQ':
                    return localize.quarter(quarter, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)

                case 'QQQQQ':
                    return localize.quarter(quarter, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // 1st quarter, 2nd quarter, ...

                case 'QQQQ':
                default:
                    return localize.quarter(quarter, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone quarter
        q: function q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
                // 1, 2, 3, 4
                case 'q':
                    return String(quarter);
                // 01, 02, 03, 04

                case 'qq':
                    return addLeadingZeros(quarter, 2);
                // 1st, 2nd, 3rd, 4th

                case 'qo':
                    return localize.ordinalNumber(quarter, {
                        unit: 'quarter'
                    });
                // Q1, Q2, Q3, Q4

                case 'qqq':
                    return localize.quarter(quarter, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // 1, 2, 3, 4 (narrow quarter; could be not numerical)

                case 'qqqqq':
                    return localize.quarter(quarter, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // 1st quarter, 2nd quarter, ...

                case 'qqqq':
                default:
                    return localize.quarter(quarter, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // Month
        M: function M(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
                case 'M':
                case 'MM':
                    return formatters$3.M(date, token);
                // 1st, 2nd, ..., 12th

                case 'Mo':
                    return localize.ordinalNumber(month + 1, {
                        unit: 'month'
                    });
                // Jan, Feb, ..., Dec

                case 'MMM':
                    return localize.month(month, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // J, F, ..., D

                case 'MMMMM':
                    return localize.month(month, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // January, February, ..., December

                case 'MMMM':
                default:
                    return localize.month(month, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone month
        L: function L(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
                // 1, 2, ..., 12
                case 'L':
                    return String(month + 1);
                // 01, 02, ..., 12

                case 'LL':
                    return addLeadingZeros(month + 1, 2);
                // 1st, 2nd, ..., 12th

                case 'Lo':
                    return localize.ordinalNumber(month + 1, {
                        unit: 'month'
                    });
                // Jan, Feb, ..., Dec

                case 'LLL':
                    return localize.month(month, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // J, F, ..., D

                case 'LLLLL':
                    return localize.month(month, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // January, February, ..., December

                case 'LLLL':
                default:
                    return localize.month(month, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // Local week of year
        w: function w(date, token, localize, options) {
            var week = getUTCWeek(date, options);
            if (token === 'wo') {
                return localize.ordinalNumber(week, {
                    unit: 'week'
                });
            }
            return addLeadingZeros(week, token.length);
        },
        // ISO week of year
        I: function I(date, token, localize) {
            var isoWeek = getUTCISOWeek(date);
            if (token === 'Io') {
                return localize.ordinalNumber(isoWeek, {
                    unit: 'week'
                });
            }
            return addLeadingZeros(isoWeek, token.length);
        },
        // Day of the month
        d: function d(date, token, localize) {
            if (token === 'do') {
                return localize.ordinalNumber(date.getUTCDate(), {
                    unit: 'date'
                });
            }
            return formatters$3.d(date, token);
        },
        // Day of year
        D: function D(date, token, localize) {
            var dayOfYear = getUTCDayOfYear(date);
            if (token === 'Do') {
                return localize.ordinalNumber(dayOfYear, {
                    unit: 'dayOfYear'
                });
            }
            return addLeadingZeros(dayOfYear, token.length);
        },
        // Day of week
        E: function E(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            switch (token) {
                // Tue
                case 'E':
                case 'EE':
                case 'EEE':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T

                case 'EEEEE':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu

                case 'EEEEEE':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday

                case 'EEEE':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Local day of week
        e: function e(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
                // Numerical value (Nth day of week with current locale or weekStartsOn)
                case 'e':
                    return String(localDayOfWeek);
                // Padded numerical value

                case 'ee':
                    return addLeadingZeros(localDayOfWeek, 2);
                // 1st, 2nd, ..., 7th

                case 'eo':
                    return localize.ordinalNumber(localDayOfWeek, {
                        unit: 'day'
                    });
                case 'eee':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T

                case 'eeeee':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu

                case 'eeeeee':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday

                case 'eeee':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Stand-alone local day of week
        c: function c(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
                // Numerical value (same as in `e`)
                case 'c':
                    return String(localDayOfWeek);
                // Padded numerical value

                case 'cc':
                    return addLeadingZeros(localDayOfWeek, token.length);
                // 1st, 2nd, ..., 7th

                case 'co':
                    return localize.ordinalNumber(localDayOfWeek, {
                        unit: 'day'
                    });
                case 'ccc':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'standalone'
                    });
                // T

                case 'ccccc':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'standalone'
                    });
                // Tu

                case 'cccccc':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'standalone'
                    });
                // Tuesday

                case 'cccc':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'standalone'
                    });
            }
        },
        // ISO day of week
        i: function i(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
            switch (token) {
                // 2
                case 'i':
                    return String(isoDayOfWeek);
                // 02

                case 'ii':
                    return addLeadingZeros(isoDayOfWeek, token.length);
                // 2nd

                case 'io':
                    return localize.ordinalNumber(isoDayOfWeek, {
                        unit: 'day'
                    });
                // Tue

                case 'iii':
                    return localize.day(dayOfWeek, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                // T

                case 'iiiii':
                    return localize.day(dayOfWeek, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                // Tu

                case 'iiiiii':
                    return localize.day(dayOfWeek, {
                        width: 'short',
                        context: 'formatting'
                    });
                // Tuesday

                case 'iiii':
                default:
                    return localize.day(dayOfWeek, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // AM or PM
        a: function a(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
                case 'a':
                case 'aa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'aaa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }).toLowerCase();
                case 'aaaaa':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'aaaa':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // AM, PM, midnight, noon
        b: function b(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours === 12) {
                dayPeriodEnumValue = dayPeriodEnum.noon;
            } else if (hours === 0) {
                dayPeriodEnumValue = dayPeriodEnum.midnight;
            } else {
                dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            }
            switch (token) {
                case 'b':
                case 'bb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'bbb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    }).toLowerCase();
                case 'bbbbb':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'bbbb':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // in the morning, in the afternoon, in the evening, at night
        B: function B(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours >= 17) {
                dayPeriodEnumValue = dayPeriodEnum.evening;
            } else if (hours >= 12) {
                dayPeriodEnumValue = dayPeriodEnum.afternoon;
            } else if (hours >= 4) {
                dayPeriodEnumValue = dayPeriodEnum.morning;
            } else {
                dayPeriodEnumValue = dayPeriodEnum.night;
            }
            switch (token) {
                case 'B':
                case 'BB':
                case 'BBB':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'abbreviated',
                        context: 'formatting'
                    });
                case 'BBBBB':
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'narrow',
                        context: 'formatting'
                    });
                case 'BBBB':
                default:
                    return localize.dayPeriod(dayPeriodEnumValue, {
                        width: 'wide',
                        context: 'formatting'
                    });
            }
        },
        // Hour [1-12]
        h: function h(date, token, localize) {
            if (token === 'ho') {
                var hours = date.getUTCHours() % 12;
                if (hours === 0) hours = 12;
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return formatters$3.h(date, token);
        },
        // Hour [0-23]
        H: function H(date, token, localize) {
            if (token === 'Ho') {
                return localize.ordinalNumber(date.getUTCHours(), {
                    unit: 'hour'
                });
            }
            return formatters$3.H(date, token);
        },
        // Hour [0-11]
        K: function K(date, token, localize) {
            var hours = date.getUTCHours() % 12;
            if (token === 'Ko') {
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return addLeadingZeros(hours, token.length);
        },
        // Hour [1-24]
        k: function k(date, token, localize) {
            var hours = date.getUTCHours();
            if (hours === 0) hours = 24;
            if (token === 'ko') {
                return localize.ordinalNumber(hours, {
                    unit: 'hour'
                });
            }
            return addLeadingZeros(hours, token.length);
        },
        // Minute
        m: function m(date, token, localize) {
            if (token === 'mo') {
                return localize.ordinalNumber(date.getUTCMinutes(), {
                    unit: 'minute'
                });
            }
            return formatters$3.m(date, token);
        },
        // Second
        s: function s(date, token, localize) {
            if (token === 'so') {
                return localize.ordinalNumber(date.getUTCSeconds(), {
                    unit: 'second'
                });
            }
            return formatters$3.s(date, token);
        },
        // Fraction of second
        S: function S(date, token) {
            return formatters$3.S(date, token);
        },
        // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
        X: function X(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            if (timezoneOffset === 0) {
                return 'Z';
            }
            switch (token) {
                // Hours and optional minutes
                case 'X':
                    return formatTimezoneWithOptionalMinutes(timezoneOffset);
                // Hours, minutes and optional seconds without `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `XX`

                case 'XXXX':
                case 'XX':
                    // Hours and minutes without `:` delimiter
                    return formatTimezone(timezoneOffset);
                // Hours, minutes and optional seconds with `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `XXX`

                case 'XXXXX':
                case 'XXX': // Hours and minutes with `:` delimiter

                default:
                    return formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
        x: function x(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Hours and optional minutes
                case 'x':
                    return formatTimezoneWithOptionalMinutes(timezoneOffset);
                // Hours, minutes and optional seconds without `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `xx`

                case 'xxxx':
                case 'xx':
                    // Hours and minutes without `:` delimiter
                    return formatTimezone(timezoneOffset);
                // Hours, minutes and optional seconds with `:` delimiter
                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                // so this token always has the same output as `xxx`

                case 'xxxxx':
                case 'xxx': // Hours and minutes with `:` delimiter

                default:
                    return formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (GMT)
        O: function O(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Short
                case 'O':
                case 'OO':
                case 'OOO':
                    return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                // Long

                case 'OOOO':
                default:
                    return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
        },
        // Timezone (specific non-location)
        z: function z(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
                // Short
                case 'z':
                case 'zz':
                case 'zzz':
                    return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                // Long

                case 'zzzz':
                default:
                    return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
        },
        // Seconds timestamp
        t: function t(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = Math.floor(originalDate.getTime() / 1000);
            return addLeadingZeros(timestamp, token.length);
        },
        // Milliseconds timestamp
        T: function T(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = originalDate.getTime();
            return addLeadingZeros(timestamp, token.length);
        }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
        var sign = offset > 0 ? '-' : '+';
        var absOffset = Math.abs(offset);
        var hours = Math.floor(absOffset / 60);
        var minutes = absOffset % 60;
        if (minutes === 0) {
            return sign + String(hours);
        }
        var delimiter = dirtyDelimiter || '';
        return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
        if (offset % 60 === 0) {
            var sign = offset > 0 ? '-' : '+';
            return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
        }
        return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
        var delimiter = dirtyDelimiter || '';
        var sign = offset > 0 ? '-' : '+';
        var absOffset = Math.abs(offset);
        var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
        var minutes = addLeadingZeros(absOffset % 60, 2);
        return sign + hours + delimiter + minutes;
    }
    var formatters$1 = formatters;

    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
        switch (pattern) {
            case 'P':
                return formatLong.date({
                    width: 'short'
                });
            case 'PP':
                return formatLong.date({
                    width: 'medium'
                });
            case 'PPP':
                return formatLong.date({
                    width: 'long'
                });
            case 'PPPP':
            default:
                return formatLong.date({
                    width: 'full'
                });
        }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
        switch (pattern) {
            case 'p':
                return formatLong.time({
                    width: 'short'
                });
            case 'pp':
                return formatLong.time({
                    width: 'medium'
                });
            case 'ppp':
                return formatLong.time({
                    width: 'long'
                });
            case 'pppp':
            default:
                return formatLong.time({
                    width: 'full'
                });
        }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
        var matchResult = pattern.match(/(P+)(p+)?/) || [];
        var datePattern = matchResult[1];
        var timePattern = matchResult[2];
        if (!timePattern) {
            return dateLongFormatter(pattern, formatLong);
        }
        var dateTimeFormat;
        switch (datePattern) {
            case 'P':
                dateTimeFormat = formatLong.dateTime({
                    width: 'short'
                });
                break;
            case 'PP':
                dateTimeFormat = formatLong.dateTime({
                    width: 'medium'
                });
                break;
            case 'PPP':
                dateTimeFormat = formatLong.dateTime({
                    width: 'long'
                });
                break;
            case 'PPPP':
            default:
                dateTimeFormat = formatLong.dateTime({
                    width: 'full'
                });
                break;
        }
        return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
        p: timeLongFormatter,
        P: dateTimeLongFormatter
    };
    var longFormatters$1 = longFormatters;

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
        return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
        return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
        if (token === 'YYYY') {
            throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === 'YY') {
            throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === 'D') {
            throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === 'DD') {
            throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        }
    }

    var formatDistanceLocale = {
        lessThanXSeconds: {
            one: 'less than a second',
            other: 'less than {{count}} seconds'
        },
        xSeconds: {
            one: '1 second',
            other: '{{count}} seconds'
        },
        halfAMinute: 'half a minute',
        lessThanXMinutes: {
            one: 'less than a minute',
            other: 'less than {{count}} minutes'
        },
        xMinutes: {
            one: '1 minute',
            other: '{{count}} minutes'
        },
        aboutXHours: {
            one: 'about 1 hour',
            other: 'about {{count}} hours'
        },
        xHours: {
            one: '1 hour',
            other: '{{count}} hours'
        },
        xDays: {
            one: '1 day',
            other: '{{count}} days'
        },
        aboutXWeeks: {
            one: 'about 1 week',
            other: 'about {{count}} weeks'
        },
        xWeeks: {
            one: '1 week',
            other: '{{count}} weeks'
        },
        aboutXMonths: {
            one: 'about 1 month',
            other: 'about {{count}} months'
        },
        xMonths: {
            one: '1 month',
            other: '{{count}} months'
        },
        aboutXYears: {
            one: 'about 1 year',
            other: 'about {{count}} years'
        },
        xYears: {
            one: '1 year',
            other: '{{count}} years'
        },
        overXYears: {
            one: 'over 1 year',
            other: 'over {{count}} years'
        },
        almostXYears: {
            one: 'almost 1 year',
            other: 'almost {{count}} years'
        }
    };
    var formatDistance = function formatDistance(token, count, options) {
        var result;
        var tokenValue = formatDistanceLocale[token];
        if (typeof tokenValue === 'string') {
            result = tokenValue;
        } else if (count === 1) {
            result = tokenValue.one;
        } else {
            result = tokenValue.other.replace('{{count}}', count.toString());
        }
        if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                return 'in ' + result;
            } else {
                return result + ' ago';
            }
        }
        return result;
    };
    var formatDistance$1 = formatDistance;

    function buildFormatLongFn(args) {
        return function () {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // TODO: Remove String()
            var width = options.width ? String(options.width) : args.defaultWidth;
            var format = args.formats[width] || args.formats[args.defaultWidth];
            return format;
        };
    }

    var dateFormats = {
        full: 'EEEE, MMMM do, y',
        "long": 'MMMM do, y',
        medium: 'MMM d, y',
        "short": 'MM/dd/yyyy'
    };
    var timeFormats = {
        full: 'h:mm:ss a zzzz',
        "long": 'h:mm:ss a z',
        medium: 'h:mm:ss a',
        "short": 'h:mm a'
    };
    var dateTimeFormats = {
        full: "{{date}} 'at' {{time}}",
        "long": "{{date}} 'at' {{time}}",
        medium: '{{date}}, {{time}}',
        "short": '{{date}}, {{time}}'
    };
    var formatLong = {
        date: buildFormatLongFn({
            formats: dateFormats,
            defaultWidth: 'full'
        }),
        time: buildFormatLongFn({
            formats: timeFormats,
            defaultWidth: 'full'
        }),
        dateTime: buildFormatLongFn({
            formats: dateTimeFormats,
            defaultWidth: 'full'
        })
    };
    var formatLong$1 = formatLong;

    var formatRelativeLocale = {
        lastWeek: "'last' eeee 'at' p",
        yesterday: "'yesterday at' p",
        today: "'today at' p",
        tomorrow: "'tomorrow at' p",
        nextWeek: "eeee 'at' p",
        other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
        return formatRelativeLocale[token];
    };
    var formatRelative$1 = formatRelative;

    function buildLocalizeFn(args) {
        return function (dirtyIndex, options) {
            var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
            var valuesArray;
            if (context === 'formatting' && args.formattingValues) {
                var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
                var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
                valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
            } else {
                var _defaultWidth = args.defaultWidth;
                var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
                valuesArray = args.values[_width] || args.values[_defaultWidth];
            }
            var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

            return valuesArray[index];
        };
    }

    var eraValues = {
        narrow: ['B', 'A'],
        abbreviated: ['BC', 'AD'],
        wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
        narrow: ['1', '2', '3', '4'],
        abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
        wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    }; // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.

    var monthValues = {
        narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
        abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
        narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
        "short": ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
        narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        },
        abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        },
        wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
        }
    };
    var formattingDayPeriodValues = {
        narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        },
        abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        },
        wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
        }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
        var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
        // if they are different for different grammatical genders,
        // use `options.unit`.
        //
        // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
        // 'day', 'hour', 'minute', 'second'.

        var rem100 = number % 100;
        if (rem100 > 20 || rem100 < 10) {
            switch (rem100 % 10) {
                case 1:
                    return number + 'st';
                case 2:
                    return number + 'nd';
                case 3:
                    return number + 'rd';
            }
        }
        return number + 'th';
    };
    var localize = {
        ordinalNumber: ordinalNumber,
        era: buildLocalizeFn({
            values: eraValues,
            defaultWidth: 'wide'
        }),
        quarter: buildLocalizeFn({
            values: quarterValues,
            defaultWidth: 'wide',
            argumentCallback: function argumentCallback(quarter) {
                return quarter - 1;
            }
        }),
        month: buildLocalizeFn({
            values: monthValues,
            defaultWidth: 'wide'
        }),
        day: buildLocalizeFn({
            values: dayValues,
            defaultWidth: 'wide'
        }),
        dayPeriod: buildLocalizeFn({
            values: dayPeriodValues,
            defaultWidth: 'wide',
            formattingValues: formattingDayPeriodValues,
            defaultFormattingWidth: 'wide'
        })
    };
    var localize$1 = localize;

    function buildMatchFn(args) {
        return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var width = options.width;
            var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
            var matchResult = string.match(matchPattern);
            if (!matchResult) {
                return null;
            }
            var matchedString = matchResult[0];
            var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
            var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
                return pattern.test(matchedString);
            }) : findKey(parsePatterns, function (pattern) {
                return pattern.test(matchedString);
            });
            var value;
            value = args.valueCallback ? args.valueCallback(key) : key;
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value: value,
                rest: rest
            };
        };
    }
    function findKey(object, predicate) {
        for (var key in object) {
            if (object.hasOwnProperty(key) && predicate(object[key])) {
                return key;
            }
        }
        return undefined;
    }
    function findIndex(array, predicate) {
        for (var key = 0; key < array.length; key++) {
            if (predicate(array[key])) {
                return key;
            }
        }
        return undefined;
    }

    function buildMatchPatternFn(args) {
        return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var matchResult = string.match(args.matchPattern);
            if (!matchResult) return null;
            var matchedString = matchResult[0];
            var parseResult = string.match(args.parsePattern);
            if (!parseResult) return null;
            var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value: value,
                rest: rest
            };
        };
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
        narrow: /^(b|a)/i,
        abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
        wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
        any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
        narrow: /^[1234]/i,
        abbreviated: /^q[1234]/i,
        wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
        any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
        narrow: /^[jfmasond]/i,
        abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
        wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
        narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
        any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
        narrow: /^[smtwf]/i,
        "short": /^(su|mo|tu|we|th|fr|sa)/i,
        abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
        wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
        narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
        any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
        narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
        any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
        any: {
            am: /^a/i,
            pm: /^p/i,
            midnight: /^mi/i,
            noon: /^no/i,
            morning: /morning/i,
            afternoon: /afternoon/i,
            evening: /evening/i,
            night: /night/i
        }
    };
    var match = {
        ordinalNumber: buildMatchPatternFn({
            matchPattern: matchOrdinalNumberPattern,
            parsePattern: parseOrdinalNumberPattern,
            valueCallback: function valueCallback(value) {
                return parseInt(value, 10);
            }
        }),
        era: buildMatchFn({
            matchPatterns: matchEraPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseEraPatterns,
            defaultParseWidth: 'any'
        }),
        quarter: buildMatchFn({
            matchPatterns: matchQuarterPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseQuarterPatterns,
            defaultParseWidth: 'any',
            valueCallback: function valueCallback(index) {
                return index + 1;
            }
        }),
        month: buildMatchFn({
            matchPatterns: matchMonthPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseMonthPatterns,
            defaultParseWidth: 'any'
        }),
        day: buildMatchFn({
            matchPatterns: matchDayPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseDayPatterns,
            defaultParseWidth: 'any'
        }),
        dayPeriod: buildMatchFn({
            matchPatterns: matchDayPeriodPatterns,
            defaultMatchWidth: 'any',
            parsePatterns: parseDayPeriodPatterns,
            defaultParseWidth: 'any'
        })
    };
    var match$1 = match;

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
        code: 'en-US',
        formatDistance: formatDistance$1,
        formatLong: formatLong$1,
        formatRelative: formatRelative$1,
        localize: localize$1,
        match: match$1,
        options: {
            weekStartsOn: 0
            /* Sunday */,

            firstWeekContainsDate: 1
        }
    };
    var defaultLocale = locale;

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp$1 = /^'([^]*?)'?$/;
    var doubleQuoteRegExp$1 = /''/g;
    var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, options) {
        var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
        requiredArgs(2, arguments);
        var formatStr = String(dirtyFormatStr);
        var defaultOptions = getDefaultOptions();
        var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
        var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        if (!locale.localize) {
            throw new RangeError('locale must contain localize property');
        }
        if (!locale.formatLong) {
            throw new RangeError('locale must contain formatLong property');
        }
        var originalDate = toDate(dirtyDate);
        if (!isValid(originalDate)) {
            throw new RangeError('Invalid time value');
        } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
        // This ensures that when UTC functions will be implemented, locales will be compatible with them.
        // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376

        var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
        var utcDate = subMilliseconds(originalDate, timezoneOffset);
        var formatterOptions = {
            firstWeekContainsDate: firstWeekContainsDate,
            weekStartsOn: weekStartsOn,
            locale: locale,
            _originalDate: originalDate
        };
        var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
            var firstCharacter = substring[0];
            if (firstCharacter === 'p' || firstCharacter === 'P') {
                var longFormatter = longFormatters$1[firstCharacter];
                return longFormatter(substring, locale.formatLong);
            }
            return substring;
        }).join('').match(formattingTokensRegExp$1).map(function (substring) {
            // Replace two single quote characters with one single quote character
            if (substring === "''") {
                return "'";
            }
            var firstCharacter = substring[0];
            if (firstCharacter === "'") {
                return cleanEscapedString$1(substring);
            }
            var formatter = formatters$1[firstCharacter];
            if (formatter) {
                if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
                    throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
                }
                if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
                    throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
                }
                return formatter(utcDate, substring, locale.localize, formatterOptions);
            }
            if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
                throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
            }
            return substring;
        }).join('');
        return result;
    }
    function cleanEscapedString$1(input) {
        var matched = input.match(escapedStringRegExp$1);
        if (!matched) {
            return input;
        }
        return matched[1].replace(doubleQuoteRegExp$1, "'");
    }

    function assign(target, object) {
        if (target == null) {
            throw new TypeError('assign requires that input parameter not be null or undefined');
        }
        for (var property in object) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
                target[property] = object[property];
            }
        }
        return target;
    }

    function _typeof$w(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$w = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$w = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$w(obj);
    }
    function _inherits$v(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$v(subClass, superClass);
    }
    function _setPrototypeOf$v(o, p) {
        _setPrototypeOf$v = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$v(o, p);
    }
    function _createSuper$v(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$v();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$v(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$v(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$v(this, result);
        };
    }
    function _possibleConstructorReturn$v(self, call) {
        if (call && (_typeof$w(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$v(self);
    }
    function _assertThisInitialized$v(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$v() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$v(o) {
        _getPrototypeOf$v = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$v(o);
    }
    function _classCallCheck$w(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$w(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$w(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$w(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$w(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty$v(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var TIMEZONE_UNIT_PRIORITY = 10;
    var Setter = /*#__PURE__*/function () {
        function Setter() {
            _classCallCheck$w(this, Setter);
            _defineProperty$v(this, "subPriority", 0);
        }
        _createClass$w(Setter, [{
            key: "validate",
            value: function validate(_utcDate, _options) {
                return true;
            }
        }]);
        return Setter;
    }();
    var ValueSetter = /*#__PURE__*/function (_Setter) {
        _inherits$v(ValueSetter, _Setter);
        var _super = _createSuper$v(ValueSetter);
        function ValueSetter(value, validateValue, setValue, priority, subPriority) {
            var _this;
            _classCallCheck$w(this, ValueSetter);
            _this = _super.call(this);
            _this.value = value;
            _this.validateValue = validateValue;
            _this.setValue = setValue;
            _this.priority = priority;
            if (subPriority) {
                _this.subPriority = subPriority;
            }
            return _this;
        }
        _createClass$w(ValueSetter, [{
            key: "validate",
            value: function validate(utcDate, options) {
                return this.validateValue(utcDate, this.value, options);
            }
        }, {
            key: "set",
            value: function set(utcDate, flags, options) {
                return this.setValue(utcDate, flags, this.value, options);
            }
        }]);
        return ValueSetter;
    }(Setter);
    var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
        _inherits$v(DateToSystemTimezoneSetter, _Setter2);
        var _super2 = _createSuper$v(DateToSystemTimezoneSetter);
        function DateToSystemTimezoneSetter() {
            var _this2;
            _classCallCheck$w(this, DateToSystemTimezoneSetter);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this2 = _super2.call.apply(_super2, [this].concat(args));
            _defineProperty$v(_assertThisInitialized$v(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
            _defineProperty$v(_assertThisInitialized$v(_this2), "subPriority", -1);
            return _this2;
        }
        _createClass$w(DateToSystemTimezoneSetter, [{
            key: "set",
            value: function set(date, flags) {
                if (flags.timestampIsSet) {
                    return date;
                }
                var convertedDate = new Date(0);
                convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
                return convertedDate;
            }
        }]);
        return DateToSystemTimezoneSetter;
    }(Setter);

    function _classCallCheck$v(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$v(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$v(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$v(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$v(Constructor, staticProps);
        return Constructor;
    }
    var Parser = /*#__PURE__*/function () {
        function Parser() {
            _classCallCheck$v(this, Parser);
        }
        _createClass$v(Parser, [{
            key: "run",
            value: function run(dateString, token, match, options) {
                var result = this.parse(dateString, token, match, options);
                if (!result) {
                    return null;
                }
                return {
                    setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
                    rest: result.rest
                };
            }
        }, {
            key: "validate",
            value: function validate(_utcDate, _value, _options) {
                return true;
            }
        }]);
        return Parser;
    }();

    function _typeof$v(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$v = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$v = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$v(obj);
    }
    function _classCallCheck$u(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$u(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$u(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$u(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$u(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$u(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$u(subClass, superClass);
    }
    function _setPrototypeOf$u(o, p) {
        _setPrototypeOf$u = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$u(o, p);
    }
    function _createSuper$u(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$u();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$u(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$u(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$u(this, result);
        };
    }
    function _possibleConstructorReturn$u(self, call) {
        if (call && (_typeof$v(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$u(self);
    }
    function _assertThisInitialized$u(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$u() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$u(o) {
        _getPrototypeOf$u = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$u(o);
    }
    function _defineProperty$u(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var EraParser = /*#__PURE__*/function (_Parser) {
        _inherits$u(EraParser, _Parser);
        var _super = _createSuper$u(EraParser);
        function EraParser() {
            var _this;
            _classCallCheck$u(this, EraParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$u(_assertThisInitialized$u(_this), "priority", 140);
            _defineProperty$u(_assertThisInitialized$u(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
            return _this;
        }
        _createClass$u(EraParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // AD, BC
                    case 'G':
                    case 'GG':
                    case 'GGG':
                        return match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                    // A, B

                    case 'GGGGG':
                        return match.era(dateString, {
                            width: 'narrow'
                        });
                    // Anno Domini, Before Christ

                    case 'GGGG':
                    default:
                        return match.era(dateString, {
                            width: 'wide'
                        }) || match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                flags.era = value;
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return EraParser;
    }(Parser);

    var numericPatterns = {
        month: /^(1[0-2]|0?\d)/,
        // 0 to 12
        date: /^(3[0-1]|[0-2]?\d)/,
        // 0 to 31
        dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
        // 0 to 366
        week: /^(5[0-3]|[0-4]?\d)/,
        // 0 to 53
        hour23h: /^(2[0-3]|[0-1]?\d)/,
        // 0 to 23
        hour24h: /^(2[0-4]|[0-1]?\d)/,
        // 0 to 24
        hour11h: /^(1[0-1]|0?\d)/,
        // 0 to 11
        hour12h: /^(1[0-2]|0?\d)/,
        // 0 to 12
        minute: /^[0-5]?\d/,
        // 0 to 59
        second: /^[0-5]?\d/,
        // 0 to 59
        singleDigit: /^\d/,
        // 0 to 9
        twoDigits: /^\d{1,2}/,
        // 0 to 99
        threeDigits: /^\d{1,3}/,
        // 0 to 999
        fourDigits: /^\d{1,4}/,
        // 0 to 9999
        anyDigitsSigned: /^-?\d+/,
        singleDigitSigned: /^-?\d/,
        // 0 to 9, -0 to -9
        twoDigitsSigned: /^-?\d{1,2}/,
        // 0 to 99, -0 to -99
        threeDigitsSigned: /^-?\d{1,3}/,
        // 0 to 999, -0 to -999
        fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
    };

    var timezonePatterns = {
        basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
        basic: /^([+-])(\d{2})(\d{2})|Z/,
        basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
        extended: /^([+-])(\d{2}):(\d{2})|Z/,
        extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
    };

    function mapValue(parseFnResult, mapFn) {
        if (!parseFnResult) {
            return parseFnResult;
        }
        return {
            value: mapFn(parseFnResult.value),
            rest: parseFnResult.rest
        };
    }
    function parseNumericPattern(pattern, dateString) {
        var matchResult = dateString.match(pattern);
        if (!matchResult) {
            return null;
        }
        return {
            value: parseInt(matchResult[0], 10),
            rest: dateString.slice(matchResult[0].length)
        };
    }
    function parseTimezonePattern(pattern, dateString) {
        var matchResult = dateString.match(pattern);
        if (!matchResult) {
            return null;
        } // Input is 'Z'

        if (matchResult[0] === 'Z') {
            return {
                value: 0,
                rest: dateString.slice(1)
            };
        }
        var sign = matchResult[1] === '+' ? 1 : -1;
        var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
        var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
        var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
        return {
            value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
            rest: dateString.slice(matchResult[0].length)
        };
    }
    function parseAnyDigitsSigned(dateString) {
        return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
    }
    function parseNDigits(n, dateString) {
        switch (n) {
            case 1:
                return parseNumericPattern(numericPatterns.singleDigit, dateString);
            case 2:
                return parseNumericPattern(numericPatterns.twoDigits, dateString);
            case 3:
                return parseNumericPattern(numericPatterns.threeDigits, dateString);
            case 4:
                return parseNumericPattern(numericPatterns.fourDigits, dateString);
            default:
                return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
        }
    }
    function parseNDigitsSigned(n, dateString) {
        switch (n) {
            case 1:
                return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
            case 2:
                return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
            case 3:
                return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
            case 4:
                return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
            default:
                return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
        }
    }
    function dayPeriodEnumToHours(dayPeriod) {
        switch (dayPeriod) {
            case 'morning':
                return 4;
            case 'evening':
                return 17;
            case 'pm':
            case 'noon':
            case 'afternoon':
                return 12;
            case 'am':
            case 'midnight':
            case 'night':
            default:
                return 0;
        }
    }
    function normalizeTwoDigitYear(twoDigitYear, currentYear) {
        var isCommonEra = currentYear > 0; // Absolute number of the current year:
        // 1 -> 1 AC
        // 0 -> 1 BC
        // -1 -> 2 BC

        var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
        var result;
        if (absCurrentYear <= 50) {
            result = twoDigitYear || 100;
        } else {
            var rangeEnd = absCurrentYear + 50;
            var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
            var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
            result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
        }
        return isCommonEra ? result : 1 - result;
    }
    function isLeapYearIndex$1(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }

    function _typeof$u(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$u = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$u = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$u(obj);
    }
    function _classCallCheck$t(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$t(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$t(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$t(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$t(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$t(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$t(subClass, superClass);
    }
    function _setPrototypeOf$t(o, p) {
        _setPrototypeOf$t = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$t(o, p);
    }
    function _createSuper$t(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$t();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$t(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$t(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$t(this, result);
        };
    }
    function _possibleConstructorReturn$t(self, call) {
        if (call && (_typeof$u(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$t(self);
    }
    function _assertThisInitialized$t(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$t() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$t(o) {
        _getPrototypeOf$t = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$t(o);
    }
    function _defineProperty$t(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var YearParser = /*#__PURE__*/function (_Parser) {
        _inherits$t(YearParser, _Parser);
        var _super = _createSuper$t(YearParser);
        function YearParser() {
            var _this;
            _classCallCheck$t(this, YearParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$t(_assertThisInitialized$t(_this), "priority", 130);
            _defineProperty$t(_assertThisInitialized$t(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$t(YearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'yy'
                    };
                };
                switch (token) {
                    case 'y':
                        return mapValue(parseNDigits(4, dateString), valueCallback);
                    case 'yo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                var currentYear = date.getUTCFullYear();
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    return date;
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return YearParser;
    }(Parser);

    function _typeof$t(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$t = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$t = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$t(obj);
    }
    function _classCallCheck$s(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$s(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$s(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$s(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$s(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$s(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$s(subClass, superClass);
    }
    function _setPrototypeOf$s(o, p) {
        _setPrototypeOf$s = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$s(o, p);
    }
    function _createSuper$s(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$s(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$s(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$s(this, result);
        };
    }
    function _possibleConstructorReturn$s(self, call) {
        if (call && (_typeof$t(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$s(self);
    }
    function _assertThisInitialized$s(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$s() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$s(o) {
        _getPrototypeOf$s = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$s(o);
    }
    function _defineProperty$s(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    // Local week-numbering year
    var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
        _inherits$s(LocalWeekYearParser, _Parser);
        var _super = _createSuper$s(LocalWeekYearParser);
        function LocalWeekYearParser() {
            var _this;
            _classCallCheck$s(this, LocalWeekYearParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$s(_assertThisInitialized$s(_this), "priority", 130);
            _defineProperty$s(_assertThisInitialized$s(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
            return _this;
        }
        _createClass$s(LocalWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'YY'
                    };
                };
                switch (token) {
                    case 'Y':
                        return mapValue(parseNDigits(4, dateString), valueCallback);
                    case 'Yo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value, options) {
                var currentYear = getUTCWeekYear(date, options);
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
                    date.setUTCHours(0, 0, 0, 0);
                    return startOfUTCWeek(date, options);
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
                date.setUTCHours(0, 0, 0, 0);
                return startOfUTCWeek(date, options);
            }
        }]);
        return LocalWeekYearParser;
    }(Parser);

    function _typeof$s(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$s = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$s = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$s(obj);
    }
    function _classCallCheck$r(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$r(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$r(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$r(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$r(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$r(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$r(subClass, superClass);
    }
    function _setPrototypeOf$r(o, p) {
        _setPrototypeOf$r = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$r(o, p);
    }
    function _createSuper$r(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$r(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$r(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$r(this, result);
        };
    }
    function _possibleConstructorReturn$r(self, call) {
        if (call && (_typeof$s(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$r(self);
    }
    function _assertThisInitialized$r(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$r() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$r(o) {
        _getPrototypeOf$r = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$r(o);
    }
    function _defineProperty$r(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
        _inherits$r(ISOWeekYearParser, _Parser);
        var _super = _createSuper$r(ISOWeekYearParser);
        function ISOWeekYearParser() {
            var _this;
            _classCallCheck$r(this, ISOWeekYearParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$r(_assertThisInitialized$r(_this), "priority", 130);
            _defineProperty$r(_assertThisInitialized$r(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$r(ISOWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'R') {
                    return parseNDigitsSigned(4, dateString);
                }
                return parseNDigitsSigned(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                var firstWeekOfYear = new Date(0);
                firstWeekOfYear.setUTCFullYear(value, 0, 4);
                firstWeekOfYear.setUTCHours(0, 0, 0, 0);
                return startOfUTCISOWeek(firstWeekOfYear);
            }
        }]);
        return ISOWeekYearParser;
    }(Parser);

    function _typeof$r(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$r = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$r = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$r(obj);
    }
    function _classCallCheck$q(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$q(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$q(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$q(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$q(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$q(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$q(subClass, superClass);
    }
    function _setPrototypeOf$q(o, p) {
        _setPrototypeOf$q = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$q(o, p);
    }
    function _createSuper$q(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$q(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$q(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$q(this, result);
        };
    }
    function _possibleConstructorReturn$q(self, call) {
        if (call && (_typeof$r(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$q(self);
    }
    function _assertThisInitialized$q(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$q() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$q(o) {
        _getPrototypeOf$q = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$q(o);
    }
    function _defineProperty$q(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
        _inherits$q(ExtendedYearParser, _Parser);
        var _super = _createSuper$q(ExtendedYearParser);
        function ExtendedYearParser() {
            var _this;
            _classCallCheck$q(this, ExtendedYearParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$q(_assertThisInitialized$q(_this), "priority", 130);
            _defineProperty$q(_assertThisInitialized$q(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$q(ExtendedYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'u') {
                    return parseNDigitsSigned(4, dateString);
                }
                return parseNDigitsSigned(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return ExtendedYearParser;
    }(Parser);

    function _typeof$q(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$q = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$q = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$q(obj);
    }
    function _classCallCheck$p(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$p(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$p(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$p(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$p(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$p(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$p(subClass, superClass);
    }
    function _setPrototypeOf$p(o, p) {
        _setPrototypeOf$p = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$p(o, p);
    }
    function _createSuper$p(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$p(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$p(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$p(this, result);
        };
    }
    function _possibleConstructorReturn$p(self, call) {
        if (call && (_typeof$q(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$p(self);
    }
    function _assertThisInitialized$p(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$p() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$p(o) {
        _getPrototypeOf$p = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$p(o);
    }
    function _defineProperty$p(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var QuarterParser = /*#__PURE__*/function (_Parser) {
        _inherits$p(QuarterParser, _Parser);
        var _super = _createSuper$p(QuarterParser);
        function QuarterParser() {
            var _this;
            _classCallCheck$p(this, QuarterParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$p(_assertThisInitialized$p(_this), "priority", 120);
            _defineProperty$p(_assertThisInitialized$p(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$p(QuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'Q':
                    case 'QQ':
                        // 01, 02, 03, 04
                        return parseNDigits(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th

                    case 'Qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4

                    case 'QQQ':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)

                    case 'QQQQQ':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1st quarter, 2nd quarter, ...

                    case 'QQQQ':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return QuarterParser;
    }(Parser);

    function _typeof$p(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$p = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$p = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$p(obj);
    }
    function _classCallCheck$o(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$o(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$o(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$o(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$o(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$o(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$o(subClass, superClass);
    }
    function _setPrototypeOf$o(o, p) {
        _setPrototypeOf$o = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$o(o, p);
    }
    function _createSuper$o(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$o(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$o(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$o(this, result);
        };
    }
    function _possibleConstructorReturn$o(self, call) {
        if (call && (_typeof$p(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$o(self);
    }
    function _assertThisInitialized$o(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$o() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$o(o) {
        _getPrototypeOf$o = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$o(o);
    }
    function _defineProperty$o(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
        _inherits$o(StandAloneQuarterParser, _Parser);
        var _super = _createSuper$o(StandAloneQuarterParser);
        function StandAloneQuarterParser() {
            var _this;
            _classCallCheck$o(this, StandAloneQuarterParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$o(_assertThisInitialized$o(_this), "priority", 120);
            _defineProperty$o(_assertThisInitialized$o(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$o(StandAloneQuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'q':
                    case 'qq':
                        // 01, 02, 03, 04
                        return parseNDigits(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th

                    case 'qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4

                    case 'qqq':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)

                    case 'qqqqq':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1st quarter, 2nd quarter, ...

                    case 'qqqq':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return StandAloneQuarterParser;
    }(Parser);

    function _typeof$o(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$o = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$o = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$o(obj);
    }
    function _classCallCheck$n(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$n(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$n(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$n(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$n(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$n(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$n(subClass, superClass);
    }
    function _setPrototypeOf$n(o, p) {
        _setPrototypeOf$n = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$n(o, p);
    }
    function _createSuper$n(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$n(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$n(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$n(this, result);
        };
    }
    function _possibleConstructorReturn$n(self, call) {
        if (call && (_typeof$o(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$n(self);
    }
    function _assertThisInitialized$n(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$n() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$n(o) {
        _getPrototypeOf$n = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$n(o);
    }
    function _defineProperty$n(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var MonthParser = /*#__PURE__*/function (_Parser) {
        _inherits$n(MonthParser, _Parser);
        var _super = _createSuper$n(MonthParser);
        function MonthParser() {
            var _this;
            _classCallCheck$n(this, MonthParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$n(_assertThisInitialized$n(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
            _defineProperty$n(_assertThisInitialized$n(_this), "priority", 110);
            return _this;
        }
        _createClass$n(MonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'M':
                        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12

                    case 'MM':
                        return mapValue(parseNDigits(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th

                    case 'Mo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec

                    case 'MMM':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // J, F, ..., D

                    case 'MMMMM':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // January, February, ..., December

                    case 'MMMM':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return MonthParser;
    }(Parser);

    function _typeof$n(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$n = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$n = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$n(obj);
    }
    function _classCallCheck$m(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$m(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$m(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$m(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$m(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$m(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$m(subClass, superClass);
    }
    function _setPrototypeOf$m(o, p) {
        _setPrototypeOf$m = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$m(o, p);
    }
    function _createSuper$m(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$m(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$m(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$m(this, result);
        };
    }
    function _possibleConstructorReturn$m(self, call) {
        if (call && (_typeof$n(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$m(self);
    }
    function _assertThisInitialized$m(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$m() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$m(o) {
        _getPrototypeOf$m = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$m(o);
    }
    function _defineProperty$m(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
        _inherits$m(StandAloneMonthParser, _Parser);
        var _super = _createSuper$m(StandAloneMonthParser);
        function StandAloneMonthParser() {
            var _this;
            _classCallCheck$m(this, StandAloneMonthParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$m(_assertThisInitialized$m(_this), "priority", 110);
            _defineProperty$m(_assertThisInitialized$m(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$m(StandAloneMonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'L':
                        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12

                    case 'LL':
                        return mapValue(parseNDigits(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th

                    case 'Lo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec

                    case 'LLL':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // J, F, ..., D

                    case 'LLLLL':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // January, February, ..., December

                    case 'LLLL':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return StandAloneMonthParser;
    }(Parser);

    function setUTCWeek(dirtyDate, dirtyWeek, options) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var week = toInteger(dirtyWeek);
        var diff = getUTCWeek(date, options) - week;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
    }

    function _typeof$m(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$m = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$m = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$m(obj);
    }
    function _classCallCheck$l(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$l(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$l(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$l(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$l(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$l(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$l(subClass, superClass);
    }
    function _setPrototypeOf$l(o, p) {
        _setPrototypeOf$l = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$l(o, p);
    }
    function _createSuper$l(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$l(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$l(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$l(this, result);
        };
    }
    function _possibleConstructorReturn$l(self, call) {
        if (call && (_typeof$m(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$l(self);
    }
    function _assertThisInitialized$l(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$l() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$l(o) {
        _getPrototypeOf$l = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$l(o);
    }
    function _defineProperty$l(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var LocalWeekParser = /*#__PURE__*/function (_Parser) {
        _inherits$l(LocalWeekParser, _Parser);
        var _super = _createSuper$l(LocalWeekParser);
        function LocalWeekParser() {
            var _this;
            _classCallCheck$l(this, LocalWeekParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$l(_assertThisInitialized$l(_this), "priority", 100);
            _defineProperty$l(_assertThisInitialized$l(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
            return _this;
        }
        _createClass$l(LocalWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'w':
                        return parseNumericPattern(numericPatterns.week, dateString);
                    case 'wo':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                return startOfUTCWeek(setUTCWeek(date, value, options), options);
            }
        }]);
        return LocalWeekParser;
    }(Parser);

    function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var isoWeek = toInteger(dirtyISOWeek);
        var diff = getUTCISOWeek(date) - isoWeek;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
    }

    function _typeof$l(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$l = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$l = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$l(obj);
    }
    function _classCallCheck$k(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$k(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$k(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$k(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$k(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$k(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$k(subClass, superClass);
    }
    function _setPrototypeOf$k(o, p) {
        _setPrototypeOf$k = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$k(o, p);
    }
    function _createSuper$k(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$k(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$k(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$k(this, result);
        };
    }
    function _possibleConstructorReturn$k(self, call) {
        if (call && (_typeof$l(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$k(self);
    }
    function _assertThisInitialized$k(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$k() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$k(o) {
        _getPrototypeOf$k = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$k(o);
    }
    function _defineProperty$k(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var ISOWeekParser = /*#__PURE__*/function (_Parser) {
        _inherits$k(ISOWeekParser, _Parser);
        var _super = _createSuper$k(ISOWeekParser);
        function ISOWeekParser() {
            var _this;
            _classCallCheck$k(this, ISOWeekParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$k(_assertThisInitialized$k(_this), "priority", 100);
            _defineProperty$k(_assertThisInitialized$k(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$k(ISOWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'I':
                        return parseNumericPattern(numericPatterns.week, dateString);
                    case 'Io':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                return startOfUTCISOWeek(setUTCISOWeek(date, value));
            }
        }]);
        return ISOWeekParser;
    }(Parser);

    function _typeof$k(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$k = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$k = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$k(obj);
    }
    function _classCallCheck$j(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$j(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$j(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$j(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$j(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$j(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$j(subClass, superClass);
    }
    function _setPrototypeOf$j(o, p) {
        _setPrototypeOf$j = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$j(o, p);
    }
    function _createSuper$j(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$j(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$j(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$j(this, result);
        };
    }
    function _possibleConstructorReturn$j(self, call) {
        if (call && (_typeof$k(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$j(self);
    }
    function _assertThisInitialized$j(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$j() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$j(o) {
        _getPrototypeOf$j = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$j(o);
    }
    function _defineProperty$j(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Day of the month

    var DateParser = /*#__PURE__*/function (_Parser) {
        _inherits$j(DateParser, _Parser);
        var _super = _createSuper$j(DateParser);
        function DateParser() {
            var _this;
            _classCallCheck$j(this, DateParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$j(_assertThisInitialized$j(_this), "priority", 90);
            _defineProperty$j(_assertThisInitialized$j(_this), "subPriority", 1);
            _defineProperty$j(_assertThisInitialized$j(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$j(DateParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'd':
                        return parseNumericPattern(numericPatterns.date, dateString);
                    case 'do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = isLeapYearIndex$1(year);
                var month = date.getUTCMonth();
                if (isLeapYear) {
                    return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
                } else {
                    return value >= 1 && value <= DAYS_IN_MONTH[month];
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCDate(value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return DateParser;
    }(Parser);

    function _typeof$j(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$j = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$j = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$j(obj);
    }
    function _classCallCheck$i(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$i(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$i(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$i(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$i(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$i(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$i(subClass, superClass);
    }
    function _setPrototypeOf$i(o, p) {
        _setPrototypeOf$i = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$i(o, p);
    }
    function _createSuper$i(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$i(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$i(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$i(this, result);
        };
    }
    function _possibleConstructorReturn$i(self, call) {
        if (call && (_typeof$j(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$i(self);
    }
    function _assertThisInitialized$i(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$i() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$i(o) {
        _getPrototypeOf$i = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$i(o);
    }
    function _defineProperty$i(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var DayOfYearParser = /*#__PURE__*/function (_Parser) {
        _inherits$i(DayOfYearParser, _Parser);
        var _super = _createSuper$i(DayOfYearParser);
        function DayOfYearParser() {
            var _this;
            _classCallCheck$i(this, DayOfYearParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$i(_assertThisInitialized$i(_this), "priority", 90);
            _defineProperty$i(_assertThisInitialized$i(_this), "subpriority", 1);
            _defineProperty$i(_assertThisInitialized$i(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$i(DayOfYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'D':
                    case 'DD':
                        return parseNumericPattern(numericPatterns.dayOfYear, dateString);
                    case 'Do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = isLeapYearIndex$1(year);
                if (isLeapYear) {
                    return value >= 1 && value <= 366;
                } else {
                    return value >= 1 && value <= 365;
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(0, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return DayOfYearParser;
    }(Parser);

    function setUTCDay(dirtyDate, dirtyDay, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(2, arguments);
        var defaultOptions = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        var date = toDate(dirtyDate);
        var day = toInteger(dirtyDay);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }

    function _typeof$i(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$i = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$i = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$i(obj);
    }
    function _classCallCheck$h(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$h(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$h(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$h(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$h(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$h(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$h(subClass, superClass);
    }
    function _setPrototypeOf$h(o, p) {
        _setPrototypeOf$h = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$h(o, p);
    }
    function _createSuper$h(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$h(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$h(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$h(this, result);
        };
    }
    function _possibleConstructorReturn$h(self, call) {
        if (call && (_typeof$i(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$h(self);
    }
    function _assertThisInitialized$h(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$h() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$h(o) {
        _getPrototypeOf$h = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$h(o);
    }
    function _defineProperty$h(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var DayParser = /*#__PURE__*/function (_Parser) {
        _inherits$h(DayParser, _Parser);
        var _super = _createSuper$h(DayParser);
        function DayParser() {
            var _this;
            _classCallCheck$h(this, DayParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$h(_assertThisInitialized$h(_this), "priority", 90);
            _defineProperty$h(_assertThisInitialized$h(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$h(DayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // Tue
                    case 'E':
                    case 'EE':
                    case 'EEE':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T

                    case 'EEEEE':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu

                    case 'EEEEEE':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday

                    case 'EEEE':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return DayParser;
    }(Parser);

    function _typeof$h(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$h = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$h = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$h(obj);
    }
    function _classCallCheck$g(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$g(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$g(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$g(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$g(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$g(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$g(subClass, superClass);
    }
    function _setPrototypeOf$g(o, p) {
        _setPrototypeOf$g = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$g(o, p);
    }
    function _createSuper$g(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$g(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$g(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$g(this, result);
        };
    }
    function _possibleConstructorReturn$g(self, call) {
        if (call && (_typeof$h(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$g(self);
    }
    function _assertThisInitialized$g(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$g() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$g(o) {
        _getPrototypeOf$g = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$g(o);
    }
    function _defineProperty$g(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var LocalDayParser = /*#__PURE__*/function (_Parser) {
        _inherits$g(LocalDayParser, _Parser);
        var _super = _createSuper$g(LocalDayParser);
        function LocalDayParser() {
            var _this;
            _classCallCheck$g(this, LocalDayParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$g(_assertThisInitialized$g(_this), "priority", 90);
            _defineProperty$g(_assertThisInitialized$g(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
            return _this;
        }
        _createClass$g(LocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'e':
                    case 'ee':
                        // 03
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                    // 3rd

                    case 'eo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue

                    case 'eee':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T

                    case 'eeeee':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu

                    case 'eeeeee':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday

                    case 'eeee':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return LocalDayParser;
    }(Parser);

    function _typeof$g(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$g = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$g = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$g(obj);
    }
    function _classCallCheck$f(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$f(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$f(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$f(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$f(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$f(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$f(subClass, superClass);
    }
    function _setPrototypeOf$f(o, p) {
        _setPrototypeOf$f = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$f(o, p);
    }
    function _createSuper$f(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$f(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$f(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$f(this, result);
        };
    }
    function _possibleConstructorReturn$f(self, call) {
        if (call && (_typeof$g(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$f(self);
    }
    function _assertThisInitialized$f(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$f() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$f(o) {
        _getPrototypeOf$f = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$f(o);
    }
    function _defineProperty$f(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
        _inherits$f(StandAloneLocalDayParser, _Parser);
        var _super = _createSuper$f(StandAloneLocalDayParser);
        function StandAloneLocalDayParser() {
            var _this;
            _classCallCheck$f(this, StandAloneLocalDayParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$f(_assertThisInitialized$f(_this), "priority", 90);
            _defineProperty$f(_assertThisInitialized$f(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
            return _this;
        }
        _createClass$f(StandAloneLocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'c':
                    case 'cc':
                        // 03
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                    // 3rd

                    case 'co':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue

                    case 'ccc':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // T

                    case 'ccccc':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tu

                    case 'cccccc':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tuesday

                    case 'cccc':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return StandAloneLocalDayParser;
    }(Parser);

    function setUTCISODay(dirtyDate, dirtyDay) {
        requiredArgs(2, arguments);
        var day = toInteger(dirtyDay);
        if (day % 7 === 0) {
            day = day - 7;
        }
        var weekStartsOn = 1;
        var date = toDate(dirtyDate);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }

    function _typeof$f(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$f = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$f = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$f(obj);
    }
    function _classCallCheck$e(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$e(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$e(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$e(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$e(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$e(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$e(subClass, superClass);
    }
    function _setPrototypeOf$e(o, p) {
        _setPrototypeOf$e = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$e(o, p);
    }
    function _createSuper$e(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$e(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$e(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$e(this, result);
        };
    }
    function _possibleConstructorReturn$e(self, call) {
        if (call && (_typeof$f(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$e(self);
    }
    function _assertThisInitialized$e(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$e() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$e(o) {
        _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$e(o);
    }
    function _defineProperty$e(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var ISODayParser = /*#__PURE__*/function (_Parser) {
        _inherits$e(ISODayParser, _Parser);
        var _super = _createSuper$e(ISODayParser);
        function ISODayParser() {
            var _this;
            _classCallCheck$e(this, ISODayParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$e(_assertThisInitialized$e(_this), "priority", 90);
            _defineProperty$e(_assertThisInitialized$e(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
            return _this;
        }
        _createClass$e(ISODayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    if (value === 0) {
                        return 7;
                    }
                    return value;
                };
                switch (token) {
                    // 2
                    case 'i':
                    case 'ii':
                        // 02
                        return parseNDigits(token.length, dateString);
                    // 2nd

                    case 'io':
                        return match.ordinalNumber(dateString, {
                            unit: 'day'
                        });
                    // Tue

                    case 'iii':
                        return mapValue(match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // T

                    case 'iiiii':
                        return mapValue(match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tu

                    case 'iiiiii':
                        return mapValue(match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tuesday

                    case 'iiii':
                    default:
                        return mapValue(match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 7;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date = setUTCISODay(date, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
        return ISODayParser;
    }(Parser);

    function _typeof$e(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$e = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$e = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$e(obj);
    }
    function _classCallCheck$d(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$d(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$d(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$d(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$d(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$d(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$d(subClass, superClass);
    }
    function _setPrototypeOf$d(o, p) {
        _setPrototypeOf$d = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$d(o, p);
    }
    function _createSuper$d(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$d(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$d(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$d(this, result);
        };
    }
    function _possibleConstructorReturn$d(self, call) {
        if (call && (_typeof$e(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$d(self);
    }
    function _assertThisInitialized$d(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$d() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$d(o) {
        _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$d(o);
    }
    function _defineProperty$d(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var AMPMParser = /*#__PURE__*/function (_Parser) {
        _inherits$d(AMPMParser, _Parser);
        var _super = _createSuper$d(AMPMParser);
        function AMPMParser() {
            var _this;
            _classCallCheck$d(this, AMPMParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$d(_assertThisInitialized$d(_this), "priority", 80);
            _defineProperty$d(_assertThisInitialized$d(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
            return _this;
        }
        _createClass$d(AMPMParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'a':
                    case 'aa':
                    case 'aaa':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaaa':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaa':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
        return AMPMParser;
    }(Parser);

    function _typeof$d(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$d = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$d = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$d(obj);
    }
    function _classCallCheck$c(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$c(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$c(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$c(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$c(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$c(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$c(subClass, superClass);
    }
    function _setPrototypeOf$c(o, p) {
        _setPrototypeOf$c = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$c(o, p);
    }
    function _createSuper$c(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$c(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$c(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$c(this, result);
        };
    }
    function _possibleConstructorReturn$c(self, call) {
        if (call && (_typeof$d(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$c(self);
    }
    function _assertThisInitialized$c(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$c() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$c(o) {
        _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$c(o);
    }
    function _defineProperty$c(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
        _inherits$c(AMPMMidnightParser, _Parser);
        var _super = _createSuper$c(AMPMMidnightParser);
        function AMPMMidnightParser() {
            var _this;
            _classCallCheck$c(this, AMPMMidnightParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$c(_assertThisInitialized$c(_this), "priority", 80);
            _defineProperty$c(_assertThisInitialized$c(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
            return _this;
        }
        _createClass$c(AMPMMidnightParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'b':
                    case 'bb':
                    case 'bbb':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbbb':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbb':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
        return AMPMMidnightParser;
    }(Parser);

    function _typeof$c(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$c = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$c = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$c(obj);
    }
    function _classCallCheck$b(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$b(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$b(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$b(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$b(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$b(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$b(subClass, superClass);
    }
    function _setPrototypeOf$b(o, p) {
        _setPrototypeOf$b = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$b(o, p);
    }
    function _createSuper$b(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$b(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$b(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$b(this, result);
        };
    }
    function _possibleConstructorReturn$b(self, call) {
        if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$b(self);
    }
    function _assertThisInitialized$b(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$b() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$b(o) {
        _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$b(o);
    }
    function _defineProperty$b(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var DayPeriodParser = /*#__PURE__*/function (_Parser) {
        _inherits$b(DayPeriodParser, _Parser);
        var _super = _createSuper$b(DayPeriodParser);
        function DayPeriodParser() {
            var _this;
            _classCallCheck$b(this, DayPeriodParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$b(_assertThisInitialized$b(_this), "priority", 80);
            _defineProperty$b(_assertThisInitialized$b(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
            return _this;
        }
        _createClass$b(DayPeriodParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'B':
                    case 'BB':
                    case 'BBB':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBBB':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBB':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
        return DayPeriodParser;
    }(Parser);

    function _typeof$b(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$b = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$b = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$b(obj);
    }
    function _classCallCheck$a(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$a(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$a(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$a(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$a(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$a(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$a(subClass, superClass);
    }
    function _setPrototypeOf$a(o, p) {
        _setPrototypeOf$a = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$a(o, p);
    }
    function _createSuper$a(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$a(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$a(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$a(this, result);
        };
    }
    function _possibleConstructorReturn$a(self, call) {
        if (call && (_typeof$b(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$a(self);
    }
    function _assertThisInitialized$a(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$a() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$a(o) {
        _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$a(o);
    }
    function _defineProperty$a(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
        _inherits$a(Hour1to12Parser, _Parser);
        var _super = _createSuper$a(Hour1to12Parser);
        function Hour1to12Parser() {
            var _this;
            _classCallCheck$a(this, Hour1to12Parser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$a(_assertThisInitialized$a(_this), "priority", 70);
            _defineProperty$a(_assertThisInitialized$a(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
            return _this;
        }
        _createClass$a(Hour1to12Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'h':
                        return parseNumericPattern(numericPatterns.hour12h, dateString);
                    case 'ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 12;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                } else if (!isPM && value === 12) {
                    date.setUTCHours(0, 0, 0, 0);
                } else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
        return Hour1to12Parser;
    }(Parser);

    function _typeof$a(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$a = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$a = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$a(obj);
    }
    function _classCallCheck$9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$9(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$9(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$9(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$9(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$9(subClass, superClass);
    }
    function _setPrototypeOf$9(o, p) {
        _setPrototypeOf$9 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$9(o, p);
    }
    function _createSuper$9(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$9(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$9(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$9(this, result);
        };
    }
    function _possibleConstructorReturn$9(self, call) {
        if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$9(self);
    }
    function _assertThisInitialized$9(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$9() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$9(o) {
        _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$9(o);
    }
    function _defineProperty$9(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
        _inherits$9(Hour0to23Parser, _Parser);
        var _super = _createSuper$9(Hour0to23Parser);
        function Hour0to23Parser() {
            var _this;
            _classCallCheck$9(this, Hour0to23Parser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$9(_assertThisInitialized$9(_this), "priority", 70);
            _defineProperty$9(_assertThisInitialized$9(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
            return _this;
        }
        _createClass$9(Hour0to23Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'H':
                        return parseNumericPattern(numericPatterns.hour23h, dateString);
                    case 'Ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 23;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(value, 0, 0, 0);
                return date;
            }
        }]);
        return Hour0to23Parser;
    }(Parser);

    function _typeof$9(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$9 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$9 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$9(obj);
    }
    function _classCallCheck$8(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$8(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$8(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$8(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$8(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$8(subClass, superClass);
    }
    function _setPrototypeOf$8(o, p) {
        _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$8(o, p);
    }
    function _createSuper$8(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$8(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$8(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$8(this, result);
        };
    }
    function _possibleConstructorReturn$8(self, call) {
        if (call && (_typeof$9(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$8(self);
    }
    function _assertThisInitialized$8(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$8() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$8(o) {
        _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$8(o);
    }
    function _defineProperty$8(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
        _inherits$8(Hour0To11Parser, _Parser);
        var _super = _createSuper$8(Hour0To11Parser);
        function Hour0To11Parser() {
            var _this;
            _classCallCheck$8(this, Hour0To11Parser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$8(_assertThisInitialized$8(_this), "priority", 70);
            _defineProperty$8(_assertThisInitialized$8(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
            return _this;
        }
        _createClass$8(Hour0To11Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'K':
                        return parseNumericPattern(numericPatterns.hour11h, dateString);
                    case 'Ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                } else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
        return Hour0To11Parser;
    }(Parser);

    function _typeof$8(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$8 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$8 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$8(obj);
    }
    function _classCallCheck$7(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$7(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$7(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$7(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$7(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$7(subClass, superClass);
    }
    function _setPrototypeOf$7(o, p) {
        _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$7(o, p);
    }
    function _createSuper$7(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$7(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$7(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$7(this, result);
        };
    }
    function _possibleConstructorReturn$7(self, call) {
        if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$7(self);
    }
    function _assertThisInitialized$7(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$7() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$7(o) {
        _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$7(o);
    }
    function _defineProperty$7(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
        _inherits$7(Hour1To24Parser, _Parser);
        var _super = _createSuper$7(Hour1To24Parser);
        function Hour1To24Parser() {
            var _this;
            _classCallCheck$7(this, Hour1To24Parser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$7(_assertThisInitialized$7(_this), "priority", 70);
            _defineProperty$7(_assertThisInitialized$7(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
            return _this;
        }
        _createClass$7(Hour1To24Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'k':
                        return parseNumericPattern(numericPatterns.hour24h, dateString);
                    case 'ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 24;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var hours = value <= 24 ? value % 24 : value;
                date.setUTCHours(hours, 0, 0, 0);
                return date;
            }
        }]);
        return Hour1To24Parser;
    }(Parser);

    function _typeof$7(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$7 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$7 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$7(obj);
    }
    function _classCallCheck$6(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$6(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$6(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$6(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$6(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$6(subClass, superClass);
    }
    function _setPrototypeOf$6(o, p) {
        _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$6(o, p);
    }
    function _createSuper$6(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$6(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$6(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$6(this, result);
        };
    }
    function _possibleConstructorReturn$6(self, call) {
        if (call && (_typeof$7(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$6(self);
    }
    function _assertThisInitialized$6(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$6() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$6(o) {
        _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$6(o);
    }
    function _defineProperty$6(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var MinuteParser = /*#__PURE__*/function (_Parser) {
        _inherits$6(MinuteParser, _Parser);
        var _super = _createSuper$6(MinuteParser);
        function MinuteParser() {
            var _this;
            _classCallCheck$6(this, MinuteParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$6(_assertThisInitialized$6(_this), "priority", 60);
            _defineProperty$6(_assertThisInitialized$6(_this), "incompatibleTokens", ['t', 'T']);
            return _this;
        }
        _createClass$6(MinuteParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'm':
                        return parseNumericPattern(numericPatterns.minute, dateString);
                    case 'mo':
                        return match.ordinalNumber(dateString, {
                            unit: 'minute'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMinutes(value, 0, 0);
                return date;
            }
        }]);
        return MinuteParser;
    }(Parser);

    function _typeof$6(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$6 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$6 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$6(obj);
    }
    function _classCallCheck$5(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$5(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$5(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$5(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$5(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$5(subClass, superClass);
    }
    function _setPrototypeOf$5(o, p) {
        _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$5(o, p);
    }
    function _createSuper$5(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$5(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$5(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$5(this, result);
        };
    }
    function _possibleConstructorReturn$5(self, call) {
        if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$5(self);
    }
    function _assertThisInitialized$5(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$5() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$5(o) {
        _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$5(o);
    }
    function _defineProperty$5(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var SecondParser = /*#__PURE__*/function (_Parser) {
        _inherits$5(SecondParser, _Parser);
        var _super = _createSuper$5(SecondParser);
        function SecondParser() {
            var _this;
            _classCallCheck$5(this, SecondParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$5(_assertThisInitialized$5(_this), "priority", 50);
            _defineProperty$5(_assertThisInitialized$5(_this), "incompatibleTokens", ['t', 'T']);
            return _this;
        }
        _createClass$5(SecondParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 's':
                        return parseNumericPattern(numericPatterns.second, dateString);
                    case 'so':
                        return match.ordinalNumber(dateString, {
                            unit: 'second'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCSeconds(value, 0);
                return date;
            }
        }]);
        return SecondParser;
    }(Parser);

    function _typeof$5(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$5 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$5 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$5(obj);
    }
    function _classCallCheck$4(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$4(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$4(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$4(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$4(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$4(subClass, superClass);
    }
    function _setPrototypeOf$4(o, p) {
        _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$4(o, p);
    }
    function _createSuper$4(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$4(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$4(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$4(this, result);
        };
    }
    function _possibleConstructorReturn$4(self, call) {
        if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$4(self);
    }
    function _assertThisInitialized$4(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$4() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$4(o) {
        _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$4(o);
    }
    function _defineProperty$4(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
        _inherits$4(FractionOfSecondParser, _Parser);
        var _super = _createSuper$4(FractionOfSecondParser);
        function FractionOfSecondParser() {
            var _this;
            _classCallCheck$4(this, FractionOfSecondParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$4(_assertThisInitialized$4(_this), "priority", 30);
            _defineProperty$4(_assertThisInitialized$4(_this), "incompatibleTokens", ['t', 'T']);
            return _this;
        }
        _createClass$4(FractionOfSecondParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                var valueCallback = function valueCallback(value) {
                    return Math.floor(value * Math.pow(10, -token.length + 3));
                };
                return mapValue(parseNDigits(token.length, dateString), valueCallback);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMilliseconds(value);
                return date;
            }
        }]);
        return FractionOfSecondParser;
    }(Parser);

    function _typeof$4(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$4 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$4 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$4(obj);
    }
    function _classCallCheck$3(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$3(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$3(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$3(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$3(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$3(subClass, superClass);
    }
    function _setPrototypeOf$3(o, p) {
        _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$3(o, p);
    }
    function _createSuper$3(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$3(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$3(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$3(this, result);
        };
    }
    function _possibleConstructorReturn$3(self, call) {
        if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$3(self);
    }
    function _assertThisInitialized$3(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$3() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$3(o) {
        _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$3(o);
    }
    function _defineProperty$3(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
        _inherits$3(ISOTimezoneWithZParser, _Parser);
        var _super = _createSuper$3(ISOTimezoneWithZParser);
        function ISOTimezoneWithZParser() {
            var _this;
            _classCallCheck$3(this, ISOTimezoneWithZParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$3(_assertThisInitialized$3(_this), "priority", 10);
            _defineProperty$3(_assertThisInitialized$3(_this), "incompatibleTokens", ['t', 'T', 'x']);
            return _this;
        }
        _createClass$3(ISOTimezoneWithZParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'X':
                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
                    case 'XX':
                        return parseTimezonePattern(timezonePatterns.basic, dateString);
                    case 'XXXX':
                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
                    case 'XXXXX':
                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'XXX':
                    default:
                        return parseTimezonePattern(timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
        return ISOTimezoneWithZParser;
    }(Parser);

    function _typeof$3(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$3 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$3 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$3(obj);
    }
    function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$2(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$2(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$2(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$2(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$2(subClass, superClass);
    }
    function _setPrototypeOf$2(o, p) {
        _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$2(o, p);
    }
    function _createSuper$2(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$2(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$2(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$2(this, result);
        };
    }
    function _possibleConstructorReturn$2(self, call) {
        if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$2(self);
    }
    function _assertThisInitialized$2(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$2() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$2(o) {
        _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$2(o);
    }
    function _defineProperty$2(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }

    var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
        _inherits$2(ISOTimezoneParser, _Parser);
        var _super = _createSuper$2(ISOTimezoneParser);
        function ISOTimezoneParser() {
            var _this;
            _classCallCheck$2(this, ISOTimezoneParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$2(_assertThisInitialized$2(_this), "priority", 10);
            _defineProperty$2(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T', 'X']);
            return _this;
        }
        _createClass$2(ISOTimezoneParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'x':
                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
                    case 'xx':
                        return parseTimezonePattern(timezonePatterns.basic, dateString);
                    case 'xxxx':
                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
                    case 'xxxxx':
                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'xxx':
                    default:
                        return parseTimezonePattern(timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
        return ISOTimezoneParser;
    }(Parser);

    function _typeof$2(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$2 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$2 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$2(obj);
    }
    function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties$1(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass$1(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$1(Constructor, staticProps);
        return Constructor;
    }
    function _inherits$1(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf$1(subClass, superClass);
    }
    function _setPrototypeOf$1(o, p) {
        _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf$1(o, p);
    }
    function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf$1(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf$1(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn$1(this, result);
        };
    }
    function _possibleConstructorReturn$1(self, call) {
        if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized$1(self);
    }
    function _assertThisInitialized$1(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf$1(o) {
        _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf$1(o);
    }
    function _defineProperty$1(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
        _inherits$1(TimestampSecondsParser, _Parser);
        var _super = _createSuper$1(TimestampSecondsParser);
        function TimestampSecondsParser() {
            var _this;
            _classCallCheck$1(this, TimestampSecondsParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty$1(_assertThisInitialized$1(_this), "priority", 40);
            _defineProperty$1(_assertThisInitialized$1(_this), "incompatibleTokens", '*');
            return _this;
        }
        _createClass$1(TimestampSecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return parseAnyDigitsSigned(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value * 1000), {
                    timestampIsSet: true
                }];
            }
        }]);
        return TimestampSecondsParser;
    }(Parser);

    function _typeof$1(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$1 = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof$1 = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$1(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
                result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
        };
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
        _inherits(TimestampMillisecondsParser, _Parser);
        var _super = _createSuper(TimestampMillisecondsParser);
        function TimestampMillisecondsParser() {
            var _this;
            _classCallCheck(this, TimestampMillisecondsParser);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty(_assertThisInitialized(_this), "priority", 20);
            _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
            return _this;
        }
        _createClass(TimestampMillisecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return parseAnyDigitsSigned(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value), {
                    timestampIsSet: true
                }];
            }
        }]);
        return TimestampMillisecondsParser;
    }(Parser);

    /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
   * |  p  |                                |  P  |                                |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   */

    var parsers = {
        G: new EraParser(),
        y: new YearParser(),
        Y: new LocalWeekYearParser(),
        R: new ISOWeekYearParser(),
        u: new ExtendedYearParser(),
        Q: new QuarterParser(),
        q: new StandAloneQuarterParser(),
        M: new MonthParser(),
        L: new StandAloneMonthParser(),
        w: new LocalWeekParser(),
        I: new ISOWeekParser(),
        d: new DateParser(),
        D: new DayOfYearParser(),
        E: new DayParser(),
        e: new LocalDayParser(),
        c: new StandAloneLocalDayParser(),
        i: new ISODayParser(),
        a: new AMPMParser(),
        b: new AMPMMidnightParser(),
        B: new DayPeriodParser(),
        h: new Hour1to12Parser(),
        H: new Hour0to23Parser(),
        K: new Hour0To11Parser(),
        k: new Hour1To24Parser(),
        m: new MinuteParser(),
        s: new SecondParser(),
        S: new FractionOfSecondParser(),
        X: new ISOTimezoneWithZParser(),
        x: new ISOTimezoneParser(),
        t: new TimestampSecondsParser(),
        T: new TimestampMillisecondsParser()
    };

    function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true,
            didErr = false,
            err;
        return {
            s: function s() {
                it = o[Symbol.iterator]();
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it["return"] != null) it["return"]();
                } finally {
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    }
    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name parse
     * @category Common Helpers
     * @summary Parse the date.
     *
     * @description
     * Return the date parsed from string using the given format string.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters in the format string wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     *
     * Format of the format string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 5 below the table).
     *
     * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
     * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
     *
     * ```javascript
     * parse('23 AM', 'HH a', new Date())
     * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
     * ```
     *
     * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
     *
     * Accepted format string patterns:
     * | Unit                            |Prior| Pattern | Result examples                   | Notes |
     * |---------------------------------|-----|---------|-----------------------------------|-------|
     * | Era                             | 140 | G..GGG  | AD, BC                            |       |
     * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 |     | GGGGG   | A, B                              |       |
     * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
     * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
     * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
     * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
     * |                                 |     | yyyyy   | ...                               | 2,4   |
     * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
     * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
     * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
     * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
     * |                                 |     | YYYYY   | ...                               | 2,4   |
     * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
     * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
     * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
     * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
     * |                                 |     | RRRRR   | ...                               | 2,4,5 |
     * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
     * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
     * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
     * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
     * |                                 |     | uuuuu   | ...                               | 2,4   |
     * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
     * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
     * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
     * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | qq      | 01, 02, 03, 04                    |       |
     * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
     * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
     * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | MM      | 01, 02, ..., 12                   |       |
     * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | MMMM    | January, February, ..., December  | 2     |
     * |                                 |     | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
     * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | LL      | 01, 02, ..., 12                   |       |
     * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | LLLL    | January, February, ..., December  | 2     |
     * |                                 |     | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
     * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
     * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
     * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
     * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
     * |                                 |     | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
     * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
     * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
     * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 |     | DDDD    | ...                               | 2     |
     * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
     * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
     * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
     * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
     * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
     * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
     * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
     * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | ee      | 02, 03, ..., 01                   |       |
     * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | cc      | 02, 03, ..., 01                   |       |
     * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
     * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
     * |                                 |     | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
     * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 |     | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
     * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
     * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
     * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
     * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
     * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
     * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | mm      | 00, 01, ..., 59                   |       |
     * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
     * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | ss      | 00, 01, ..., 59                   |       |
     * | Seconds timestamp               |  40 | t       | 512969520                         |       |
     * |                                 |     | tt      | ...                               | 2     |
     * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
     * |                                 |     | SS      | 00, 01, ..., 99                   |       |
     * |                                 |     | SSS     | 000, 001, ..., 999                |       |
     * |                                 |     | SSSS    | ...                               | 2     |
     * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
     * |                                 |     | TT      | ...                               | 2     |
     * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
     * |                                 |     | XX      | -0800, +0530, Z                   |       |
     * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
     * |                                 |     | xx      | -0800, +0530, +0000               |       |
     * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
     * |                                 |     | PP      | May 29, 1453                      |       |
     * |                                 |     | PPP     | May 29th, 1453                    |       |
     * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
     * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
     * |                                 |     | pp      | 12:00:00 AM                       |       |
     * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
     * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
     * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
     * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular.
     *    In `format` function, they will produce different result:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     *    `parse` will try to match both formatting and stand-alone units interchangably.
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table:
     *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
     *      as wide as the sequence
     *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
     *      These variations are marked with "2" in the last column of the table.
     *
     * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 4. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
     *
     *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
     *
     *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
     *
     *    while `uu` will just assign the year as is:
     *
     *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
     *
     *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
     *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
     *
     * 5. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
     *    on the given locale.
     *
     *    using `en-US` locale: `P` => `MM/dd/yyyy`
     *    using `en-US` locale: `p` => `hh:mm a`
     *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
     *    using `pt-BR` locale: `p` => `HH:mm`
     *
     * Values will be assigned to the date in the descending order of its unit's priority.
     * Units of an equal priority overwrite each other in the order of appearance.
     *
     * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
     * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
     *
     * `referenceDate` must be passed for correct work of the function.
     * If you're not sure which `referenceDate` to supply, create a new instance of Date:
     * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
     * In this case parsing will be done in the context of the current date.
     * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
     * then `Invalid Date` will be returned.
     *
     * The result may vary by locale.
     *
     * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
     *
     * If parsing failed, `Invalid Date` will be returned.
     * Invalid Date is a Date, whose time value is NaN.
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {String} dateString - the string to parse
     * @param {String} formatString - the string of tokens
     * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {Date} the parsed date
     * @throws {TypeError} 3 arguments required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} `options.locale` must contain `match` property
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Parse 11 February 2014 from middle-endian format:
     * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
     * //=> Tue Feb 11 2014 00:00:00
     *
     * @example
     * // Parse 28th of February in Esperanto locale in the context of 2010 year:
     * import eo from 'date-fns/locale/eo'
     * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
     *   locale: eo
     * })
     * //=> Sun Feb 28 2010 00:00:00
     */

    function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
        var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
        requiredArgs(3, arguments);
        var dateString = String(dirtyDateString);
        var formatString = String(dirtyFormatString);
        var defaultOptions = getDefaultOptions();
        var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
        if (!locale.match) {
            throw new RangeError('locale must contain match property');
        }
        var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
        }
        var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
        }
        if (formatString === '') {
            if (dateString === '') {
                return toDate(dirtyReferenceDate);
            } else {
                return new Date(NaN);
            }
        }
        var subFnOptions = {
            firstWeekContainsDate: firstWeekContainsDate,
            weekStartsOn: weekStartsOn,
            locale: locale
        }; // If timezone isn't specified, it will be set to the system timezone

        var setters = [new DateToSystemTimezoneSetter()];
        var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
            var firstCharacter = substring[0];
            if (firstCharacter in longFormatters$1) {
                var longFormatter = longFormatters$1[firstCharacter];
                return longFormatter(substring, locale.formatLong);
            }
            return substring;
        }).join('').match(formattingTokensRegExp);
        var usedTokens = [];
        var _iterator = _createForOfIteratorHelper(tokens),
            _step;
        try {
            var _loop = function _loop() {
                var token = _step.value;
                if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
                    throwProtectedError(token, formatString, dirtyDateString);
                }
                if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
                    throwProtectedError(token, formatString, dirtyDateString);
                }
                var firstCharacter = token[0];
                var parser = parsers[firstCharacter];
                if (parser) {
                    var incompatibleTokens = parser.incompatibleTokens;
                    if (Array.isArray(incompatibleTokens)) {
                        var incompatibleToken = usedTokens.find(function (usedToken) {
                            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
                        });
                        if (incompatibleToken) {
                            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
                        }
                    } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
                        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
                    }
                    usedTokens.push({
                        token: firstCharacter,
                        fullToken: token
                    });
                    var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
                    if (!parseResult) {
                        return {
                            v: new Date(NaN)
                        };
                    }
                    setters.push(parseResult.setter);
                    dateString = parseResult.rest;
                } else {
                    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
                        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
                    } // Replace two single quote characters with one single quote character

                    if (token === "''") {
                        token = "'";
                    } else if (firstCharacter === "'") {
                        token = cleanEscapedString(token);
                    } // Cut token from string, or, if string doesn't match the token, return Invalid Date

                    if (dateString.indexOf(token) === 0) {
                        dateString = dateString.slice(token.length);
                    } else {
                        return {
                            v: new Date(NaN)
                        };
                    }
                }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _ret = _loop();
                if (_typeof(_ret) === "object") return _ret.v;
            } // Check if the remaining input contains something other than whitespace
        } catch (err) {
            _iterator.e(err);
        } finally {
            _iterator.f();
        }
        if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
            return new Date(NaN);
        }
        var uniquePrioritySetters = setters.map(function (setter) {
            return setter.priority;
        }).sort(function (a, b) {
            return b - a;
        }).filter(function (priority, index, array) {
            return array.indexOf(priority) === index;
        }).map(function (priority) {
            return setters.filter(function (setter) {
                return setter.priority === priority;
            }).sort(function (a, b) {
                return b.subPriority - a.subPriority;
            });
        }).map(function (setterArray) {
            return setterArray[0];
        });
        var date = toDate(dirtyReferenceDate);
        if (isNaN(date.getTime())) {
            return new Date(NaN);
        } // Convert the date in system timezone to the same date in UTC+00:00 timezone.

        var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
        var flags = {};
        var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
            _step2;
        try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var setter = _step2.value;
                if (!setter.validate(utcDate, subFnOptions)) {
                    return new Date(NaN);
                }
                var result = setter.set(utcDate, flags, subFnOptions); // Result is tuple (date, flags)

                if (Array.isArray(result)) {
                    utcDate = result[0];
                    assign(flags, result[1]); // Result is date
                } else {
                    utcDate = result;
                }
            }
        } catch (err) {
            _iterator2.e(err);
        } finally {
            _iterator2.f();
        }
        return utcDate;
    }
    function cleanEscapedString(input) {
        return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    /**
     * @name startOfHour
     * @category Hour Helpers
     * @summary Return the start of an hour for the given date.
     *
     * @description
     * Return the start of an hour for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of an hour
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of an hour for 2 September 2014 11:55:00:
     * const result = startOfHour(new Date(2014, 8, 2, 11, 55))
     * //=> Tue Sep 02 2014 11:00:00
     */

    function startOfHour(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setMinutes(0, 0, 0);
        return date;
    }

    /**
     * @name startOfSecond
     * @category Second Helpers
     * @summary Return the start of a second for the given date.
     *
     * @description
     * Return the start of a second for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a second
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a second for 1 December 2014 22:15:45.400:
     * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
     * //=> Mon Dec 01 2014 22:15:45.000
     */

    function startOfSecond(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setMilliseconds(0);
        return date;
    }

    /**
     * @name parseISO
     * @category Common Helpers
     * @summary Parse ISO string
     *
     * @description
     * Parse the given string in ISO 8601 format and return an instance of Date.
     *
     * Function accepts complete ISO 8601 formats as well as partial implementations.
     * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
     *
     * If the argument isn't a string, the function cannot parse the string or
     * the values are invalid, it returns Invalid Date.
     *
     * @param {String} argument - the value to convert
     * @param {Object} [options] - an object with options.
     * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
     *
     * @example
     * // Convert string '2014-02-11T11:30:30' to date:
     * const result = parseISO('2014-02-11T11:30:30')
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert string '+02014101' to date,
     * // if the additional number of digits in the extended year format is 1:
     * const result = parseISO('+02014101', { additionalDigits: 1 })
     * //=> Fri Apr 11 2014 00:00:00
     */

    function parseISO(argument, options) {
        var _options$additionalDi;
        requiredArgs(1, arguments);
        var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
        if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
            throw new RangeError('additionalDigits must be 0, 1 or 2');
        }
        if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
            return new Date(NaN);
        }
        var dateStrings = splitDateString(argument);
        var date;
        if (dateStrings.date) {
            var parseYearResult = parseYear(dateStrings.date, additionalDigits);
            date = parseDate(parseYearResult.restDateString, parseYearResult.year);
        }
        if (!date || isNaN(date.getTime())) {
            return new Date(NaN);
        }
        var timestamp = date.getTime();
        var time = 0;
        var offset;
        if (dateStrings.time) {
            time = parseTime(dateStrings.time);
            if (isNaN(time)) {
                return new Date(NaN);
            }
        }
        if (dateStrings.timezone) {
            offset = parseTimezone(dateStrings.timezone);
            if (isNaN(offset)) {
                return new Date(NaN);
            }
        } else {
            var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone
            // but we need it to be parsed in our timezone
            // so we use utc values to build date in our timezone.
            // Year values from 0 to 99 map to the years 1900 to 1999
            // so set year explicitly with setFullYear.

            var result = new Date(0);
            result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
            result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
            return result;
        }
        return new Date(timestamp + time + offset);
    }
    var patterns = {
        dateTimeDelimiter: /[T ]/,
        timeZoneDelimiter: /[Z ]/i,
        timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function splitDateString(dateString) {
        var dateStrings = {};
        var array = dateString.split(patterns.dateTimeDelimiter);
        var timeString; // The regex match should only return at maximum two array elements.
        // [date], [time], or [date, time].

        if (array.length > 2) {
            return dateStrings;
        }
        if (/:/.test(array[0])) {
            timeString = array[0];
        } else {
            dateStrings.date = array[0];
            timeString = array[1];
            if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
                dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
                timeString = dateString.substr(dateStrings.date.length, dateString.length);
            }
        }
        if (timeString) {
            var token = patterns.timezone.exec(timeString);
            if (token) {
                dateStrings.time = timeString.replace(token[1], '');
                dateStrings.timezone = token[1];
            } else {
                dateStrings.time = timeString;
            }
        }
        return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
        var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
        var captures = dateString.match(regex); // Invalid ISO-formatted year

        if (!captures) return {
            year: NaN,
            restDateString: ''
        };
        var year = captures[1] ? parseInt(captures[1]) : null;
        var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both

        return {
            year: century === null ? year : century * 100,
            restDateString: dateString.slice((captures[1] || captures[2]).length)
        };
    }
    function parseDate(dateString, year) {
        // Invalid ISO-formatted year
        if (year === null) return new Date(NaN);
        var captures = dateString.match(dateRegex); // Invalid ISO-formatted string

        if (!captures) return new Date(NaN);
        var isWeekDate = !!captures[4];
        var dayOfYear = parseDateUnit(captures[1]);
        var month = parseDateUnit(captures[2]) - 1;
        var day = parseDateUnit(captures[3]);
        var week = parseDateUnit(captures[4]);
        var dayOfWeek = parseDateUnit(captures[5]) - 1;
        if (isWeekDate) {
            if (!validateWeekDate(year, week, dayOfWeek)) {
                return new Date(NaN);
            }
            return dayOfISOWeekYear(year, week, dayOfWeek);
        } else {
            var date = new Date(0);
            if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
                return new Date(NaN);
            }
            date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
            return date;
        }
    }
    function parseDateUnit(value) {
        return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
        var captures = timeString.match(timeRegex);
        if (!captures) return NaN; // Invalid ISO-formatted time

        var hours = parseTimeUnit(captures[1]);
        var minutes = parseTimeUnit(captures[2]);
        var seconds = parseTimeUnit(captures[3]);
        if (!validateTime(hours, minutes, seconds)) {
            return NaN;
        }
        return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;
    }
    function parseTimeUnit(value) {
        return value && parseFloat(value.replace(',', '.')) || 0;
    }
    function parseTimezone(timezoneString) {
        if (timezoneString === 'Z') return 0;
        var captures = timezoneString.match(timezoneRegex);
        if (!captures) return 0;
        var sign = captures[1] === '+' ? -1 : 1;
        var hours = parseInt(captures[2]);
        var minutes = captures[3] && parseInt(captures[3]) || 0;
        if (!validateTimezone(hours, minutes)) {
            return NaN;
        }
        return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
        var date = new Date(0);
        date.setUTCFullYear(isoWeekYear, 0, 4);
        var fourthOfJanuaryDay = date.getUTCDay() || 7;
        var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    } // Validation functions
    // February is null to handle the leap year (using ||)

    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    function validateDate(year, month, date) {
        return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
        return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
        return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
        if (hours === 24) {
            return minutes === 0 && seconds === 0;
        }
        return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
        return minutes >= 0 && minutes <= 59;
    }

    var FORMATS = {
        datetime: 'MMM d, yyyy, h:mm:ss aaaa',
        millisecond: 'h:mm:ss.SSS aaaa',
        second: 'h:mm:ss aaaa',
        minute: 'h:mm aaaa',
        hour: 'ha',
        day: 'MMM d',
        week: 'PP',
        month: 'MMM yyyy',
        quarter: 'qqq - yyyy',
        year: 'yyyy'
    };
    adapters._date.override({
        _id: 'date-fns',
        // DEBUG

        formats: function formats() {
            return FORMATS;
        },
        parse: function parse$1(value, fmt) {
            if (value === null || typeof value === 'undefined') {
                return null;
            }
            var type = _typeof$z(value);
            if (type === 'number' || value instanceof Date) {
                value = toDate(value);
            } else if (type === 'string') {
                if (typeof fmt === 'string') {
                    value = parse(value, fmt, new Date(), this.options);
                } else {
                    value = parseISO(value, this.options);
                }
            }
            return isValid(value) ? value.getTime() : null;
        },
        format: function format$1(time, fmt) {
            return format(time, fmt, this.options);
        },
        add: function add(time, amount, unit) {
            switch (unit) {
                case 'millisecond':
                    return addMilliseconds(time, amount);
                case 'second':
                    return addSeconds(time, amount);
                case 'minute':
                    return addMinutes(time, amount);
                case 'hour':
                    return addHours(time, amount);
                case 'day':
                    return addDays(time, amount);
                case 'week':
                    return addWeeks(time, amount);
                case 'month':
                    return addMonths(time, amount);
                case 'quarter':
                    return addQuarters(time, amount);
                case 'year':
                    return addYears(time, amount);
                default:
                    return time;
            }
        },
        diff: function diff(max, min, unit) {
            switch (unit) {
                case 'millisecond':
                    return differenceInMilliseconds(max, min);
                case 'second':
                    return differenceInSeconds(max, min);
                case 'minute':
                    return differenceInMinutes(max, min);
                case 'hour':
                    return differenceInHours(max, min);
                case 'day':
                    return differenceInDays(max, min);
                case 'week':
                    return differenceInWeeks(max, min);
                case 'month':
                    return differenceInMonths(max, min);
                case 'quarter':
                    return differenceInQuarters(max, min);
                case 'year':
                    return differenceInYears(max, min);
                default:
                    return 0;
            }
        },
        startOf: function startOf(time, unit, weekday) {
            switch (unit) {
                case 'second':
                    return startOfSecond(time);
                case 'minute':
                    return startOfMinute(time);
                case 'hour':
                    return startOfHour(time);
                case 'day':
                    return startOfDay(time);
                case 'week':
                    return startOfWeek(time);
                case 'isoWeek':
                    return startOfWeek(time, {
                        weekStartsOn: +weekday
                    });
                case 'month':
                    return startOfMonth(time);
                case 'quarter':
                    return startOfQuarter(time);
                case 'year':
                    return startOfYear(time);
                default:
                    return time;
            }
        },
        endOf: function endOf(time, unit) {
            switch (unit) {
                case 'second':
                    return endOfSecond(time);
                case 'minute':
                    return endOfMinute(time);
                case 'hour':
                    return endOfHour(time);
                case 'day':
                    return endOfDay(time);
                case 'week':
                    return endOfWeek(time);
                case 'month':
                    return endOfMonth(time);
                case 'quarter':
                    return endOfQuarter(time);
                case 'year':
                    return endOfYear(time);
                default:
                    return time;
            }
        }
    });

    // for plugins
    // match src/index.umd.ts in Chart.js
    // except for platforms (not exported)
    Chart.helpers = _objectSpread2({}, helpers);
    Chart._adapters = adapters;
    Chart.Animation = Animation;
    Chart.Animations = Animations;
    Chart.animator = animator;
    Chart.controllers = registry.controllers.items;
    Chart.DatasetController = DatasetController;
    Chart.Element = Element;
    Chart.elements = elements;
    Chart.Interaction = Interaction;
    Chart.layouts = layouts;
    Chart.Scale = Scale;
    Chart.Ticks = Ticks;
    Object.assign(Chart, controllers, scales, elements, plugins);
    Chart.Chart = Chart;

    return Chart;

}));

/*!
 * Chartkick.js v5.0.1
 * Create beautiful charts with one line of JavaScript
 * https://github.com/ankane/chartkick.js
 * MIT License
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Chartkick = factory());
})(this, (function () { 'use strict';

    function isArray(variable) {
        return Object.prototype.toString.call(variable) === "[object Array]";
    }

    function isFunction(variable) {
        return variable instanceof Function;
    }

    function isPlainObject(variable) {
        // protect against prototype pollution, defense 2
        return Object.prototype.toString.call(variable) === "[object Object]" && !isFunction(variable) && variable instanceof Object;
    }

    // https://github.com/madrobby/zepto/blob/master/src/zepto.js
    function extend(target, source) {
        for (var key in source) {
            // protect against prototype pollution, defense 1
            if (key === "__proto__") { continue; }

            if (isPlainObject(source[key]) || isArray(source[key])) {
                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
                    target[key] = {};
                }
                if (isArray(source[key]) && !isArray(target[key])) {
                    target[key] = [];
                }
                extend(target[key], source[key]);
            } else if (source[key] !== undefined) {
                target[key] = source[key];
            }
        }
    }

    function merge(obj1, obj2) {
        var target = {};
        extend(target, obj1);
        extend(target, obj2);
        return target;
    }

    var DATE_PATTERN = /^(\d\d\d\d)(?:-)?(\d\d)(?:-)?(\d\d)$/i;

    function negativeValues(series) {
        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;
            for (var j = 0; j < data.length; j++) {
                if (data[j][1] < 0) {
                    return true;
                }
            }
        }
        return false;
    }

    function toStr(obj) {
        return "" + obj;
    }

    function toFloat(obj) {
        return parseFloat(obj);
    }

    function toDate(obj) {
        if (obj instanceof Date) {
            return obj;
        } else if (typeof obj === "number") {
            return new Date(obj * 1000); // ms
        } else {
            var s = toStr(obj);
            var matches = s.match(DATE_PATTERN);
            if (matches) {
                var year = parseInt(matches[1], 10);
                var month = parseInt(matches[2], 10) - 1;
                var day = parseInt(matches[3], 10);
                return new Date(year, month, day);
            } else {
                // try our best to get the str into iso8601
                // TODO be smarter about this
                var str = s.replace(/ /, "T").replace(" ", "").replace("UTC", "Z");
                // Date.parse returns milliseconds if valid and NaN if invalid
                return new Date(Date.parse(str) || s);
            }
        }
    }

    function toArr(obj) {
        if (isArray(obj)) {
            return obj;
        } else {
            var arr = [];
            for (var i in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, i)) {
                    arr.push([i, obj[i]]);
                }
            }
            return arr;
        }
    }

    function jsOptionsFunc(defaultOptions, hideLegend, setTitle, setMin, setMax, setStacked, setXtitle, setYtitle) {
        return function (chart, opts, chartOptions) {
            var series = chart.data;
            var options = merge({}, defaultOptions);
            options = merge(options, chartOptions || {});

            if (chart.singleSeriesFormat || "legend" in opts) {
                hideLegend(options, opts.legend, chart.singleSeriesFormat);
            }

            if (opts.title) {
                setTitle(options, opts.title);
            }

            // min
            if ("min" in opts) {
                setMin(options, opts.min);
            } else if (!negativeValues(series)) {
                setMin(options, 0);
            }

            // max
            if (opts.max) {
                setMax(options, opts.max);
            }

            if ("stacked" in opts) {
                setStacked(options, opts.stacked);
            }

            if (opts.colors) {
                options.colors = opts.colors;
            }

            if (opts.xtitle) {
                setXtitle(options, opts.xtitle);
            }

            if (opts.ytitle) {
                setYtitle(options, opts.ytitle);
            }

            // merge library last
            options = merge(options, opts.library || {});

            return options;
        };
    }

    function sortByTime(a, b) {
        return a[0].getTime() - b[0].getTime();
    }

    function sortByNumberSeries(a, b) {
        return a[0] - b[0];
    }

    // needed since sort() without arguments does string comparison
    function sortByNumber(a, b) {
        return a - b;
    }

    function every(values, fn) {
        for (var i = 0; i < values.length; i++) {
            if (!fn(values[i])) {
                return false;
            }
        }
        return true;
    }

    function isDay(timeUnit) {
        return timeUnit === "day" || timeUnit === "week" || timeUnit === "month" || timeUnit === "year";
    }

    function calculateTimeUnit(values, maxDay) {
        if ( maxDay === void 0 ) maxDay = false;

        if (values.length === 0) {
            return null;
        }

        var minute = every(values, function (d) { return d.getMilliseconds() === 0 && d.getSeconds() === 0; });
        if (!minute) {
            return null;
        }

        var hour = every(values, function (d) { return d.getMinutes() === 0; });
        if (!hour) {
            return "minute";
        }

        var day = every(values, function (d) { return d.getHours() === 0; });
        if (!day) {
            return "hour";
        }

        if (maxDay) {
            return "day";
        }

        var month = every(values, function (d) { return d.getDate() === 1; });
        if (!month) {
            var dayOfWeek = values[0].getDay();
            var week = every(values, function (d) { return d.getDay() === dayOfWeek; });
            return (week ? "week" : "day");
        }

        var year = every(values, function (d) { return d.getMonth() === 0; });
        if (!year) {
            return "month";
        }

        return "year";
    }

    function isDate(obj) {
        return !isNaN(toDate(obj)) && toStr(obj).length >= 6;
    }

    function isNumber(obj) {
        return typeof obj === "number";
    }

    var byteSuffixes = ["bytes", "KB", "MB", "GB", "TB", "PB", "EB"];

    function formatValue(pre, value, options, axis) {
        pre = pre || "";
        if (options.prefix) {
            if (value < 0) {
                value = value * -1;
                pre += "-";
            }
            pre += options.prefix;
        }

        var suffix = options.suffix || "";
        var precision = options.precision;
        var round = options.round;

        if (options.byteScale) {
            var positive = value >= 0;
            if (!positive) {
                value *= -1;
            }

            var baseValue = axis ? options.byteScale : value;

            var suffixIdx;
            if (baseValue >= 1152921504606846976) {
                value /= 1152921504606846976;
                suffixIdx = 6;
            } else if (baseValue >= 1125899906842624) {
                value /= 1125899906842624;
                suffixIdx = 5;
            } else if (baseValue >= 1099511627776) {
                value /= 1099511627776;
                suffixIdx = 4;
            } else if (baseValue >= 1073741824) {
                value /= 1073741824;
                suffixIdx = 3;
            } else if (baseValue >= 1048576) {
                value /= 1048576;
                suffixIdx = 2;
            } else if (baseValue >= 1024) {
                value /= 1024;
                suffixIdx = 1;
            } else {
                suffixIdx = 0;
            }

            // TODO handle manual precision case
            if (precision === undefined && round === undefined) {
                if (value >= 1023.5) {
                    if (suffixIdx < byteSuffixes.length - 1) {
                        value = 1.0;
                        suffixIdx += 1;
                    }
                }
                precision = value >= 1000 ? 4 : 3;
            }
            suffix = " " + byteSuffixes[suffixIdx];

            // flip value back
            if (!positive) {
                value *= -1;
            }
        }

        if (precision !== undefined && round !== undefined) {
            throw Error("Use either round or precision, not both");
        }

        if (!axis) {
            if (precision !== undefined) {
                value = value.toPrecision(precision);
                if (!options.zeros) {
                    value = parseFloat(value);
                }
            }

            if (round !== undefined) {
                if (round < 0) {
                    var num = Math.pow(10, -1 * round);
                    value = parseInt((1.0 * value / num).toFixed(0)) * num;
                } else {
                    value = value.toFixed(round);
                    if (!options.zeros) {
                        value = parseFloat(value);
                    }
                }
            }
        }

        if (options.thousands || options.decimal) {
            value = toStr(value);
            var parts = value.split(".");
            value = parts[0];
            if (options.thousands) {
                value = value.replace(/\B(?=(\d{3})+(?!\d))/g, options.thousands);
            }
            if (parts.length > 1) {
                value += (options.decimal || ".") + parts[1];
            }
        }

        return pre + value + suffix;
    }

    function seriesOption(chart, series, option) {
        if (option in series) {
            return series[option];
        } else if (option in chart.options) {
            return chart.options[option];
        }
        return null;
    }

    var baseOptions = {
        maintainAspectRatio: false,
        animation: false,
        plugins: {
            legend: {},
            tooltip: {
                displayColors: false,
                callbacks: {}
            },
            title: {
                font: {
                    size: 20
                },
                color: "#333"
            }
        },
        interaction: {}
    };

    var defaultOptions$2 = {
        scales: {
            y: {
                ticks: {
                    maxTicksLimit: 4
                },
                title: {
                    font: {
                        size: 16
                    },
                    color: "#333"
                },
                grid: {}
            },
            x: {
                grid: {
                    drawOnChartArea: false
                },
                title: {
                    font: {
                        size: 16
                    },
                    color: "#333"
                },
                time: {},
                ticks: {}
            }
        }
    };

    // http://there4.io/2012/05/02/google-chart-color-list/
    var defaultColors = [
        "#3366CC", "#DC3912", "#FF9900", "#109618", "#990099", "#3B3EAC", "#0099C6",
        "#DD4477", "#66AA00", "#B82E2E", "#316395", "#994499", "#22AA99", "#AAAA11",
        "#6633CC", "#E67300", "#8B0707", "#329262", "#5574A6", "#651067"
    ];

    function hideLegend$2(options, legend, hideLegend) {
        if (legend !== undefined) {
            options.plugins.legend.display = !!legend;
            if (legend && legend !== true) {
                options.plugins.legend.position = legend;
            }
        } else if (hideLegend) {
            options.plugins.legend.display = false;
        }
    }

    function setTitle$2(options, title) {
        options.plugins.title.display = true;
        options.plugins.title.text = title;
    }

    function setMin$2(options, min) {
        if (min !== null) {
            options.scales.y.min = toFloat(min);
        }
    }

    function setMax$2(options, max) {
        options.scales.y.max = toFloat(max);
    }

    function setBarMin$1(options, min) {
        if (min !== null) {
            options.scales.x.min = toFloat(min);
        }
    }

    function setBarMax$1(options, max) {
        options.scales.x.max = toFloat(max);
    }

    function setStacked$2(options, stacked) {
        options.scales.x.stacked = !!stacked;
        options.scales.y.stacked = !!stacked;
    }

    function setXtitle$2(options, title) {
        options.scales.x.title.display = true;
        options.scales.x.title.text = title;
    }

    function setYtitle$2(options, title) {
        options.scales.y.title.display = true;
        options.scales.y.title.text = title;
    }

    // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
    function addOpacity(hex, opacity) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? "rgba(" + parseInt(result[1], 16) + ", " + parseInt(result[2], 16) + ", " + parseInt(result[3], 16) + ", " + opacity + ")" : hex;
    }

    function notnull(x) {
        return x !== null && x !== undefined;
    }

    function setLabelSize(chart, data, options) {
        var maxLabelSize = Math.ceil(chart.element.offsetWidth / 4.0 / data.labels.length);
        if (maxLabelSize > 25) {
            maxLabelSize = 25;
        } else if (maxLabelSize < 10) {
            maxLabelSize = 10;
        }
        if (!options.scales.x.ticks.callback) {
            options.scales.x.ticks.callback = function (value) {
                value = toStr(this.getLabelForValue(value));
                if (value.length > maxLabelSize) {
                    return value.substring(0, maxLabelSize - 2) + "...";
                } else {
                    return value;
                }
            };
        }
    }

    function calculateScale(series) {
        var scale = 1;
        var max = maxAbsY(series);
        while (max >= 1024) {
            scale *= 1024;
            max /= 1024;
        }
        return scale;
    }

    function setFormatOptions$1(chart, options, chartType) {
        // options to apply to x and r values for scatter and bubble
        var numericOptions = {
            thousands: chart.options.thousands,
            decimal: chart.options.decimal
        };

        // options to apply to y value
        var formatOptions = merge({
            prefix: chart.options.prefix,
            suffix: chart.options.suffix,
            precision: chart.options.precision,
            round: chart.options.round,
            zeros: chart.options.zeros
        }, numericOptions);

        if (chart.options.bytes) {
            var series = chart.data;
            if (chartType === "pie") {
                series = [{data: series}];
            }

            // set step size
            formatOptions.byteScale = calculateScale(series);
        }

        if (chartType !== "pie") {
            var axis = options.scales.y;
            if (chartType === "bar") {
                axis = options.scales.x;
            }

            if (formatOptions.byteScale) {
                if (!axis.ticks.stepSize) {
                    axis.ticks.stepSize = formatOptions.byteScale / 2;
                }
                if (!axis.ticks.maxTicksLimit) {
                    axis.ticks.maxTicksLimit = 4;
                }
            }

            if (!axis.ticks.callback) {
                axis.ticks.callback = function (value) {
                    return formatValue("", value, formatOptions, true);
                };
            }

            if ((chartType === "scatter" || chartType === "bubble") && !options.scales.x.ticks.callback) {
                options.scales.x.ticks.callback = function (value) {
                    return formatValue("", value, numericOptions, true);
                };
            }
        }

        if (!options.plugins.tooltip.callbacks.label) {
            if (chartType === "scatter") {
                options.plugins.tooltip.callbacks.label = function (context) {
                    var label = context.dataset.label || '';
                    if (label) {
                        label += ': ';
                    }

                    var dataPoint = context.parsed;
                    return label + '(' + formatValue('', dataPoint.x, numericOptions) + ', ' + formatValue('', dataPoint.y, formatOptions) + ')';
                };
            } else if (chartType === "bubble") {
                options.plugins.tooltip.callbacks.label = function (context) {
                    var label = context.dataset.label || '';
                    if (label) {
                        label += ': ';
                    }
                    var dataPoint = context.raw;
                    return label + '(' + formatValue('', dataPoint.x, numericOptions) + ', ' + formatValue('', dataPoint.y, formatOptions) + ', ' + formatValue('', dataPoint.v, numericOptions) + ')';
                };
            } else if (chartType === "pie") {
                // need to use separate label for pie charts
                options.plugins.tooltip.callbacks.label = function (context) {
                    return formatValue('', context.parsed, formatOptions);
                };
            } else {
                var valueLabel = chartType === "bar" ? "x" : "y";
                options.plugins.tooltip.callbacks.label = function (context) {
                    // don't show null values for stacked charts
                    if (context.parsed[valueLabel] === null) {
                        return;
                    }

                    var label = context.dataset.label || '';
                    if (label) {
                        label += ': ';
                    }
                    return formatValue(label, context.parsed[valueLabel], formatOptions);
                };
            }
        }

        // avoid formatting x-axis labels
        // by default, Chart.js applies locale
        if ((chartType === "line" || chartType === "area") && chart.xtype === "number") {
            if (!options.scales.x.ticks.callback) {
                options.scales.x.ticks.callback = function (value) {
                    return toStr(value);
                };
            }

            if (!options.plugins.tooltip.callbacks.title) {
                options.plugins.tooltip.callbacks.title = function (context) {
                    return toStr(context[0].parsed.x);
                };
            }
        }
    }

    function maxAbsY(series) {
        var max = 0;
        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;
            for (var j = 0; j < data.length; j++) {
                var v = Math.abs(data[j][1]);
                if (v > max) {
                    max = v;
                }
            }
        }
        return max;
    }

    function maxR(series) {
        // start at zero since radius must be positive
        var max = 0;
        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;
            for (var j = 0; j < data.length; j++) {
                var v = data[j][2];
                if (v > max) {
                    max = v;
                }
            }
        }
        return max;
    }

    var jsOptions$2 = jsOptionsFunc(merge(baseOptions, defaultOptions$2), hideLegend$2, setTitle$2, setMin$2, setMax$2, setStacked$2, setXtitle$2, setYtitle$2);

    function prepareDefaultData(chart) {
        var series = chart.data;
        var rows = {};
        var keys = [];
        var labels = [];
        var values = [];

        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;

            for (var j = 0; j < data.length; j++) {
                var d = data[j];
                var key = chart.xtype === "datetime" ? d[0].getTime() : d[0];
                if (!rows[key]) {
                    rows[key] = new Array(series.length);
                    keys.push(key);
                }
                rows[key][i] = d[1];
            }
        }

        if (chart.xtype === "datetime" || chart.xtype === "number") {
            keys.sort(sortByNumber);
        }

        for (var i$1 = 0; i$1 < series.length; i$1++) {
            values.push([]);
        }

        for (var i$2 = 0; i$2 < keys.length; i$2++) {
            var key$1 = keys[i$2];

            var label = chart.xtype === "datetime" ? new Date(key$1) : key$1;
            labels.push(label);

            var row = rows[key$1];
            for (var j$1 = 0; j$1 < series.length; j$1++) {
                var v = row[j$1];
                // Chart.js doesn't like undefined
                values[j$1].push(v === undefined ? null : v);
            }
        }

        return {
            labels: labels,
            values: values
        };
    }

    function prepareBubbleData(chart) {
        var series = chart.data;
        var values = [];
        var max = maxR(series);

        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;
            var points = [];
            for (var j = 0; j < data.length; j++) {
                var v = data[j];
                points.push({
                    x: v[0],
                    y: v[1],
                    r: v[2] * 20 / max,
                    // custom attribute, for tooltip
                    v: v[2]
                });
            }
            values.push(points);
        }

        return {
            labels: [],
            values: values
        };
    }

    // scatter or numeric line/area
    function prepareNumberData(chart) {
        var series = chart.data;
        var values = [];

        for (var i = 0; i < series.length; i++) {
            var data = series[i].data;

            data.sort(sortByNumberSeries);

            var points = [];
            for (var j = 0; j < data.length; j++) {
                var v = data[j];
                points.push({
                    x: v[0],
                    y: v[1]
                });
            }
            values.push(points);
        }

        return {
            labels: [],
            values: values
        };
    }

    function prepareData(chart, chartType) {
        if (chartType === "bubble") {
            return prepareBubbleData(chart);
        } else if (chart.xtype === "number" && chartType !== "bar" && chartType !== "column") {
            return prepareNumberData(chart);
        } else {
            return prepareDefaultData(chart);
        }
    }

    function createDataTable(chart, options, chartType) {
        var ref = prepareData(chart, chartType);
        var labels = ref.labels;
        var values = ref.values;

        var series = chart.data;
        var datasets = [];
        var colors = chart.options.colors || defaultColors;
        for (var i = 0; i < series.length; i++) {
            var s = series[i];

            // use colors for each bar for single series format
            var color = (void 0);
            var backgroundColor = (void 0);
            if (chart.options.colors && chart.singleSeriesFormat && (chartType === "bar" || chartType === "column") && !s.color && isArray(chart.options.colors) && !isArray(chart.options.colors[0])) {
                color = colors;
                backgroundColor = [];
                for (var j = 0; j < colors.length; j++) {
                    backgroundColor[j] = addOpacity(color[j], 0.5);
                }
            } else {
                color = s.color || colors[i];
                backgroundColor = chartType !== "line" ? addOpacity(color, 0.5) : color;
            }

            var dataset = {
                label: s.name || "",
                data: values[i],
                fill: chartType === "area",
                borderColor: color,
                backgroundColor: backgroundColor,
                borderWidth: 2
            };

            var pointChart = chartType === "line" || chartType === "area" || chartType === "scatter" || chartType === "bubble";
            if (pointChart) {
                dataset.pointBackgroundColor = color;
                dataset.pointHoverBackgroundColor = color;
                dataset.pointHitRadius = 50;
            }

            if (chartType === "bubble") {
                dataset.pointBackgroundColor = backgroundColor;
                dataset.pointHoverBackgroundColor = backgroundColor;
                dataset.pointHoverBorderWidth = 2;
            }

            if (s.stack) {
                dataset.stack = s.stack;
            }

            var curve = seriesOption(chart, s, "curve");
            if (curve === false) {
                dataset.tension = 0;
            } else if (pointChart) {
                dataset.tension = 0.4;
            }

            var points = seriesOption(chart, s, "points");
            if (points === false) {
                dataset.pointRadius = 0;
                dataset.pointHoverRadius = 0;
            }

            dataset = merge(dataset, chart.options.dataset || {});
            dataset = merge(dataset, s.library || {});
            dataset = merge(dataset, s.dataset || {});

            datasets.push(dataset);
        }

        var xmin = chart.options.xmin;
        var xmax = chart.options.xmax;

        if (chart.xtype === "datetime") {
            if (notnull(xmin)) {
                options.scales.x.min = toDate(xmin).getTime();
            }
            if (notnull(xmax)) {
                options.scales.x.max = toDate(xmax).getTime();
            }
        } else if (chart.xtype === "number") {
            if (notnull(xmin)) {
                options.scales.x.min = xmin;
            }
            if (notnull(xmax)) {
                options.scales.x.max = xmax;
            }
        }

        if (chart.xtype === "datetime") {
            var timeUnit = calculateTimeUnit(labels);

            // for empty datetime chart
            if (labels.length === 0) {
                if (notnull(xmin)) {
                    labels.push(toDate(xmin));
                }
                if (notnull(xmax)) {
                    labels.push(toDate(xmax));
                }
            }

            if (labels.length > 0) {
                var minTime = (notnull(xmin) ? toDate(xmin) : labels[0]).getTime();
                var maxTime = (notnull(xmax) ? toDate(xmax) : labels[0]).getTime();

                for (var i$1 = 1; i$1 < labels.length; i$1++) {
                    var value = labels[i$1].getTime();
                    if (value < minTime) {
                        minTime = value;
                    }
                    if (value > maxTime) {
                        maxTime = value;
                    }
                }

                var timeDiff = (maxTime - minTime) / (86400 * 1000.0);

                if (!options.scales.x.time.unit) {
                    var step;
                    if (timeUnit === "year" || timeDiff > 365 * 10) {
                        options.scales.x.time.unit = "year";
                        step = 365;
                    } else if (timeUnit === "month" || timeDiff > 30 * 10) {
                        options.scales.x.time.unit = "month";
                        step = 30;
                    } else if (timeUnit === "week" || timeUnit === "day" || timeDiff > 10) {
                        options.scales.x.time.unit = "day";
                        step = 1;
                    } else if (timeUnit === "hour" || timeDiff > 0.5) {
                        options.scales.x.time.displayFormats = {hour: "MMM d, h a"};
                        options.scales.x.time.unit = "hour";
                        step = 1 / 24.0;
                    } else if (timeUnit === "minute") {
                        options.scales.x.time.displayFormats = {minute: "h:mm a"};
                        options.scales.x.time.unit = "minute";
                        step = 1 / 24.0 / 60.0;
                    }

                    if (step && timeDiff > 0) {
                        // width not available for hidden elements
                        var width = chart.element.offsetWidth;
                        if (width > 0) {
                            var unitStepSize = Math.ceil(timeDiff / step / (width / 100.0));
                            if (timeUnit === "week" && step === 1) {
                                unitStepSize = Math.ceil(unitStepSize / 7.0) * 7;
                            }
                            options.scales.x.ticks.stepSize = unitStepSize;
                        }
                    }
                }

                if (!options.scales.x.time.tooltipFormat) {
                    if (timeUnit === "year") {
                        options.scales.x.time.tooltipFormat = "yyyy";
                    } else if (timeUnit === "month") {
                        options.scales.x.time.tooltipFormat = "MMM yyyy";
                    } else if (timeUnit === "week" || timeUnit === "day") {
                        options.scales.x.time.tooltipFormat = "PP";
                    } else if (timeUnit === "hour") {
                        options.scales.x.time.tooltipFormat = "MMM d, h a";
                    } else if (timeUnit === "minute") {
                        options.scales.x.time.tooltipFormat = "h:mm a";
                    }
                }
            }
        }

        return {
            labels: labels,
            datasets: datasets
        };
    }

    var defaultExport$2 = function defaultExport(library) {
        this.name = "chartjs";
        this.library = library;
    };

    defaultExport$2.prototype.renderLineChart = function renderLineChart (chart, chartType) {
        if (!chartType) {
            chartType = "line";
        }

        var chartOptions = {};

        var options = jsOptions$2(chart, merge(chartOptions, chart.options));
        setFormatOptions$1(chart, options, chartType);

        var data = createDataTable(chart, options, chartType);

        if (chart.xtype === "number") {
            options.scales.x.type = options.scales.x.type || "linear";
            options.scales.x.position = options.scales.x.position || "bottom";
        } else {
            options.scales.x.type = chart.xtype === "string" ? "category" : "time";
        }

        this.drawChart(chart, "line", data, options);
    };

    defaultExport$2.prototype.renderPieChart = function renderPieChart (chart) {
        var options = merge({}, baseOptions);
        if (chart.options.donut) {
            options.cutout = "50%";
        }

        if ("legend" in chart.options) {
            hideLegend$2(options, chart.options.legend);
        }

        if (chart.options.title) {
            setTitle$2(options, chart.options.title);
        }

        options = merge(options, chart.options.library || {});
        setFormatOptions$1(chart, options, "pie");

        var labels = [];
        var values = [];
        for (var i = 0; i < chart.data.length; i++) {
            var point = chart.data[i];
            labels.push(point[0]);
            values.push(point[1]);
        }

        var dataset = {
            data: values,
            backgroundColor: chart.options.colors || defaultColors
        };
        dataset = merge(dataset, chart.options.dataset || {});

        var data = {
            labels: labels,
            datasets: [dataset]
        };

        this.drawChart(chart, "pie", data, options);
    };

    defaultExport$2.prototype.renderColumnChart = function renderColumnChart (chart, chartType) {
        var options;
        if (chartType === "bar") {
            var barOptions = merge(baseOptions, defaultOptions$2);
            barOptions.indexAxis = "y";

            // ensure gridlines have proper orientation
            barOptions.scales.x.grid.drawOnChartArea = true;
            barOptions.scales.y.grid.drawOnChartArea = false;
            delete barOptions.scales.y.ticks.maxTicksLimit;

            options = jsOptionsFunc(barOptions, hideLegend$2, setTitle$2, setBarMin$1, setBarMax$1, setStacked$2, setXtitle$2, setYtitle$2)(chart, chart.options);
        } else {
            options = jsOptions$2(chart, chart.options);
        }
        setFormatOptions$1(chart, options, chartType);
        var data = createDataTable(chart, options, "column");
        if (chartType !== "bar") {
            setLabelSize(chart, data, options);
        }
        if (!("mode" in options.interaction)) {
            options.interaction.mode = "index";
        }
        this.drawChart(chart, "bar", data, options);
    };

    defaultExport$2.prototype.renderAreaChart = function renderAreaChart (chart) {
        this.renderLineChart(chart, "area");
    };

    defaultExport$2.prototype.renderBarChart = function renderBarChart (chart) {
        this.renderColumnChart(chart, "bar");
    };

    defaultExport$2.prototype.renderScatterChart = function renderScatterChart (chart, chartType) {
        chartType = chartType || "scatter";

        var options = jsOptions$2(chart, chart.options);
        setFormatOptions$1(chart, options, chartType);

        if (!("showLine" in options)) {
            options.showLine = false;
        }

        var data = createDataTable(chart, options, chartType);

        options.scales.x.type = options.scales.x.type || "linear";
        options.scales.x.position = options.scales.x.position || "bottom";

        // prevent grouping hover and tooltips
        if (!("mode" in options.interaction)) {
            options.interaction.mode = "nearest";
        }

        this.drawChart(chart, chartType, data, options);
    };

    defaultExport$2.prototype.renderBubbleChart = function renderBubbleChart (chart) {
        this.renderScatterChart(chart, "bubble");
    };

    defaultExport$2.prototype.destroy = function destroy (chart) {
        if (chart.chart) {
            chart.chart.destroy();
        }
    };

    defaultExport$2.prototype.drawChart = function drawChart (chart, type, data, options) {
        this.destroy(chart);
        if (chart.destroyed) { return; }

        var chartOptions = {
            type: type,
            data: data,
            options: options
        };

        if (chart.options.code) {
            window.console.log("new Chart(ctx, " + JSON.stringify(chartOptions) + ");");
        }

        chart.element.innerHTML = "<canvas></canvas>";
        var ctx = chart.element.getElementsByTagName("CANVAS")[0];
        chart.chart = new this.library(ctx, chartOptions);
    };

    var defaultOptions$1 = {
        chart: {},
        xAxis: {
            title: {
                text: null
            },
            labels: {
                style: {
                    fontSize: "12px"
                }
            }
        },
        yAxis: {
            title: {
                text: null
            },
            labels: {
                style: {
                    fontSize: "12px"
                }
            }
        },
        title: {
            text: null
        },
        credits: {
            enabled: false
        },
        legend: {
            borderWidth: 0
        },
        tooltip: {
            style: {
                fontSize: "12px"
            }
        },
        plotOptions: {
            areaspline: {},
            area: {},
            series: {
                marker: {}
            }
        },
        time: {
            useUTC: false
        }
    };

    function hideLegend$1(options, legend, hideLegend) {
        if (legend !== undefined) {
            options.legend.enabled = !!legend;
            if (legend && legend !== true) {
                if (legend === "top" || legend === "bottom") {
                    options.legend.verticalAlign = legend;
                } else {
                    options.legend.layout = "vertical";
                    options.legend.verticalAlign = "middle";
                    options.legend.align = legend;
                }
            }
        } else if (hideLegend) {
            options.legend.enabled = false;
        }
    }

    function setTitle$1(options, title) {
        options.title.text = title;
    }

    function setMin$1(options, min) {
        options.yAxis.min = min;
    }

    function setMax$1(options, max) {
        options.yAxis.max = max;
    }

    function setStacked$1(options, stacked) {
        var stackedValue = stacked ? (stacked === true ? "normal" : stacked) : null;
        options.plotOptions.series.stacking = stackedValue;
        options.plotOptions.area.stacking = stackedValue;
        options.plotOptions.areaspline.stacking = stackedValue;
    }

    function setXtitle$1(options, title) {
        options.xAxis.title.text = title;
    }

    function setYtitle$1(options, title) {
        options.yAxis.title.text = title;
    }

    var jsOptions$1 = jsOptionsFunc(defaultOptions$1, hideLegend$1, setTitle$1, setMin$1, setMax$1, setStacked$1, setXtitle$1, setYtitle$1);

    function setFormatOptions(chart, options, chartType) {
        var formatOptions = {
            prefix: chart.options.prefix,
            suffix: chart.options.suffix,
            thousands: chart.options.thousands,
            decimal: chart.options.decimal,
            precision: chart.options.precision,
            round: chart.options.round,
            zeros: chart.options.zeros
        };

        // skip when axis is an array (like with min/max)
        if (chartType !== "pie" && !isArray(options.yAxis) && !options.yAxis.labels.formatter) {
            options.yAxis.labels.formatter = function () {
                return formatValue("", this.value, formatOptions);
            };
        }

        if (!options.tooltip.pointFormatter && !options.tooltip.pointFormat) {
            options.tooltip.pointFormatter = function () {
                return '<span style="color:' + this.color + '">\u25CF</span> ' + formatValue(this.series.name + ': <b>', this.y, formatOptions) + '</b><br/>';
            };
        }
    }

    var defaultExport$1 = function defaultExport(library) {
        this.name = "highcharts";
        this.library = library;
    };

    defaultExport$1.prototype.renderLineChart = function renderLineChart (chart, chartType) {
        chartType = chartType || "spline";
        var chartOptions = {};
        if (chartType === "areaspline") {
            chartOptions = {
                plotOptions: {
                    areaspline: {
                        stacking: "normal"
                    },
                    area: {
                        stacking: "normal"
                    },
                    series: {
                        marker: {
                            enabled: false
                        }
                    }
                }
            };
        }

        if (chart.options.curve === false) {
            if (chartType === "areaspline") {
                chartType = "area";
            } else if (chartType === "spline") {
                chartType = "line";
            }
        }

        var options = jsOptions$1(chart, chart.options, chartOptions);
        if (chart.xtype === "number") {
            options.xAxis.type = options.xAxis.type || "linear";
        } else {
            options.xAxis.type = chart.xtype === "string" ? "category" : "datetime";
        }
        if (!options.chart.type) {
            options.chart.type = chartType;
        }
        setFormatOptions(chart, options, chartType);

        var series = chart.data;
        for (var i = 0; i < series.length; i++) {
            series[i].name = series[i].name || "Value";
            var data = series[i].data;
            if (chart.xtype === "datetime") {
                for (var j = 0; j < data.length; j++) {
                    data[j][0] = data[j][0].getTime();
                }
            } else if (chart.xtype === "number") {
                data.sort(sortByNumberSeries);
            }
            series[i].marker = {symbol: "circle"};
            if (chart.options.points === false) {
                series[i].marker.enabled = false;
            }
        }

        this.drawChart(chart, series, options);
    };

    defaultExport$1.prototype.renderScatterChart = function renderScatterChart (chart) {
        var options = jsOptions$1(chart, chart.options, {});
        options.chart.type = "scatter";
        this.drawChart(chart, chart.data, options);
    };

    defaultExport$1.prototype.renderPieChart = function renderPieChart (chart) {
        var chartOptions = merge(defaultOptions$1, {});

        if (chart.options.colors) {
            chartOptions.colors = chart.options.colors;
        }
        if (chart.options.donut) {
            chartOptions.plotOptions = {pie: {innerSize: "50%"}};
        }

        if ("legend" in chart.options) {
            hideLegend$1(chartOptions, chart.options.legend);
        }

        if (chart.options.title) {
            setTitle$1(chartOptions, chart.options.title);
        }

        var options = merge(chartOptions, chart.options.library || {});
        setFormatOptions(chart, options, "pie");
        var series = [{
            type: "pie",
            name: chart.options.label || "Value",
            data: chart.data
        }];

        this.drawChart(chart, series, options);
    };

    defaultExport$1.prototype.renderColumnChart = function renderColumnChart (chart, chartType) {
        chartType = chartType || "column";
        var series = chart.data;
        var options = jsOptions$1(chart, chart.options);
        var rows = [];
        var categories = [];
        options.chart.type = chartType;
        setFormatOptions(chart, options, chartType);

        for (var i = 0; i < series.length; i++) {
            var s = series[i];

            for (var j = 0; j < s.data.length; j++) {
                var d = s.data[j];
                if (!rows[d[0]]) {
                    rows[d[0]] = new Array(series.length);
                    categories.push(d[0]);
                }
                rows[d[0]][i] = d[1];
            }
        }

        if (chart.xtype === "number") {
            categories.sort(sortByNumber);
        }

        options.xAxis.categories = categories;

        var newSeries = [];
        for (var i$1 = 0; i$1 < series.length; i$1++) {
            var d$1 = [];
            for (var j$1 = 0; j$1 < categories.length; j$1++) {
                d$1.push(rows[categories[j$1]][i$1] || 0);
            }

            var d2 = {
                name: series[i$1].name || "Value",
                data: d$1
            };
            if (series[i$1].stack) {
                d2.stack = series[i$1].stack;
            }

            newSeries.push(d2);
        }

        this.drawChart(chart, newSeries, options);
    };

    defaultExport$1.prototype.renderBarChart = function renderBarChart (chart) {
        this.renderColumnChart(chart, "bar");
    };

    defaultExport$1.prototype.renderAreaChart = function renderAreaChart (chart) {
        this.renderLineChart(chart, "areaspline");
    };

    defaultExport$1.prototype.destroy = function destroy (chart) {
        if (chart.chart) {
            chart.chart.destroy();
        }
    };

    defaultExport$1.prototype.drawChart = function drawChart (chart, data, options) {
        this.destroy(chart);
        if (chart.destroyed) { return; }

        options.chart.renderTo = chart.element.id;
        options.series = data;

        if (chart.options.code) {
            window.console.log("new Highcharts.Chart(" + JSON.stringify(options) + ");");
        }

        chart.chart = new this.library.Chart(options);
    };

    var loaded = {};
    var callbacks = [];

    // Set chart options
    var defaultOptions = {
        chartArea: {},
        fontName: "'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif",
        pointSize: 6,
        legend: {
            textStyle: {
                fontSize: 12,
                color: "#444"
            },
            alignment: "center",
            position: "right"
        },
        curveType: "function",
        hAxis: {
            textStyle: {
                color: "#666",
                fontSize: 12
            },
            titleTextStyle: {},
            gridlines: {
                color: "transparent"
            },
            baselineColor: "#ccc",
            viewWindow: {}
        },
        vAxis: {
            textStyle: {
                color: "#666",
                fontSize: 12
            },
            titleTextStyle: {},
            baselineColor: "#ccc",
            viewWindow: {}
        },
        tooltip: {
            textStyle: {
                color: "#666",
                fontSize: 12
            }
        }
    };

    function hideLegend(options, legend, hideLegend) {
        if (legend !== undefined) {
            var position;
            if (!legend) {
                position = "none";
            } else if (legend === true) {
                position = "right";
            } else {
                position = legend;
            }
            options.legend.position = position;
        } else if (hideLegend) {
            options.legend.position = "none";
        }
    }

    function setTitle(options, title) {
        options.title = title;
        options.titleTextStyle = {color: "#333", fontSize: "20px"};
    }

    function setMin(options, min) {
        options.vAxis.viewWindow.min = min;
    }

    function setMax(options, max) {
        options.vAxis.viewWindow.max = max;
    }

    function setBarMin(options, min) {
        options.hAxis.viewWindow.min = min;
    }

    function setBarMax(options, max) {
        options.hAxis.viewWindow.max = max;
    }

    function setStacked(options, stacked) {
        options.isStacked = stacked || false;
    }

    function setXtitle(options, title) {
        options.hAxis.title = title;
        options.hAxis.titleTextStyle.italic = false;
    }

    function setYtitle(options, title) {
        options.vAxis.title = title;
        options.vAxis.titleTextStyle.italic = false;
    }

    var jsOptions = jsOptionsFunc(defaultOptions, hideLegend, setTitle, setMin, setMax, setStacked, setXtitle, setYtitle);

    function resize(callback) {
        if (window.attachEvent) {
            window.attachEvent("onresize", callback);
        } else if (window.addEventListener) {
            window.addEventListener("resize", callback, true);
        }
        callback();
    }

    var defaultExport = function defaultExport(library) {
        this.name = "google";
        this.library = library;
    };

    defaultExport.prototype.renderLineChart = function renderLineChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var chartOptions = {};

            if (chart.options.curve === false) {
                chartOptions.curveType = "none";
            }

            if (chart.options.points === false) {
                chartOptions.pointSize = 0;
            }

            var options = jsOptions(chart, chart.options, chartOptions);
            var data = this$1$1.createDataTable(chart.data, chart.xtype);

            this$1$1.drawChart(chart, "LineChart", data, options);
        });
    };

    defaultExport.prototype.renderPieChart = function renderPieChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var chartOptions = {
                chartArea: {
                    top: "10%",
                    height: "80%"
                },
                legend: {}
            };
            if (chart.options.colors) {
                chartOptions.colors = chart.options.colors;
            }
            if (chart.options.donut) {
                chartOptions.pieHole = 0.5;
            }
            if ("legend" in chart.options) {
                hideLegend(chartOptions, chart.options.legend);
            }
            if (chart.options.title) {
                setTitle(chartOptions, chart.options.title);
            }
            var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});

            var data = new this$1$1.library.visualization.DataTable();
            data.addColumn("string", "");
            data.addColumn("number", "Value");
            data.addRows(chart.data);

            this$1$1.drawChart(chart, "PieChart", data, options);
        });
    };

    defaultExport.prototype.renderColumnChart = function renderColumnChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var options = jsOptions(chart, chart.options);
            var data = this$1$1.createDataTable(chart.data, chart.xtype);

            this$1$1.drawChart(chart, "ColumnChart", data, options);
        });
    };

    defaultExport.prototype.renderBarChart = function renderBarChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var chartOptions = {
                hAxis: {
                    gridlines: {
                        color: "#ccc"
                    }
                }
            };
            var options = jsOptionsFunc(defaultOptions, hideLegend, setTitle, setBarMin, setBarMax, setStacked, setXtitle, setYtitle)(chart, chart.options, chartOptions);
            var data = this$1$1.createDataTable(chart.data, chart.xtype);

            this$1$1.drawChart(chart, "BarChart", data, options);
        });
    };

    defaultExport.prototype.renderAreaChart = function renderAreaChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var chartOptions = {
                isStacked: true,
                pointSize: 0,
                areaOpacity: 0.5
            };

            var options = jsOptions(chart, chart.options, chartOptions);
            var data = this$1$1.createDataTable(chart.data, chart.xtype);

            this$1$1.drawChart(chart, "AreaChart", data, options);
        });
    };

    defaultExport.prototype.renderGeoChart = function renderGeoChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, "geochart", function () {
            var chartOptions = {
                legend: "none",
                colorAxis: {
                    colors: chart.options.colors || ["#f6c7b6", "#ce502d"]
                }
            };
            var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});

            var data = new this$1$1.library.visualization.DataTable();
            data.addColumn("string", "");
            data.addColumn("number", chart.options.label || "Value");
            data.addRows(chart.data);

            this$1$1.drawChart(chart, "GeoChart", data, options);
        });
    };

    defaultExport.prototype.renderScatterChart = function renderScatterChart (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, function () {
            var chartOptions = {};
            var options = jsOptions(chart, chart.options, chartOptions);

            var series = chart.data;
            var rows2 = [];
            for (var i = 0; i < series.length; i++) {
                series[i].name = series[i].name || "Value";
                var d = series[i].data;
                for (var j = 0; j < d.length; j++) {
                    var row = new Array(series.length + 1);
                    row[0] = d[j][0];
                    row[i + 1] = d[j][1];
                    rows2.push(row);
                }
            }

            var data = new this$1$1.library.visualization.DataTable();
            data.addColumn("number", "");
            for (var i$1 = 0; i$1 < series.length; i$1++) {
                data.addColumn("number", series[i$1].name);
            }
            data.addRows(rows2);

            this$1$1.drawChart(chart, "ScatterChart", data, options);
        });
    };

    defaultExport.prototype.renderTimeline = function renderTimeline (chart) {
        var this$1$1 = this;

        this.waitForLoaded(chart, "timeline", function () {
            var chartOptions = {
                legend: "none"
            };

            if (chart.options.colors) {
                chartOptions.colors = chart.options.colors;
            }
            var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});

            var data = new this$1$1.library.visualization.DataTable();
            data.addColumn({type: "string", id: "Name"});
            data.addColumn({type: "date", id: "Start"});
            data.addColumn({type: "date", id: "End"});
            data.addRows(chart.data);

            chart.element.style.lineHeight = "normal";

            this$1$1.drawChart(chart, "Timeline", data, options);
        });
    };

    // TODO remove resize events
    defaultExport.prototype.destroy = function destroy (chart) {
        if (chart.chart) {
            chart.chart.clearChart();
        }
    };

    defaultExport.prototype.drawChart = function drawChart (chart, type, data, options) {
        this.destroy(chart);
        if (chart.destroyed) { return; }

        if (chart.options.code) {
            window.console.log("var data = new google.visualization.DataTable(" + data.toJSON() + ");\nvar chart = new google.visualization." + type + "(element);\nchart.draw(data, " + JSON.stringify(options) + ");");
        }

        chart.chart = new this.library.visualization[type](chart.element);
        resize(function () {
            chart.chart.draw(data, options);
        });
    };

    defaultExport.prototype.waitForLoaded = function waitForLoaded (chart, pack, callback) {
        var this$1$1 = this;

        if (!callback) {
            callback = pack;
            pack = "corechart";
        }

        callbacks.push({pack: pack, callback: callback});

        if (loaded[pack]) {
            this.runCallbacks();
        } else {
            loaded[pack] = true;

            // https://groups.google.com/forum/#!topic/google-visualization-api/fMKJcyA2yyI
            var loadOptions = {
                packages: [pack],
                callback: function () { this$1$1.runCallbacks(); }
            };
            var config = chart.__config();
            if (config.language) {
                loadOptions.language = config.language;
            }
            if (pack === "geochart" && config.mapsApiKey) {
                loadOptions.mapsApiKey = config.mapsApiKey;
            }

            this.library.charts.load("current", loadOptions);
        }
    };

    defaultExport.prototype.runCallbacks = function runCallbacks () {
        for (var i = 0; i < callbacks.length; i++) {
            var cb = callbacks[i];
            var call = this.library.visualization && ((cb.pack === "corechart" && this.library.visualization.LineChart) || (cb.pack === "timeline" && this.library.visualization.Timeline) || (cb.pack === "geochart" && this.library.visualization.GeoChart));
            if (call) {
                cb.callback();
                callbacks.splice(i, 1);
                i--;
            }
        }
    };

    // cant use object as key
    defaultExport.prototype.createDataTable = function createDataTable (series, columnType) {
        var rows = [];
        var sortedLabels = [];
        for (var i = 0; i < series.length; i++) {
            var s = series[i];
            series[i].name = series[i].name || "Value";

            for (var j = 0; j < s.data.length; j++) {
                var d = s.data[j];
                var key = columnType === "datetime" ? d[0].getTime() : d[0];
                if (!rows[key]) {
                    rows[key] = new Array(series.length);
                    sortedLabels.push(key);
                }
                rows[key][i] = d[1];
            }
        }

        var rows2 = [];
        var values = [];
        for (var j$1 = 0; j$1 < sortedLabels.length; j$1++) {
            var i$1 = sortedLabels[j$1];
            var value = (void 0);
            if (columnType === "datetime") {
                value = new Date(i$1);
                values.push(value);
            } else {
                value = i$1;
            }
            rows2.push([value].concat(rows[i$1]));
        }

        var day = true;
        if (columnType === "datetime") {
            rows2.sort(sortByTime);

            var timeUnit = calculateTimeUnit(values, true);
            day = isDay(timeUnit);
        } else if (columnType === "number") {
            rows2.sort(sortByNumberSeries);

            for (var i$2 = 0; i$2 < rows2.length; i$2++) {
                rows2[i$2][0] = toStr(rows2[i$2][0]);
            }

            columnType = "string";
        }

        // create datatable
        var data = new this.library.visualization.DataTable();
        columnType = columnType === "datetime" && day ? "date" : columnType;
        data.addColumn(columnType, "");
        for (var i$3 = 0; i$3 < series.length; i$3++) {
            data.addColumn("number", series[i$3].name);
        }
        data.addRows(rows2);

        return data;
    };

    var adapters = [];

    function getAdapterType(library) {
        if (library) {
            if (library.product === "Highcharts") {
                return defaultExport$1;
            } else if (library.charts) {
                return defaultExport;
            } else if (isFunction(library)) {
                return defaultExport$2;
            }
        }
        throw new Error("Unknown adapter");
    }

    function addAdapter(library) {
        var adapterType = getAdapterType(library);

        for (var i = 0; i < adapters.length; i++) {
            if (adapters[i].library === library) {
                return;
            }
        }

        adapters.push(new adapterType(library));
    }

    function loadAdapters() {
        if ("Chart" in window) {
            addAdapter(window.Chart);
        }

        if ("Highcharts" in window) {
            addAdapter(window.Highcharts);
        }

        if (window.google && window.google.charts) {
            addAdapter(window.google);
        }
    }

    // TODO remove chartType if cross-browser way
    // to get the name of the chart class
    function callAdapter(chartType, chart) {
        var fnName = "render" + chartType;
        var adapterName = chart.options.adapter;

        loadAdapters();

        for (var i = 0; i < adapters.length; i++) {
            var adapter = adapters[i];
            if ((!adapterName || adapterName === adapter.name) && isFunction(adapter[fnName])) {
                chart.adapter = adapter.name;
                chart.__adapterObject = adapter;
                return adapter[fnName](chart);
            }
        }

        if (adapters.length > 0) {
            throw new Error("No charting library found for " + chartType);
        } else {
            throw new Error("No charting libraries found - be sure to include one before your charts");
        }
    }

    var Chartkick = {
        charts: {},
        configure: function (options) {
            for (var key in options) {
                if (Object.prototype.hasOwnProperty.call(options, key)) {
                    Chartkick.config[key] = options[key];
                }
            }
        },
        setDefaultOptions: function (opts) {
            Chartkick.options = opts;
        },
        eachChart: function (callback) {
            for (var chartId in Chartkick.charts) {
                if (Object.prototype.hasOwnProperty.call(Chartkick.charts, chartId)) {
                    callback(Chartkick.charts[chartId]);
                }
            }
        },
        destroyAll: function () {
            for (var chartId in Chartkick.charts) {
                if (Object.prototype.hasOwnProperty.call(Chartkick.charts, chartId)) {
                    Chartkick.charts[chartId].destroy();
                    delete Chartkick.charts[chartId];
                }
            }
        },
        config: {},
        options: {},
        adapters: adapters,
        addAdapter: addAdapter,
        use: function (adapter) {
            addAdapter(adapter);
            return Chartkick;
        }
    };

    function formatSeriesBubble(data) {
        var r = [];
        for (var i = 0; i < data.length; i++) {
            r.push([toFloat(data[i][0]), toFloat(data[i][1]), toFloat(data[i][2])]);
        }
        return r;
    }

    // casts data to proper type
    // sorting is left to adapters
    function formatSeriesData(data, keyType) {
        if (keyType === "bubble") {
            return formatSeriesBubble(data);
        }

        var keyFunc;
        if (keyType === "number") {
            keyFunc = toFloat;
        } else if (keyType === "datetime") {
            keyFunc = toDate;
        } else {
            keyFunc = toStr;
        }

        var r = [];
        for (var i = 0; i < data.length; i++) {
            r.push([keyFunc(data[i][0]), toFloat(data[i][1])]);
        }
        return r;
    }

    function detectXType(series, noDatetime, options) {
        if (dataEmpty(series)) {
            if ((options.xmin || options.xmax) && (!options.xmin || isDate(options.xmin)) && (!options.xmax || isDate(options.xmax))) {
                return "datetime";
            } else {
                return "number";
            }
        } else if (detectXTypeWithFunction(series, isNumber)) {
            return "number";
        } else if (!noDatetime && detectXTypeWithFunction(series, isDate)) {
            return "datetime";
        } else {
            return "string";
        }
    }

    function detectXTypeWithFunction(series, func) {
        for (var i = 0; i < series.length; i++) {
            var data = toArr(series[i].data);
            for (var j = 0; j < data.length; j++) {
                if (!func(data[j][0])) {
                    return false;
                }
            }
        }
        return true;
    }

    // creates a shallow copy of each element of the array
    // elements are expected to be objects
    function copySeries(series) {
        var newSeries = [];
        for (var i = 0; i < series.length; i++) {
            var copy = {};
            for (var j in series[i]) {
                if (Object.prototype.hasOwnProperty.call(series[i], j)) {
                    copy[j] = series[i][j];
                }
            }
            newSeries.push(copy);
        }
        return newSeries;
    }

    function processSeries(chart, keyType, noDatetime) {
        var opts = chart.options;
        var series = chart.rawData;

        // see if one series or multiple
        chart.singleSeriesFormat = !isArray(series) || !isPlainObject(series[0]);
        if (chart.singleSeriesFormat) {
            series = [{name: opts.label, data: series}];
        }

        // convert to array
        // must come before dataEmpty check
        series = copySeries(series);
        for (var i = 0; i < series.length; i++) {
            series[i].data = toArr(series[i].data);
        }

        chart.xtype = keyType || (opts.discrete ? "string" : detectXType(series, noDatetime, opts));

        // right format
        for (var i$1 = 0; i$1 < series.length; i$1++) {
            series[i$1].data = formatSeriesData(series[i$1].data, chart.xtype);
        }

        return series;
    }

    function processSimple(chart) {
        var perfectData = toArr(chart.rawData);
        for (var i = 0; i < perfectData.length; i++) {
            perfectData[i] = [toStr(perfectData[i][0]), toFloat(perfectData[i][1])];
        }
        return perfectData;
    }

    function dataEmpty(data, chartType) {
        if (chartType === "PieChart" || chartType === "GeoChart" || chartType === "Timeline") {
            return data.length === 0;
        } else {
            for (var i = 0; i < data.length; i++) {
                if (data[i].data.length > 0) {
                    return false;
                }
            }
            return true;
        }
    }

    function addDownloadButton(chart) {
        var download = chart.options.download;
        if (download === true) {
            download = {};
        } else if (typeof download === "string") {
            download = {filename: download};
        }

        var link = document.createElement("a");
        link.download = download.filename || "chart.png";
        link.style.position = "absolute";
        link.style.top = "20px";
        link.style.right = "20px";
        link.style.zIndex = 1000;
        link.style.lineHeight = "20px";
        link.target = "_blank"; // for safari

        var image = document.createElement("img");
        // icon from Font Awesome, modified to set fill color
        var svg = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--! Font Awesome Free 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --><path fill=\"#CCCCCC\" d=\"M344 240h-56L287.1 152c0-13.25-10.75-24-24-24h-16C234.7 128 223.1 138.8 223.1 152L224 240h-56c-9.531 0-18.16 5.656-22 14.38C142.2 263.1 143.9 273.3 150.4 280.3l88.75 96C243.7 381.2 250.1 384 256.8 384c7.781-.3125 13.25-2.875 17.75-7.844l87.25-96c6.406-7.031 8.031-17.19 4.188-25.88S353.5 240 344 240zM256 0C114.6 0 0 114.6 0 256s114.6 256 256 256s256-114.6 256-256S397.4 0 256 0zM256 464c-114.7 0-208-93.31-208-208S141.3 48 256 48s208 93.31 208 208S370.7 464 256 464z\"/></svg>";
        image.src = "data:image/svg+xml;utf8," + (encodeURIComponent(svg));
        image.alt = "Download";
        image.style.width = "20px";
        image.style.height = "20px";
        image.style.border = "none";
        link.appendChild(image);

        var element = chart.element;
        element.style.position = "relative";

        chart.__downloadAttached = true;

        // mouseenter
        chart.__enterEvent = element.addEventListener("mouseover", function (e) {
            var related = e.relatedTarget;
            // check download option again to ensure it wasn't changed
            if ((!related || (related !== this && !this.contains(related))) && chart.options.download) {
                link.href = chart.toImage(download);
                element.appendChild(link);
            }
        });

        // mouseleave
        chart.__leaveEvent = element.addEventListener("mouseout", function (e) {
            var related = e.relatedTarget;
            if (!related || (related !== this && !this.contains(related))) {
                if (link.parentNode) {
                    link.parentNode.removeChild(link);
                }
            }
        });
    }

    var pendingRequests = [];
    var runningRequests = 0;
    var maxRequests = 4;

    function pushRequest(url, success, error) {
        pendingRequests.push([url, success, error]);
        runNext();
    }

    function runNext() {
        if (runningRequests < maxRequests) {
            var request = pendingRequests.shift();
            if (request) {
                runningRequests++;
                getJSON(request[0], request[1], request[2]);
                runNext();
            }
        }
    }

    function requestComplete() {
        runningRequests--;
        runNext();
    }

    function getJSON(url, success, error) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onload = function () {
            requestComplete();
            if (xhr.status === 200) {
                success(JSON.parse(xhr.responseText));
            } else {
                error(xhr.statusText);
            }
        };
        xhr.send();
    }

    // helpers

    function setText(element, text) {
        element.textContent = text;
    }

    // TODO remove prefix for all messages
    function chartError(element, message, noPrefix) {
        if (!noPrefix) {
            message = "Error Loading Chart: " + message;
        }
        setText(element, message);
        element.style.color = "#ff0000";
    }

    function errorCatcher(chart) {
        try {
            chart.__render();
        } catch (err) {
            chartError(chart.element, err.message);
            throw err;
        }
    }

    function fetchDataSource(chart, dataSource, showLoading) {
        // only show loading message for urls and callbacks
        if (showLoading && chart.options.loading && (typeof dataSource === "string" || typeof dataSource === "function")) {
            setText(chart.element, chart.options.loading);
        }

        if (typeof dataSource === "string") {
            pushRequest(dataSource, function (data) {
                chart.rawData = data;
                errorCatcher(chart);
            }, function (message) {
                chartError(chart.element, message);
            });
        } else if (typeof dataSource === "function") {
            try {
                dataSource(function (data) {
                    chart.rawData = data;
                    errorCatcher(chart);
                }, function (message) {
                    chartError(chart.element, message, true);
                });
            } catch (err) {
                chartError(chart.element, err, true);
            }
        } else {
            chart.rawData = dataSource;
            errorCatcher(chart);
        }
    }

    function renderChart(chartType, chart) {
        if (dataEmpty(chart.data, chartType)) {
            var message = chart.options.empty || (chart.options.messages && chart.options.messages.empty) || "No data";
            setText(chart.element, message);
        } else {
            callAdapter(chartType, chart);
            // TODO add downloadSupported method to adapter
            if (chart.options.download && !chart.__downloadAttached && chart.adapter === "chartjs") {
                addDownloadButton(chart);
            }
        }
    }

    function getElement(element) {
        if (typeof element === "string") {
            var elementId = element;
            element = document.getElementById(element);
            if (!element) {
                throw new Error("No element with id " + elementId);
            }
        }
        return element;
    }

    // define classes

    var Chart = function Chart(element, dataSource, options) {
        this.element = getElement(element);
        this.options = merge(Chartkick.options, options || {});
        this.dataSource = dataSource;

        // TODO handle charts without an id for eachChart and destroyAll
        if (this.element.id) {
            Chartkick.charts[this.element.id] = this;
        }

        fetchDataSource(this, dataSource, true);

        if (this.options.refresh) {
            this.startRefresh();
        }
    };

    Chart.prototype.getElement = function getElement () {
        return this.element;
    };

    Chart.prototype.getDataSource = function getDataSource () {
        return this.dataSource;
    };

    Chart.prototype.getData = function getData () {
        return this.data;
    };

    Chart.prototype.getOptions = function getOptions () {
        return this.options;
    };

    Chart.prototype.getChartObject = function getChartObject () {
        return this.chart;
    };

    Chart.prototype.getAdapter = function getAdapter () {
        return this.adapter;
    };

    Chart.prototype.updateData = function updateData (dataSource, options) {
        this.dataSource = dataSource;
        if (options) {
            this.__updateOptions(options);
        }
        fetchDataSource(this, dataSource, true);
    };

    Chart.prototype.setOptions = function setOptions (options) {
        this.__updateOptions(options);
        this.redraw();
    };

    Chart.prototype.redraw = function redraw () {
        fetchDataSource(this, this.rawData);
    };

    Chart.prototype.refreshData = function refreshData () {
        if (typeof this.dataSource === "string") {
            // prevent browser from caching
            var sep = this.dataSource.indexOf("?") === -1 ? "?" : "&";
            var url = this.dataSource + sep + "_=" + (new Date()).getTime();
            fetchDataSource(this, url);
        } else if (typeof this.dataSource === "function") {
            fetchDataSource(this, this.dataSource);
        }
    };

    Chart.prototype.startRefresh = function startRefresh () {
        var this$1$1 = this;

        var refresh = this.options.refresh;

        if (refresh && typeof this.dataSource !== "string" && typeof this.dataSource !== "function") {
            throw new Error("Data source must be a URL or callback for refresh");
        }

        if (!this.intervalId) {
            if (refresh) {
                this.intervalId = setInterval(function () {
                    this$1$1.refreshData();
                }, refresh * 1000);
            } else {
                throw new Error("No refresh interval");
            }
        }
    };

    Chart.prototype.stopRefresh = function stopRefresh () {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
    };

    Chart.prototype.toImage = function toImage (download) {
        // TODO move logic to adapter
        if (this.adapter === "chartjs") {
            if (download && download.background && download.background !== "transparent") {
                // https://stackoverflow.com/questions/30464750/chartjs-line-chart-set-background-color
                var canvas = this.chart.canvas;
                var ctx = this.chart.ctx;
                var tmpCanvas = document.createElement("canvas");
                var tmpCtx = tmpCanvas.getContext("2d");
                tmpCanvas.width = ctx.canvas.width;
                tmpCanvas.height = ctx.canvas.height;
                tmpCtx.fillStyle = download.background;
                tmpCtx.fillRect(0, 0, tmpCanvas.width, tmpCanvas.height);
                tmpCtx.drawImage(canvas, 0, 0);
                return tmpCanvas.toDataURL("image/png");
            } else {
                return this.chart.toBase64Image();
            }
        } else {
            throw new Error("Feature only available for Chart.js");
        }
    };

    Chart.prototype.destroy = function destroy () {
        this.destroyed = true;
        this.stopRefresh();

        if (this.__adapterObject) {
            this.__adapterObject.destroy(this);
        }

        if (this.__enterEvent) {
            this.element.removeEventListener("mouseover", this.__enterEvent);
        }

        if (this.__leaveEvent) {
            this.element.removeEventListener("mouseout", this.__leaveEvent);
        }
    };

    Chart.prototype.__updateOptions = function __updateOptions (options) {
        var updateRefresh = options.refresh && options.refresh !== this.options.refresh;
        this.options = merge(Chartkick.options, options);
        if (updateRefresh) {
            this.stopRefresh();
            this.startRefresh();
        }
    };

    Chart.prototype.__render = function __render () {
        this.data = this.__processData();
        renderChart(this.__chartName(), this);
    };

    Chart.prototype.__config = function __config () {
        return Chartkick.config;
    };

    var LineChart = /*@__PURE__*/(function (Chart) {
        function LineChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) LineChart.__proto__ = Chart;
        LineChart.prototype = Object.create( Chart && Chart.prototype );
        LineChart.prototype.constructor = LineChart;

        LineChart.prototype.__processData = function __processData () {
            return processSeries(this);
        };

        LineChart.prototype.__chartName = function __chartName () {
            return "LineChart";
        };

        return LineChart;
    }(Chart));

    var PieChart = /*@__PURE__*/(function (Chart) {
        function PieChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) PieChart.__proto__ = Chart;
        PieChart.prototype = Object.create( Chart && Chart.prototype );
        PieChart.prototype.constructor = PieChart;

        PieChart.prototype.__processData = function __processData () {
            return processSimple(this);
        };

        PieChart.prototype.__chartName = function __chartName () {
            return "PieChart";
        };

        return PieChart;
    }(Chart));

    var ColumnChart = /*@__PURE__*/(function (Chart) {
        function ColumnChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) ColumnChart.__proto__ = Chart;
        ColumnChart.prototype = Object.create( Chart && Chart.prototype );
        ColumnChart.prototype.constructor = ColumnChart;

        ColumnChart.prototype.__processData = function __processData () {
            return processSeries(this, null, true);
        };

        ColumnChart.prototype.__chartName = function __chartName () {
            return "ColumnChart";
        };

        return ColumnChart;
    }(Chart));

    var BarChart = /*@__PURE__*/(function (Chart) {
        function BarChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) BarChart.__proto__ = Chart;
        BarChart.prototype = Object.create( Chart && Chart.prototype );
        BarChart.prototype.constructor = BarChart;

        BarChart.prototype.__processData = function __processData () {
            return processSeries(this, null, true);
        };

        BarChart.prototype.__chartName = function __chartName () {
            return "BarChart";
        };

        return BarChart;
    }(Chart));

    var AreaChart = /*@__PURE__*/(function (Chart) {
        function AreaChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) AreaChart.__proto__ = Chart;
        AreaChart.prototype = Object.create( Chart && Chart.prototype );
        AreaChart.prototype.constructor = AreaChart;

        AreaChart.prototype.__processData = function __processData () {
            return processSeries(this);
        };

        AreaChart.prototype.__chartName = function __chartName () {
            return "AreaChart";
        };

        return AreaChart;
    }(Chart));

    var GeoChart = /*@__PURE__*/(function (Chart) {
        function GeoChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) GeoChart.__proto__ = Chart;
        GeoChart.prototype = Object.create( Chart && Chart.prototype );
        GeoChart.prototype.constructor = GeoChart;

        GeoChart.prototype.__processData = function __processData () {
            return processSimple(this);
        };

        GeoChart.prototype.__chartName = function __chartName () {
            return "GeoChart";
        };

        return GeoChart;
    }(Chart));

    var ScatterChart = /*@__PURE__*/(function (Chart) {
        function ScatterChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) ScatterChart.__proto__ = Chart;
        ScatterChart.prototype = Object.create( Chart && Chart.prototype );
        ScatterChart.prototype.constructor = ScatterChart;

        ScatterChart.prototype.__processData = function __processData () {
            return processSeries(this, "number");
        };

        ScatterChart.prototype.__chartName = function __chartName () {
            return "ScatterChart";
        };

        return ScatterChart;
    }(Chart));

    var BubbleChart = /*@__PURE__*/(function (Chart) {
        function BubbleChart () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) BubbleChart.__proto__ = Chart;
        BubbleChart.prototype = Object.create( Chart && Chart.prototype );
        BubbleChart.prototype.constructor = BubbleChart;

        BubbleChart.prototype.__processData = function __processData () {
            return processSeries(this, "bubble");
        };

        BubbleChart.prototype.__chartName = function __chartName () {
            return "BubbleChart";
        };

        return BubbleChart;
    }(Chart));

    var Timeline = /*@__PURE__*/(function (Chart) {
        function Timeline () {
            Chart.apply(this, arguments);
        }

        if ( Chart ) Timeline.__proto__ = Chart;
        Timeline.prototype = Object.create( Chart && Chart.prototype );
        Timeline.prototype.constructor = Timeline;

        Timeline.prototype.__processData = function __processData () {
            var data = this.rawData;
            for (var i = 0; i < data.length; i++) {
                data[i][1] = toDate(data[i][1]);
                data[i][2] = toDate(data[i][2]);
            }
            return data;
        };

        Timeline.prototype.__chartName = function __chartName () {
            return "Timeline";
        };

        return Timeline;
    }(Chart));

    Chartkick.LineChart = LineChart;
    Chartkick.PieChart = PieChart;
    Chartkick.ColumnChart = ColumnChart;
    Chartkick.BarChart = BarChart;
    Chartkick.AreaChart = AreaChart;
    Chartkick.GeoChart = GeoChart;
    Chartkick.ScatterChart = ScatterChart;
    Chartkick.BubbleChart = BubbleChart;
    Chartkick.Timeline = Timeline;

    // not ideal, but allows for simpler integration
    if (typeof window !== "undefined" && !window.Chartkick) {
        window.Chartkick = Chartkick;

        // clean up previous charts before Turbolinks loads new page
        document.addEventListener("turbolinks:before-render", function () {
            if (Chartkick.config.autoDestroy !== false) {
                Chartkick.destroyAll();
            }
        });

        // clean up previous charts before Turbo loads new page
        document.addEventListener("turbo:before-render", function () {
            if (Chartkick.config.autoDestroy !== false) {
                Chartkick.destroyAll();
            }
        });

        // use setTimeout so charting library can come later in same JS file
        setTimeout(function () {
            window.dispatchEvent(new Event("chartkick:load"));
        }, 0);
    }

    // backwards compatibility for esm require
    Chartkick.default = Chartkick;

    return Chartkick;

}));

/*!
  Highlight.js v11.7.0 (git: 82688fad18)
  (c) 2006-2022 undefined and other contributors
  License: BSD-3-Clause
 */
var hljs=function(){"use strict";var e={exports:{}};function t(e){
    return e instanceof Map?e.clear=e.delete=e.set=function (){
        throw Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function (){
        throw Error("set is read-only")
    }),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function (n){var i=e[n]
    ;"object"!=typeof i||Object.isFrozen(i)||t(i)})),e}
    e.exports=t,e.exports.default=t;var n = function n(e){
        void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1};
    n.prototype.ignoreMatch = function ignoreMatch (){this.isMatchIgnored=!0};function i(e){
        return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")
    }function r(e){
        var t = [], len = arguments.length - 1;
        while ( len-- > 0 ) t[ len ] = arguments[ len + 1 ];
        var n=Object.create(null);for(var t$1 in e){ n[t$1]=e[t$1]
        ; }return t.forEach((function (e){for(var t in e){ n[t]=e[t] }})),n}
    var s=function (e){ return !!e.scope||e.sublanguage&&e.language; };var o = function o(e,t){
        this.buffer="",this.classPrefix=t.classPrefix,e.walk(this)};o.prototype.addText = function addText (e){
        this.buffer+=i(e)};o.prototype.openNode = function openNode (e){if(!s(e)){ return; }var t=""
    ;t=e.sublanguage?"language-"+e.language:(function (e,ref){
        var t = ref.prefix;
        if(e.includes(".")){
            var n=e.split(".")
            ;return[("" + t + (n.shift())) ].concat( n.map((function (e,t){ return ("" + e + ("_".repeat(t+1))); }))).join(" ")
        }return("" + t + e)})(e.scope,{prefix:this.classPrefix}),this.span(t)};
    o.prototype.closeNode = function closeNode (e){s(e)&&(this.buffer+="</span>")};o.prototype.value = function value (){return this.buffer};o.prototype.span = function span (e){
        this.buffer+="<span class=\"" + e + "\">"};var a=function (e){
        if ( e === void 0 ) e={};
        var t={children:[]}
        ;return Object.assign(t,e),t};var c = function c(){
        this.rootNode=a(),this.stack=[this.rootNode]};

    var prototypeAccessors = { top: { configurable: true },root: { configurable: true } };prototypeAccessors.top.get = function (){
        return this.stack[this.stack.length-1]};prototypeAccessors.root.get = function (){return this.rootNode};c.prototype.add = function add (e){
        this.top.children.push(e)};c.prototype.openNode = function openNode (e){var t=a({scope:e})
    ;this.add(t),this.stack.push(t)};c.prototype.closeNode = function closeNode (){
        if(this.stack.length>1){ return this.stack.pop() }};c.prototype.closeAllNodes = function closeAllNodes (){
        for(;this.closeNode();){ ; }};c.prototype.toJSON = function toJSON (){return JSON.stringify(this.rootNode,null,4)};
    c.prototype.walk = function walk (e){return this.constructor._walk(e,this.rootNode)};c._walk = function _walk (e,t){
        var this$1 = this;

        return"string"==typeof t?e.addText(t):t.children&&(e.openNode(t),
            t.children.forEach((function (t){ return this$1._walk(e,t); })),e.closeNode(t)),e};c._collapse = function _collapse (e){
        "string"!=typeof e&&e.children&&(e.children.every((function (e){ return "string"==typeof e; }))?e.children=[e.children.join("")]:e.children.forEach((function (e){
            c._collapse(e)})))};

    Object.defineProperties( c.prototype, prototypeAccessors );var l = /*@__PURE__*/(function (c) {
        function l(e){c.call(this),this.options=e}

        if ( c ) l.__proto__ = c;
        l.prototype = Object.create( c && c.prototype );
        l.prototype.constructor = l;
        l.prototype.addKeyword = function addKeyword (e,t){""!==e&&(this.openNode(t),this.addText(e),this.closeNode())};
        l.prototype.addText = function addText (e){""!==e&&this.add(e)};l.prototype.addSublanguage = function addSublanguage (e,t){var n=e.root
        ;n.sublanguage=!0,n.language=t,this.add(n)};l.prototype.toHTML = function toHTML (){
            return new o(this,this.options).value()};l.prototype.finalize = function finalize (){return!0};

        return l;
    }(c));function g(e){
        return e?"string"==typeof e?e:e.source:null}function d(e){return p("(?=",e,")")}
    function u(e){return p("(?:",e,")*")}function h(e){return p("(?:",e,")?")}
    function p(){
        var e = [], len = arguments.length;
        while ( len-- ) e[ len ] = arguments[ len ];
        return e.map((function (e){ return g(e); })).join("")}function f(){
        var e = [], len = arguments.length;
        while ( len-- ) e[ len ] = arguments[ len ];
        var t=(function (e){
            var t=e[e.length-1]
            ;return"object"==typeof t&&t.constructor===Object?(e.splice(e.length-1,1),t):{}
        })(e);return"("+(t.capture?"":"?:")+e.map((function (e){ return g(e); })).join("|")+")"}
    function b(e){return RegExp(e.toString()+"|").exec("").length-1}
    var m=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./
    ;function E(e,ref){
        var t = ref.joinWith;
        var n=0;return e.map((function (e){n+=1;var t=n
        ;var i=g(e),r="";for(;i.length>0;){var e$1=m.exec(i);if(!e$1){r+=i;break}
            r+=i.substring(0,e$1.index),
                i=i.substring(e$1.index+e$1[0].length),"\\"===e$1[0][0]&&e$1[1]?r+="\\"+(Number(e$1[1])+t):(r+=e$1[0],
            "("===e$1[0]&&n++)}return r})).map((function (e){ return ("(" + e + ")"); })).join(t)}
    var x="[a-zA-Z]\\w*",w="[a-zA-Z_]\\w*",y="\\b\\d+(\\.\\d+)?",_="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",O="\\b(0b[01]+)",v={
        begin:"\\\\[\\s\\S]",relevance:0},N={scope:"string",begin:"'",end:"'",
        illegal:"\\n",contains:[v]},k={scope:"string",begin:'"',end:'"',illegal:"\\n",
        contains:[v]},M=function (e,t,n){
        if ( n === void 0 ) n={};
        var i=r({scope:"comment",begin:e,end:t,
            contains:[]},n);i.contains.push({scope:"doctag",
            begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
            end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0})
        ;var s=f("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/)
        ;return i.contains.push({begin:p(/[ ]+/,"(",s,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),i
    },S=M("//","$"),R=M("/\\*","\\*/"),j=M("#","$");var A=Object.freeze({
        __proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:x,UNDERSCORE_IDENT_RE:w,
        NUMBER_RE:y,C_NUMBER_RE:_,BINARY_NUMBER_RE:O,
        RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",
        SHEBANG:function (e){
            if ( e === void 0 ) e={};
            var t=/^#![ ]*\//
            ;return e.binary&&(e.begin=p(t,/.*\b/,e.binary,/\b.*/)),r({scope:"meta",begin:t,
                end:/$/,relevance:0,"on:begin":function (e,t){0!==e.index&&t.ignoreMatch()}},e)},
        BACKSLASH_ESCAPE:v,APOS_STRING_MODE:N,QUOTE_STRING_MODE:k,PHRASAL_WORDS_MODE:{
            begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
        },COMMENT:M,C_LINE_COMMENT_MODE:S,C_BLOCK_COMMENT_MODE:R,HASH_COMMENT_MODE:j,
        NUMBER_MODE:{scope:"number",begin:y,relevance:0},C_NUMBER_MODE:{scope:"number",
            begin:_,relevance:0},BINARY_NUMBER_MODE:{scope:"number",begin:O,relevance:0},
        REGEXP_MODE:{begin:/(?=\/[^/\n]*\/)/,contains:[{scope:"regexp",begin:/\//,
                end:/\/[gimuy]*/,illegal:/\n/,contains:[v,{begin:/\[/,end:/\]/,relevance:0,
                    contains:[v]}]}]},TITLE_MODE:{scope:"title",begin:x,relevance:0},
        UNDERSCORE_TITLE_MODE:{scope:"title",begin:w,relevance:0},METHOD_GUARD:{
            begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0},END_SAME_AS_BEGIN:function (e){ return Object.assign(e,{
            "on:begin":function (e,t){t.data._beginMatch=e[1]},"on:end":function (e,t){
                t.data._beginMatch!==e[1]&&t.ignoreMatch()}}); }});function I(e,t){
        "."===e.input[e.index-1]&&t.ignoreMatch()}function T(e,t){
        void 0!==e.className&&(e.scope=e.className,delete e.className)}function L(e,t){
        t&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",
            e.__beforeBegin=I,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,
        void 0===e.relevance&&(e.relevance=0))}function B(e,t){
        Array.isArray(e.illegal)&&(e.illegal=f.apply(void 0, e.illegal))}function D(e,t){
        if(e.match){
            if(e.begin||e.end){ throw Error("begin & end are not supported with match")
                ; }e.begin=e.match,delete e.match}}function H(e,t){
        void 0===e.relevance&&(e.relevance=1)}var P=function (e,t){if(!e.beforeMatch){ return
            ; }if(e.starts){ throw Error("beforeMatch cannot be used with starts")
            ; }var n=Object.assign({},e);Object.keys(e).forEach((function (t){delete e[t]
        })),e.keywords=n.keywords,e.begin=p(n.beforeMatch,d(n.begin)),e.starts={
            relevance:0,contains:[Object.assign(n,{endsParent:!0})]
        },e.relevance=0,delete n.beforeMatch
        },C=["of","and","for","in","not","or","if","then","parent","list","value"]
    ;function $(e,t,n){
        if ( n === void 0 ) n="keyword";
        var i=Object.create(null)
        ;return"string"==typeof e?r(n,e.split(" ")):Array.isArray(e)?r(n,e):Object.keys(e).forEach((function (n){
            Object.assign(i,$(e[n],t,n))})),i;function r(e,n){
            t&&(n=n.map((function (e){ return e.toLowerCase(); }))),n.forEach((function (t){var n=t.split("|")
            ;i[n[0]]=[e,U(n[0],n[1])]}))}}function U(e,t){
        return t?Number(t):(function (e){ return C.includes(e.toLowerCase()); })(e)?0:1}var z={},K=function (e){
        console.error(e)},W=function (e){
        var t = [], len = arguments.length - 1;
        while ( len-- > 0 ) t[ len ] = arguments[ len + 1 ];
        console.log.apply(console, [ "WARN: "+e ].concat( t ))},X=function (e,t){
        z[(e + "/" + t)]||(console.log(("Deprecated as of " + e + ". " + t)),z[(e + "/" + t)]=!0)
    },G=Error();function Z(e,t,ref){
        var n = ref.key;
        var i=0;var r=e[n],s={},o={}
        ;for(var e$1=1;e$1<=t.length;e$1++){ o[e$1+i]=r[e$1],s[e$1+i]=!0,i+=b(t[e$1-1])
        ; }e[n]=o,e[n]._emit=s,e[n]._multi=!0}function F(e){(function (e){
        e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,
            delete e.scope)})(e),"string"==typeof e.beginScope&&(e.beginScope={
        _wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope
    }),(function (e){if(Array.isArray(e.begin)){
        if(e.skip||e.excludeBegin||e.returnBegin){ throw K("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),
            G
            ; }if("object"!=typeof e.beginScope||null===e.beginScope){ throw K("beginScope must be object"),
            G; }Z(e,e.begin,{key:"beginScope"}),e.begin=E(e.begin,{joinWith:""})}})(e),(function (e){
        if(Array.isArray(e.end)){
            if(e.skip||e.excludeEnd||e.returnEnd){ throw K("skip, excludeEnd, returnEnd not compatible with endScope: {}"),
                G
                ; }if("object"!=typeof e.endScope||null===e.endScope){ throw K("endScope must be object"),
                G; }Z(e,e.end,{key:"endScope"}),e.end=E(e.end,{joinWith:""})}})(e)}function V(e){
        function t(t,n){
            return RegExp(g(t),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(n?"g":""))
        }var n = function n(){
            this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0};
        n.prototype.addRule = function addRule (e,t){
            t.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),
                this.matchAt+=b(e)+1};n.prototype.compile = function compile (){0===this.regexes.length&&(this.exec=function (){ return null; })
        ;var e=this.regexes.map((function (e){ return e[1]; }));this.matcherRe=t(E(e,{joinWith:"|"
        }),!0),this.lastIndex=0};n.prototype.exec = function exec (e){this.matcherRe.lastIndex=this.lastIndex
        ;var t=this.matcherRe.exec(e);if(!t){ return null
            ; }var n=t.findIndex((function (e,t){ return t>0&&void 0!==e; })),i=this.matchIndexes[n]
        ;return t.splice(0,n),Object.assign(t,i)};var i = function i(){
            this.rules=[],this.multiRegexes=[],
                this.count=0,this.lastIndex=0,this.regexIndex=0};i.prototype.getMatcher = function getMatcher (e){
            if(this.multiRegexes[e]){ return this.multiRegexes[e]; }var t=new n
            ;return this.rules.slice(e).forEach((function (ref){
                var e = ref[0];
                var n = ref[1];

                return t.addRule(e,n);
            })),
                t.compile(),this.multiRegexes[e]=t,t};i.prototype.resumingScanAtSamePosition = function resumingScanAtSamePosition (){
            return 0!==this.regexIndex};i.prototype.considerAll = function considerAll (){this.regexIndex=0};i.prototype.addRule = function addRule (e,t){
            this.rules.push([e,t]),"begin"===t.type&&this.count++};i.prototype.exec = function exec (e){
            var t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex
            ;var n=t.exec(e)
            ;if(this.resumingScanAtSamePosition()){ if(n&&n.index===this.lastIndex){ ; }else{
                var t$1=this.getMatcher(0);t$1.lastIndex=this.lastIndex+1,n=t$1.exec(e)} }
            return n&&(this.regexIndex+=n.position+1,
            this.regexIndex===this.count&&this.considerAll()),n};
        if(e.compilerExtensions||(e.compilerExtensions=[]),
        e.contains&&e.contains.includes("self")){ throw Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.")
            ; }return e.classNameAliases=r(e.classNameAliases||{}),function n(s,o){
            var ref;
            var a=s
            ;if(s.isCompiled){ return a
                ; }[T,D,F,P].forEach((function (e){ return e(s,o); })),e.compilerExtensions.forEach((function (e){ return e(s,o); })),
                s.__beforeBegin=null,[L,B,H].forEach((function (e){ return e(s,o); })),s.isCompiled=!0;var c=null
            ;return"object"==typeof s.keywords&&s.keywords.$pattern&&(s.keywords=Object.assign({},s.keywords),
                c=s.keywords.$pattern,
                delete s.keywords.$pattern),c=c||/\w+/,s.keywords&&(s.keywords=$(s.keywords,e.case_insensitive)),
                a.keywordPatternRe=t(c,!0),
            o&&(s.begin||(s.begin=/\B|\b/),a.beginRe=t(a.begin),s.end||s.endsWithParent||(s.end=/\B|\b/),
            s.end&&(a.endRe=t(a.end)),
                a.terminatorEnd=g(a.end)||"",s.endsWithParent&&o.terminatorEnd&&(a.terminatorEnd+=(s.end?"|":"")+o.terminatorEnd)),
            s.illegal&&(a.illegalRe=t(s.illegal)),
            s.contains||(s.contains=[]),s.contains=(ref = []).concat.apply(ref, s.contains.map((function (e){ return (function (e){ return (e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function (t){ return r(e,{
                variants:null},t); }))),e.cachedVariants?e.cachedVariants:q(e)?r(e,{
                starts:e.starts?r(e.starts):null
            }):Object.isFrozen(e)?r(e):e); })("self"===e?s:e); }))),s.contains.forEach((function (e){n(e,a)
            })),s.starts&&n(s.starts,o),a.matcher=(function (e){var t=new i
            ;return e.contains.forEach((function (e){ return t.addRule(e.begin,{rule:e,type:"begin"
            }); })),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:"end"
            }),e.illegal&&t.addRule(e.illegal,{type:"illegal"}),t})(a),a}(e)}function q(e){
        return!!e&&(e.endsWithParent||q(e.starts))}var J = /*@__PURE__*/(function (Error) {
        function J(e,t){Error.call(this, e),this.name="HTMLInjectionError",this.html=t}

        if ( Error ) J.__proto__ = Error;
        J.prototype = Object.create( Error && Error.prototype );
        J.prototype.constructor = J;

        return J;
    }(Error));
    var Y=i,Q=r,ee=Symbol("nomatch");var te=(function (t){
        var i=Object.create(null),r=Object.create(null),s=[];var o=!0
        ;var a="Could not find the language '{}', did you forget to load/include a language module?",c={
            disableAutodetect:!0,name:"Plain text",contains:[]};var g={
            ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,
            languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",
            cssSelector:"pre code",languages:null,__emitter:l};function b(e){
            return g.noHighlightRe.test(e)}function m(e,t,n){var i="",r=""
        ;"object"==typeof t?(i=e,
            n=t.ignoreIllegals,r=t.language):(X("10.7.0","highlight(lang, code, ...args) has been deprecated."),
            X("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),
            r=e,i=t),void 0===n&&(n=!0);var s={code:i,language:r};k("before:highlight",s)
        ;var o=s.result?s.result:E(s.language,s.code,n)
        ;return o.code=s.code,k("after:highlight",o),o}function E(e,t,r,s){
            var c=Object.create(null);function l(){if(!N.keywords){ return void M.addText(S)
                ; }var e=0;N.keywordPatternRe.lastIndex=0;var t=N.keywordPatternRe.exec(S),n=""
            ;for(;t;){n+=S.substring(e,t.index)
            ;var r=y.case_insensitive?t[0].toLowerCase():t[0],s=(i=r,N.keywords[i]);if(s){
                var e$1 = s[0];
                var i$1 = s[1];if(M.addText(n),n="",c[r]=(c[r]||0)+1,c[r]<=7&&(R+=i$1),e$1.startsWith("_")){ n+=t[0]; }else{
                    var n$1=y.classNameAliases[e$1]||e$1;M.addKeyword(t[0],n$1)}}else { n+=t[0]
            ; }e=N.keywordPatternRe.lastIndex,t=N.keywordPatternRe.exec(S)}var i
            ;n+=S.substring(e),M.addText(n)}function d(){null!=N.subLanguage?(function (){
                if(""===S){ return; }var e=null;if("string"==typeof N.subLanguage){
                    if(!i[N.subLanguage]){ return void M.addText(S)
                        ; }e=E(N.subLanguage,S,!0,k[N.subLanguage]),k[N.subLanguage]=e._top
                }else { e=x(S,N.subLanguage.length?N.subLanguage:null)
                ; }N.relevance>0&&(R+=e.relevance),M.addSublanguage(e._emitter,e.language)
            })():l(),S=""}function u(e,t){var n=1;var i=t.length-1;for(;n<=i;){
                if(!e._emit[n]){n++;continue}var i$1=y.classNameAliases[e[n]]||e[n],r=t[n]
                ;i$1?M.addKeyword(r,i$1):(S=r,l(),S=""),n++}}function h(e,t){
                return e.scope&&"string"==typeof e.scope&&M.openNode(y.classNameAliases[e.scope]||e.scope),
                e.beginScope&&(e.beginScope._wrap?(M.addKeyword(S,y.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),
                    S=""):e.beginScope._multi&&(u(e.beginScope,t),S="")),N=Object.create(e,{parent:{
                        value:N}}),N}function p(e,t,i){var r=(function (e,t){var n=e&&e.exec(t)
            ;return n&&0===n.index})(e.endRe,i);if(r){if(e["on:end"]){var i$1=new n(e)
            ;e["on:end"](t,i$1),i$1.isMatchIgnored&&(r=!1)}if(r){
                for(;e.endsParent&&e.parent;){ e=e.parent; }return e}}
                if(e.endsWithParent){ return p(e.parent,t,i) }}function f(e){
                return 0===N.matcher.regexIndex?(S+=e[0],1):(I=!0,0)}function b(e){
                var n=e[0],i=t.substring(e.index),r=p(N,e,i);if(!r){ return ee; }var s=N
                ;N.endScope&&N.endScope._wrap?(d(),
                    M.addKeyword(n,N.endScope._wrap)):N.endScope&&N.endScope._multi?(d(),
                    u(N.endScope,e)):s.skip?S+=n:(s.returnEnd||s.excludeEnd||(S+=n),
                    d(),s.excludeEnd&&(S=n));do{
                    N.scope&&M.closeNode(),N.skip||N.subLanguage||(R+=N.relevance),N=N.parent
                }while(N!==r.parent);return r.starts&&h(r.starts,e),s.returnEnd?0:n.length}
            var m={};function w(i,s){var a=s&&s[0];if(S+=i,null==a){ return d(),0
                ; }if("begin"===m.type&&"end"===s.type&&m.index===s.index&&""===a){
                if(S+=t.slice(s.index,s.index+1),!o){var t$1=Error(("0 width match regex (" + e + ")"))
                ;throw t$1.languageName=e,t$1.badRule=m.rule,t$1}return 1}
                if(m=s,"begin"===s.type){ return(function (e){
                    var t=e[0],i=e.rule,r=new n(i),s=[i.__beforeBegin,i["on:begin"]]
                    ;for(var i$1 = 0, list = s; i$1 < list.length; i$1 += 1){
                        var n$1 = list[i$1];

                        if(n$1&&(n$1(e,r),r.isMatchIgnored)){ return f(t)
                            ;
                        } }return i.skip?S+=t:(i.excludeBegin&&(S+=t),
                        d(),i.returnBegin||i.excludeBegin||(S=t)),h(i,e),i.returnBegin?0:t.length})(s)
                    ; }if("illegal"===s.type&&!r){
                    var e$1=Error('Illegal lexeme "'+a+'" for mode "'+(N.scope||"<unnamed>")+'"')
                    ;throw e$1.mode=N,e$1}if("end"===s.type){var e$2=b(s);if(e$2!==ee){ return e$2 }}
                if("illegal"===s.type&&""===a){ return 1
                    ; }if(A>1e5&&A>3*s.index){ throw Error("potential infinite loop, way more iterations than matches")
                    ; }return S+=a,a.length}var y=O(e)
            ;if(!y){ throw K(a.replace("{}",e)),Error('Unknown language: "'+e+'"')
                ; }var _=V(y);var v="",N=s||_;var k={},M=new g.__emitter(g);(function (){var e=[]
            ;for(var t=N;t!==y;t=t.parent){ t.scope&&e.unshift(t.scope)
            ; }e.forEach((function (e){ return M.openNode(e); }))})();var S="",R=0,j=0,A=0,I=!1;try{
                for(N.matcher.considerAll();;){
                    A++,I?I=!1:N.matcher.considerAll(),N.matcher.lastIndex=j
                    ;var e$1=N.matcher.exec(t);if(!e$1){ break; }var n$1=w(t.substring(j,e$1.index),e$1)
                    ;j=e$1.index+n$1}
                return w(t.substring(j)),M.closeAllNodes(),M.finalize(),v=M.toHTML(),{
                    language:e,value:v,relevance:R,illegal:!1,_emitter:M,_top:N}}catch(n$2){
                if(n$2.message&&n$2.message.includes("Illegal")){ return{language:e,value:Y(t),
                    illegal:!0,relevance:0,_illegalBy:{message:n$2.message,index:j,
                        context:t.slice(j-100,j+100),mode:n$2.mode,resultSoFar:v},_emitter:M}; }if(o){ return{
                    language:e,value:Y(t),illegal:!1,relevance:0,errorRaised:n$2,_emitter:M,_top:N}
                    ; }throw n$2}}function x(e,t){t=t||g.languages||Object.keys(i);var n=(function (e){
            var t={value:Y(e),illegal:!1,relevance:0,_top:c,_emitter:new g.__emitter(g)}
            ;return t._emitter.addText(e),t})(e),r=t.filter(O).filter(N).map((function (t){ return E(t,e,!1); }))
        ;r.unshift(n);var s=r.sort((function (e,t){
            if(e.relevance!==t.relevance){ return t.relevance-e.relevance
                ; }if(e.language&&t.language){if(O(e.language).supersetOf===t.language){ return 1
                ; }if(O(t.language).supersetOf===e.language){ return-1 }}return 0}));
            var o = s[0];
            var a = s[1];
            var l=o
            ;return l.secondBest=a,l}function w(e){var t=null;var n=(function (e){
            var t=e.className+" ";t+=e.parentNode?e.parentNode.className:""
            ;var n=g.languageDetectRe.exec(t);if(n){var t$1=O(n[1])
            ;return t$1||(W(a.replace("{}",n[1])),
                W("Falling back to no-highlight mode for this block.",e)),t$1?n[1]:"no-highlight"}
            return t.split(/\s+/).find((function (e){ return b(e)||O(e); }))})(e);if(b(n)){ return
            ; }if(k("before:highlightElement",{el:e,language:n
        }),e.children.length>0&&(g.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),
            console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),
            console.warn("The element with unescaped HTML:"),
            console.warn(e)),g.throwUnescapedHTML)){ throw new J("One of your code blocks includes unescaped HTML.",e.innerHTML)
            ; }t=e;var i=t.textContent,s=n?m(i,{language:n,ignoreIllegals:!0}):x(i)
        ;e.innerHTML=s.value,(function (e,t,n){var i=t&&r[t]||n
        ;e.classList.add("hljs"),e.classList.add("language-"+i)
        })(e,n,s.language),e.result={language:s.language,re:s.relevance,
            relevance:s.relevance},s.secondBest&&(e.secondBest={
            language:s.secondBest.language,relevance:s.secondBest.relevance
        }),k("after:highlightElement",{el:e,result:s,text:i})}var y=!1;function _(){
            "loading"!==document.readyState?document.querySelectorAll(g.cssSelector).forEach(w):y=!0
        }function O(e){return e=(e||"").toLowerCase(),i[e]||i[r[e]]}
        function v(e,ref){
            var t = ref.languageName;
            "string"==typeof e&&(e=[e]),e.forEach((function (e){
                r[e.toLowerCase()]=t}))}function N(e){var t=O(e)
        ;return t&&!t.disableAutodetect}function k(e,t){var n=e;s.forEach((function (e){
            e[n]&&e[n](t)}))}
        "undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function (){
            y&&_()}),!1),Object.assign(t,{highlight:m,highlightAuto:x,highlightAll:_,
            highlightElement:w,
            highlightBlock:function (e){ return (X("10.7.0","highlightBlock will be removed entirely in v12.0"),
                X("10.7.0","Please use highlightElement now."),w(e)); },configure:function (e){g=Q(g,e)},
            initHighlighting:function (){
                _(),X("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},
            initHighlightingOnLoad:function (){
                _(),X("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")
            },registerLanguage:function (e,n){var r=null;try{r=n(t)}catch(t$1){
                if(K("Language definition for '{}' could not be registered.".replace("{}",e)),
                    !o){ throw t$1; }K(t$1),r=c}
                r.name||(r.name=e),i[e]=r,r.rawDefinition=n.bind(null,t),r.aliases&&v(r.aliases,{
                    languageName:e})},unregisterLanguage:function (e){delete i[e]
            ;for(var i$1 = 0, list = Object.keys(r); i$1 < list.length; i$1 += 1){
                var t = list[i$1];

                r[t]===e&&delete r[t]
            }},
            listLanguages:function (){ return Object.keys(i); },getLanguage:O,registerAliases:v,
            autoDetection:N,inherit:Q,addPlugin:function (e){(function (e){
                e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=function (t){
                    e["before:highlightBlock"](Object.assign({block:t.el},t))
                }),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=function (t){
                    e["after:highlightBlock"](Object.assign({block:t.el},t))})})(e),s.push(e)}
        }),t.debugMode=function (){o=!1},t.safeMode=function (){o=!0
        },t.versionString="11.7.0",t.regex={concat:p,lookahead:d,either:f,optional:h,
            anyNumberOfTimes:u};for(var t$1 in A){ "object"==typeof A[t$1]&&e.exports(A[t$1])
        ; }return Object.assign(t,A),t})({});return te}()
;"object"==typeof exports&&"undefined"!=typeof module&&(module.exports=hljs);/*! `pgsql` grammar compiled for Highlight.js 11.7.0 */
(function (){var E=(function (){"use strict";return function (E){
    var T=E.COMMENT("--","$"),N="\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$",A="BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ",R=A.trim().split(" ").map((function (E){ return E.split("|")[0]; })).join("|"),I="ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST".split(" ").map((function (E){ return E.split("|")[0]; })).join("|")
    ;return{name:"PostgreSQL",aliases:["postgres","postgresql"],supersetOf:"sql",
        case_insensitive:!0,keywords:{
            keyword:"ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ",
            built_in:"CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED "
        },illegal:/:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
        contains:[{className:"keyword",variants:[{begin:/\bTEXT\s*SEARCH\b/},{
                begin:/\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/},{
                begin:/\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/},{
                begin:/\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/},{
                begin:/\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/},{begin:/\bNULLS\s+(FIRST|LAST)\b/},{
                begin:/\bEVENT\s+TRIGGER\b/},{begin:/\b(MAPPING|OR)\s+REPLACE\b/},{
                begin:/\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/},{
                begin:/\b(SHARE|EXCLUSIVE)\s+MODE\b/},{
                begin:/\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/},{
                begin:/\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/
            },{begin:/\bPRESERVE\s+ROWS\b/},{begin:/\bDISCARD\s+PLANS\b/},{
                begin:/\bREFERENCING\s+(OLD|NEW)\b/},{begin:/\bSKIP\s+LOCKED\b/},{
                begin:/\bGROUPING\s+SETS\b/},{
                begin:/\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/},{
                begin:/\b(WITH|WITHOUT)\s+HOLD\b/},{
                begin:/\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/},{
                begin:/\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/},{
                begin:/\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/},{
                begin:/\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/},{begin:/\bIS\s+(NOT\s+)?UNKNOWN\b/
            },{begin:/\bSECURITY\s+LABEL\b/},{begin:/\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/
            },{begin:/\bWITH\s+(NO\s+)?DATA\b/},{begin:/\b(FOREIGN|SET)\s+DATA\b/},{
                begin:/\bSET\s+(CATALOG|CONSTRAINTS)\b/},{begin:/\b(WITH|FOR)\s+ORDINALITY\b/},{
                begin:/\bIS\s+(NOT\s+)?DOCUMENT\b/},{
                begin:/\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/},{
                begin:/\b(STRIP|PRESERVE)\s+WHITESPACE\b/},{
                begin:/\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/},{
                begin:/\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/},{begin:/\bAT\s+TIME\s+ZONE\b/},{
                begin:/\bGRANTED\s+BY\b/},{begin:/\bRETURN\s+(QUERY|NEXT)\b/},{
                begin:/\b(ATTACH|DETACH)\s+PARTITION\b/},{
                begin:/\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/},{
                begin:/\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/
            },{begin:/\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/}]},{
            begin:/\b(FORMAT|FAMILY|VERSION)\s*\(/},{begin:/\bINCLUDE\s*\(/,
            keywords:"INCLUDE"},{begin:/\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/
        },{
            begin:/\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/
        },{begin:/\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,relevance:10},{
            begin:/\bEXTRACT\s*\(/,end:/\bFROM\b/,returnEnd:!0,keywords:{
                type:"CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
            }},{begin:/\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,keywords:{keyword:"NAME"}},{
            begin:/\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,keywords:{
                keyword:"DOCUMENT CONTENT"}},{beginKeywords:"CACHE INCREMENT MAXVALUE MINVALUE",
            end:E.C_NUMBER_RE,returnEnd:!0,keywords:"BY CACHE INCREMENT MAXVALUE MINVALUE"
        },{className:"type",begin:/\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/},{className:"type",
            begin:/\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },{
            begin:/\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
            keywords:{keyword:"RETURNS",
                type:"LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
            }},{begin:"\\b("+I+")\\s*\\("},{begin:"\\.("+R+")\\b"},{
            begin:"\\b("+R+")\\s+PATH\\b",keywords:{keyword:"PATH",
                type:A.replace("PATH ","")}},{className:"type",begin:"\\b("+R+")\\b"},{
            className:"string",begin:"'",end:"'",contains:[{begin:"''"}]},{
            className:"string",begin:"(e|E|u&|U&)'",end:"'",contains:[{begin:"\\\\."}],
            relevance:10},E.END_SAME_AS_BEGIN({begin:N,end:N,contains:[{
                subLanguage:["pgsql","perl","python","tcl","r","lua","java","php","ruby","bash","scheme","xml","json"],
                endsWithParent:!0}]}),{begin:'"',end:'"',contains:[{begin:'""'}]
        },E.C_NUMBER_MODE,E.C_BLOCK_COMMENT_MODE,T,{className:"meta",variants:[{
                begin:"%(ROW)?TYPE",relevance:10},{begin:"\\$\\d+"},{begin:"^#\\w",end:"$"}]},{
            className:"symbol",begin:"<<\\s*[a-zA-Z_][a-zA-Z_0-9$]*\\s*>>",relevance:10}]}}
})();hljs.registerLanguage("pgsql",E)})();


function highlightQueries() {
    $("pre code").each(function (i, block) {
        $(block).addClass("language-pgsql");
        hljs.highlightElement(block);
    });
}

function initSlider() {
    function roundTime(time) {
        var period = 1000 * 60 * 5;
        return new Date(Math.ceil(time.getTime() / period) * period);
    }

    function pad(num) {
        return (num < 10) ? "0" + num : num;
    }

    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    var days = 1;
    var now = new Date();
    var sliderStartAt = roundTime(now) - days * 24 * 60 * 60 * 1000;
    var sliderMax = 24 * 12 * days;

    startAt = startAt || sliderStartAt;
    var min = (startAt > 0) ? (startAt - sliderStartAt) / (1000 * 60 * 5) : 0;

    var max = (endAt > 0) ? (endAt - sliderStartAt) / (1000 * 60 * 5) : sliderMax;

    var slider = document.getElementById("slider");

    noUiSlider.create(slider, {
        range: {
            min: 0,
            max: sliderMax
        },
        step: 1,
        connect: true,
        start: [min, max]
    });

    // remove outline for mouse only
    $(".noUi-handle").mousedown(function () {
        $(this).addClass("no-outline");
    }).blur(function () {
        $(this).removeClass("no-outline");
    });

    function updateText() {
        var values = slider.noUiSlider.get();
        setText("#range-start", values[0]);
        setText("#range-end", values[1]);
    }

    function setText(selector, offset) {
        var time = timeAt(offset);

        var html = "";
        if (time === now) {
            if (selector === "#range-end") {
                html = "Now";
            }
        } else {
            html = time.getDate() + " " + months[time.getMonth()] + " " + pad(time.getHours()) + ":" + pad(time.getMinutes());
        }
        $(selector).text(html);
    }

    function timeAt(offset) {
        var time = new Date(sliderStartAt + (offset * 5) * 60 * 1000);
        return (time > now) ? now : time;
    }

    function timeParam(time) {
        return time.toISOString().replace(/\.000Z$/, "Z");
    }

    function queriesPath(params) {
        var path = "queries";
        if (params.start_at || params.end_at || params.sort || params.min_average_time || params.min_calls || params.debug) {
            path += "?" + $.param(params);
        }
        return path;
    }

    function refreshStats(push) {
        var values = slider.noUiSlider.get();
        var startAt = push ? timeAt(values[0]) : new Date(window.startAt);
        var endAt = timeAt(values[1]);

        var params = {}
        if (startAt.getTime() != sliderStartAt) {
            params.start_at = timeParam(startAt);
        }
        if (endAt < now) {
            params.end_at = timeParam(endAt);
        }
        if (sort) {
            params.sort = sort;
        }
        if (minAverageTime) {
            params.min_average_time = minAverageTime;
        }
        if (minCalls) {
            params.min_calls = minCalls;
        }
        if (debug) {
            params.debug = debug;
        }

        var path = queriesPath(params);

        $(".queries-table th a").each(function () {
            var p = $.extend({}, params, {sort: $(this).data("sort"), min_average_time: minAverageTime, min_calls: minCalls, debug: debug});
            if (!p.sort) {
                delete p.sort;
            }
            if (!p.min_average_time) {
                delete p.min_average_time;
            }
            if (!p.min_calls) {
                delete p.min_calls;
            }
            if (!p.debug) {
                delete p.debug;
            }
            $(this).attr("href", queriesPath(p));
        });


        var callback = function (response, status, xhr) {
            if (status === "error" ) {
                $(".queries-info").css("color", "red").text(xhr.status + " " + xhr.statusText);
            } else {
                highlightQueries();
            }
        };
        $("#queries").html('<tr><td colspan="3"><p class="queries-info text-muted">...</p></td></tr>').load(path, callback);

        if (push && history.pushState) {
            history.pushState(null, null, path);
        }
    }

    slider.noUiSlider.on("slide", updateText);
    slider.noUiSlider.on("change", function () {
        refreshStats(true);
    });
    updateText();
    $(function () {
        refreshStats(false);
    });
}

$(document).on("click", ".query-code", function () {
    this.style.maxHeight = "none";
});

$(document).on("click", ".migration-link", function (e) {
    e.preventDefault();
    $(this).parent().next(".migration").css("display", "block");
});

$(document).on("click", ".show-details", function () {
    $(this).nextAll(".details").css("display", "block");
    $(this).css("display", "none");
});
